import "../std/io.lumina"

import "compiler.lumina"
import "parser.lumina"
import "lexer.lumina"
import "position.lumina"
import "condition.lumina"
import "name.lumina"
import "block.lumina"


type While {
	Region region;
	
	Name keyword;
	Condition condition;
	Block block;

	int id;
	bool hasReturned;

	func parseWhile(While self, Parser parser, SyntaxTree tree, Lexer lexer, Block block) -> While {
		self.region = lexer.startRegion();

		self.keyword = lexer.consumeKeyword(KEYWORD_while);

		self.condition = new Condition();
		self.condition.parseCondition(parser, lexer, block);

		self.block = createBlock(block);
		self.block.parseBlock(parser, lexer, tree);

		self.hasReturned = self.block.hasReturned;

		lexer.endRegion(self.region);
		return self;
	}

	func bindWhile(While self, Parser parser) {
		self.condition.bindCondition(parser);
		self.block.bindBlock(parser);
	}

	func typeCheckWhile(While self, Parser parser) {
		self.condition.typeCheckCondition(parser);
		self.block.typeCheckBlock(parser);
	}

	func writeWhile(While self, Compiler compiler) {
		print("can't write while yet\n");
	}
}
