import "position.lumina"
import "assignment.lumina"
import "expression.lumina"
import "if.lumina"
import "while.lumina"
import "import.lumina"
import "variable.lumina"
import "function.lumina"
import "type.lumina"
import "block.lumina"


type Statement {
	Region region;

	Assignment assignment;
	Expression expression;
	If ifStatement;
	While whileStatement;
	Import importStatement;
	Variable variable;
	FunctionDefinition function;
	TypeObj typeStatement;
	Return returnStatement;
	Block blockStatement;
}

func createAssignmentStatement(Assignment assignment) -> Statement {
	var statement = new Statement();

	statement.region = assignment.region;
	statement.assignment = assignment;

	return statement;
}

func createExpressionStatement(Expression expression) -> Statement {
	var statement = new Statement();

	statement.region = expression.region;
	statement.expression = expression;

	return statement;
}

func createIfStatement(If ifStatement) -> Statement {
	var statement = new Statement();

	statement.region = ifStatement.region;
	statement.ifStatement = ifStatement;

	return statement;
}

func createWhileStatement(While whileStatement) -> Statement {
	var statement = new Statement();

	statement.region = whileStatement.region;
	statement.whileStatement = whileStatement;

	return statement;
}

func createImportStatement(Import importStatement) -> Statement {
	var statement = new Statement();

	statement.region = importStatement.region;
	statement.importStatement = importStatement;

	return statement;
}

func createVariableStatement(Variable variable) -> Statement {
	var statement = new Statement();

	statement.region = variable.definition.region;
	statement.variable = variable;

	return statement;
}

func createFunctionStatement(FunctionDefinition function) -> Statement {
	var statement = new Statement();

	statement.region = function.region;
	statement.function = function;

	return statement;
}

func createReturnStatement(Return returnStatement) -> Statement {
	var statement = new Statement();

	statement.region = returnStatement.region;
	statement.returnStatement = returnStatement;

	return statement;
}

func createTypeStatement(TypeObj typeStatement) -> Statement {
	var statement = new Statement();

	statement.region = typeStatement.definition.region;
	statement.typeStatement = typeStatement;

	return statement;
}

func createBlockStatement(Block block, Region region) -> Statement {
	var statement = new Statement();

	statement.region = region;
	statement.blockStatement = block;

	return statement;
}
