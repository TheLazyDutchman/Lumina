import "../std/io.lumina"
import "../std/collections.lumina"

import "compiler.lumina"
import "parser.lumina"
import "lexer.lumina"
import "type.lumina"
import "position.lumina"
import "unary.lumina"
import "operator.lumina"
import "block.lumina"


type BitwisePart {
	Operator operator;
	Unary value;
}

type Bitwise {
	Region region;

	Unary value;
	Array<BitwisePart> parts;

	func parseBitwise(Bitwise self, Parser parser, Lexer lexer, Block block) -> Bitwise {
		self.region = lexer.startRegion();

		self.value = new Unary();
		self.value.parseUnary(parser, lexer, block);

		self.parts = createArray<BitwisePart>();

		while (lexer.current.operator.precedence == PREC_bitwise) {
			var part = new BitwisePart();
			part.operator = lexer.consumePrecedence(PREC_bitwise);

			part.value = new Unary();
			part.value.parseUnary(parser, lexer, block);

			self.parts.push(part);
		}

		lexer.endRegion(self.region);

		return self;
	}

	func bindBitwise(Bitwise self, Parser parser) {
		self.value.bindUnary(parser);

		var i = 0;
		while (i < self.parts.size) {
			var part = self.parts.get(i);
			part.value.bindUnary(parser);
			i = i + 1;
		}
	}

	func typeCheckBitwise(Bitwise self, Parser parser) -> TypeObj {
		var leftType = self.value.typeCheckUnary(parser);

		if (self.parts.size == 0) {
			return leftType;
		}

		if (!leftType.checkType(parser.int, parser)) {
			parser.error(self.region.start, " expected left hand side of bitwise operation to be of type 'int'\n");
		}

		var i = 0;
		while (i < self.parts.size) {
			var rightType = self.value.typeCheckUnary(parser);

			if (!rightType.checkType(parser.int, parser)) {
				parser.error(self.value.region.start, " expected right hand side of bitwise operation to be of type 'int'\n");
			}
			i = i + 1;
		}

		return parser.int;
	}

	func writeBitwise(Bitwise self, Compiler compiler, bool getPointer) -> Register {
		var valueRegister = self.value.writeUnary(compiler, getPointer);

		var i = 0;
		while (i < self.parts.size) {
			print("can't write bitwise operation\n");
			i = i + 1;
		}

		return valueRegister;
	}

	func getTypeBitwise(Bitwise self, Parser parser) -> TypeObj {
		return self.value.getTypeUnary(parser);
	}
}
