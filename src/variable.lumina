import "../std/string.lumina"
import "../std/collections.lumina"

import "parser.lumina"
import "lexer.lumina"
import "position.lumina"
import "name.lumina"
import "expression.lumina"
import "operator.lumina"
import "type.lumina"
import "whitespace.lumina"


type Variable {
	str name;
	VariableDefinition definition;

	int depth;
	int position;

	TypeObj variableType;
	
	bool isConstant;
	bool isEvaluated;
	int value;
}

type VariableDefinition {
	Region region;

	Name keyword;
	Name name;
	Operator equalSign;
	Expression value;
	Operator semicolon;

	TypeObj variableType;

	func parse(VariableDefinition self, Parser parser, Lexer lexer) -> VariableDefinition {
		self.region = lexer.startRegion();

		self.keyword = lexer.consumeKeyword(KEYWORD_var);
		if (self.keyword == (Name)0) {
			self.keyword = lexer.consumeKeyword(KEYWORD_const);
		}

		self.name = lexer.consumeIdentifier();
		if (self.name == (Name)0) {
			parser.error(lexer.here(), " expected variable name\n");
		}

		self.equalSign = lexer.consumeOperator("=");
		if (self.equalSign == (Operator)0) {
			parser.error(lexer.here(), " expected '=' in variable definition\n");
		}

		self.value = new Expression();
		self.value.parse(parser, lexer);

		self.semicolon = lexer.consumeOperator(";");
		if (self.semicolon == (Operator)0) {
			parser.error(lexer.here(), " expected ';' after variable definition\n");
		}

		lexer.endRegion(self.region);
		return self;
	}
}
func createVariableFromString(str name, int depth, int position, TypeObj variableType) -> Variable {
	var variable = new Variable();

	variable.name = name;

	variable.depth = depth;
	variable.position = position;

	variable.variableType = variableType;

	variable.value = 0;

	return variable;
}

func createVariableFromDefinition(VariableDefinition definition, int depth, int position) -> Variable {
	var variable = createVariableFromString(definition.name.name, depth, position, definition.variableType);

	variable.definition = definition;

	return variable;
}

func createConstantFromString(str name, TypeObj constantType, int value) -> Variable {
	var constant = createVariableFromString(name, 0, 0, constantType);

	constant.isConstant = true;
	constant.isEvaluated = true;
	constant.value = value;

	return constant;
}

func createConstantFromDefinition(VariableDefinition definition) -> Variable {
	var constant = createVariableFromString(definition.name.name, 0, 0, definition.variableType);

	constant.isConstant = true;
	constant.definition = definition;

	return constant;
}

func findVariable(Array<Variable> list, str name) -> Variable {
	var i = 0;
	while (i < list.size) {
		if (streq(list.list[i].name, name)) {
			return list.list[i];
		}
		i = i + 1;
	}
	return (Variable)0;
}

func getNumVariables(Array<Variable> list) -> int {
	var sum = 0;
	var i = 0;
	while (i < list.size) {
		if (list.list[i].isConstant != true) {
			sum = sum + 1;
		}
		i = i + 1;
	}
	return sum;
}
