import "../std/string.lumina"
import "../std/collections.lumina"

import "position.lumina"
import "whitespace.lumina"
import "value.lumina"


const PREC_statement = 0;
const PREC_assignment = 1;
const PREC_expression = 2;
const PREC_or = 3;
const PREC_and = 4;
const PREC_comparison = 5;
const PREC_term = 6;
const PREC_factor = 7;
const PREC_bitwise = 8;
const PREC_index = 9;
const PREC_call = 10;

type OperatorType {
	str name;
	int precedence;
}

type Operator {
	WhiteSpace space;
	Position position;
	int operatorType;
	str name;
	int precedence;
}


func createOperatorType(str name, int precedence) -> OperatorType {
	var operator = new OperatorType();

	operator.name = name;
	operator.precedence = precedence;

	return operator;
}

var operatorList = createArray<OperatorType>();
operatorList.push(createOperatorType("<<", PREC_bitwise));
operatorList.push(createOperatorType(">>", PREC_bitwise));
operatorList.push(createOperatorType("||", PREC_or));
operatorList.push(createOperatorType("&&", PREC_and));
operatorList.push(createOperatorType("|", PREC_bitwise));
operatorList.push(createOperatorType("&", PREC_bitwise));
operatorList.push(createOperatorType("~", PREC_bitwise));
operatorList.push(createOperatorType("->", PREC_statement));
operatorList.push(createOperatorType("!=", PREC_comparison));
operatorList.push(createOperatorType("<=", PREC_comparison));
operatorList.push(createOperatorType(">=", PREC_comparison));
operatorList.push(createOperatorType("==", PREC_comparison));
operatorList.push(createOperatorType("<", PREC_comparison));
operatorList.push(createOperatorType(">", PREC_comparison));
operatorList.push(createOperatorType("!", PREC_bitwise));
operatorList.push(createOperatorType("=", PREC_assignment));
operatorList.push(createOperatorType("+", PREC_term));
operatorList.push(createOperatorType("-", PREC_term));
operatorList.push(createOperatorType("*", PREC_factor));
operatorList.push(createOperatorType("/", PREC_factor));
operatorList.push(createOperatorType("%", PREC_factor));
operatorList.push(createOperatorType("(", PREC_call));
operatorList.push(createOperatorType(")", PREC_statement));
operatorList.push(createOperatorType("{", PREC_statement));
operatorList.push(createOperatorType("}", PREC_statement));
operatorList.push(createOperatorType("[", PREC_index));
operatorList.push(createOperatorType("]", PREC_statement));
operatorList.push(createOperatorType(".", PREC_index));
operatorList.push(createOperatorType(",", PREC_statement));
operatorList.push(createOperatorType(";", PREC_statement));

func createOperator(Position position, WhiteSpace space) -> Operator {
	var operator = new Operator();

	operator.position = position;
	operator.space = space;

	operator.operatorType = -1;
	operator.name = fromOffset(position.buffer, position.index, 2);
	operator.precedence = 0;

	var i = 0;
	while (i < operatorList.size) {
		var operatorType = operatorList.get(i);
		var opString = operatorType.name;
		if (strneq(opString, operator.name, strlen(opString))) {
			operator.operatorType = i;
			operator.name = opString;
			operator.precedence = operatorType.precedence;

			i = operatorList.size;
		}
		i = i + 1;
	}

	return operator;
}

func isOperator(Operator operator, str name) -> bool {
	if (operator == (Operator)0) {
		return false;
	}

	if (streq(operator.name, name) != true) {
		return false;
	}

	return true;
}
