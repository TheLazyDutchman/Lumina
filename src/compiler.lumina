import "../std/collections.lumina"
import "../std/string.lumina"
import "../std/io.lumina"

import "type.lumina"


const CALLSTACKSIZE = 2048;
const DATASTACKSIZE = 40960;

type Register {
	str name;
	bool used;
}

type Compiler {
	Array<Register> registers;
	int target;

	func getRegister(Compiler self) -> Register {
		var i = 0;
		while (i < self.registers.size) {
			if (!self.registers.get(i).used) {
				self.registers.get(i).used = true;
				return self.registers.get(i);
			}
			i = i + 1;
		}
		print("all registers are in use\n");
		return (Register)0;
	}

	func findRegister(Compiler self, str name) -> Register {
		var i = 0;
		while (i < self.registers.size) {
			if (streq(self.registers.get(i).name, name)) {
				return self.registers.get(i);
			}
			i = i + 1;
		}
		print("can not find register with name: ");
		print(name);
		print("\n");
		return (Register)0;
	}

	func writeOutput(Compiler self, str value) {
		fprint(self.target, value);
	}

	func writeInt(Compiler self, int value) {
		fprinti(self.target, value);
	}

	func writeHeader(Compiler self) {
		self.writeOutput("section .text\n");
		self.writeOutput("global _start\n");

		//self.writeFindBlockBuiltin();
		//self.writeGetBlockBuiltin();
		//self.writeCreateBlockBuiltin();
		//self.writeExpandHeapBuiltin();
		//self.writeAllocateBuiltin();
		//self.writeNewBuiltin();
		//self.writeNewListBuiltin();
		//self.writeSyscallBuiltin();
	}

	func writeStart(Compiler self) {
		self.writeOutput("_start:\n");

		self.writeOutput("	mov rax, 12 ;; sysbrk\n");
		self.writeOutput("	mov rdi, 0 ;; find start of heap\n");
		self.writeOutput("	syscall\n");
		self.writeOutput("	mov [heapstart], rax\n");

		self.writeOutput("	mov rax, 12 ;; sysbrk\n");
		self.writeOutput("	mov rdi, [heapstart]\n");
		self.writeOutput("	add rdi, 8192\n");
		self.writeOutput("	mov [heapend], rdi\n");

		self.writeOutput("	syscall ;; allocate 1 page of null space and a first memory block of 1 pagesize\n");

		self.writeOutput("	mov rax, [heapstart]\n");
		self.writeOutput("	add rax, 4096\n");
		self.writeOutput("	mov qword [rax], 0\n");
		self.writeOutput("	mov qword [rax + 8], 0\n");
		self.writeOutput("	mov qword [rax + 16], 4096 - 8\n");
		self.writeOutput("	mov [lastblock], rax\n");

		self.writeOutput("	lea rax, [datastack + ");
		self.writeInt(DATASTACKSIZE);
		self.writeOutput("]\n");

		self.writeOutput("	mov [basestack], rax\n");
		self.writeOutput("	xchg rsp, rax\n");

		self.writeOutput("	push qword [heapstart]\n");

		self.writeOutput("	mov rbx, [rax]\n");
		self.writeOutput("	push rbx;; argc\n");

		self.writeOutput("	mov rbx, rax\n");
		self.writeOutput("	add rbx, 8\n");
		self.writeOutput("	mov rcx, rbx\n");
		self.writeOutput("	sub rcx, [heapstart]\n");
		self.writeOutput("	push rcx;; argv\n");

		self.writeOutput(".argv_condition:\n");
		self.writeOutput("	mov rcx, [rbx]\n");
		self.writeOutput("	cmp rcx, 0\n");
		self.writeOutput("	je .argv_end\n");
		self.writeOutput("	sub rcx, [heapstart]\n");
		self.writeOutput("	mov [rbx], rcx\n");
		self.writeOutput("	add rbx, 8\n");
		self.writeOutput("	jmp .argv_condition\n");
		self.writeOutput(".argv_end:\n");

		self.writeOutput("	add rbx, 8\n");
		self.writeOutput("	mov rcx, rbx\n");
		self.writeOutput("	sub rcx, [heapstart]\n");
		self.writeOutput("	push rcx;; envp\n");

		self.writeOutput(".envp_condition:\n");
		self.writeOutput("	mov rcx, [rbx]\n");
		self.writeOutput("	cmp rcx, 0\n");
		self.writeOutput("	je .envp_end\n");
		self.writeOutput("	sub rcx, [heapstart]\n");
		self.writeOutput("	mov [rbx], rcx\n");
		self.writeOutput("	add rbx, 8\n");
		self.writeOutput("	jmp .envp_condition\n");
		self.writeOutput(".envp_end:\n");

		self.writeOutput("	xchg rsp, rax\n");
		self.writeOutput("	mov [datarsp], rax\n\n");
	}

	func writeFooter(Compiler self, Array<str> strings, Array<TypeObj> types) {
		self.writeOutput("	mov rax, 60\n");
		self.writeOutput("	xor rdi, rdi\n");
		self.writeOutput("	syscall\n\n");

		self.writeOutput("section .bss\n");

		self.writeOutput("	heapstart: resq 1\n");
		self.writeOutput("	heapend: resq 1\n");
		self.writeOutput("	lastblock: resq 1\n");

		self.writeOutput("	basestack: resq ");
		self.writeInt(CALLSTACKSIZE);
		self.writeOutput("\n");

		self.writeOutput("	datarsp: resq 1\n");
		self.writeOutput("	datastack: resq ");
		self.writeInt(DATASTACKSIZE);
		self.writeOutput("\n");

		self.writeOutput("section .data\n");

		var i = 0;
		while (i < types.size) {
			//types.get(i).writeLiteralType(self);
			i = i + 1;
		}

		self.writeOutput("	type_Object: dq 0, 8, 8, type_ObjectList, 0\n");
		self.writeOutput("	type_ObjectList: dq 0, 8, 8, 0, type_Object\n");
		self.writeOutput("	type_T: dq 0, 8, 8, type_TList, 0\n");
		self.writeOutput("	type_TList: dq 0, 8, 8, 0, type_T\n");

		self.writeOutput("\n\n");

		i = 0;
		while (i < strings.size) {
			//strings.get(i).writeLiteralString(self);
			i = i + 1;
		}
	}
}

func createRegister(str name) -> Register {
	var reg = new Register();

	reg.name = name;
	reg.used = false;

	return reg;
}

func initRegisters() -> Array<Register> {
	var registers = createArray<Register>();
	registers.push(createRegister("r8"));
	registers.push(createRegister("r9"));
	registers.push(createRegister("r10"));
	registers.push(createRegister("r11"));
	registers.push(createRegister("rax"));
	registers.push(createRegister("rcx"));
	registers.push(createRegister("rdx"));

	return registers;
}

func createCompiler(int target) -> Compiler {
	var compiler = new Compiler();
	compiler.registers = initRegisters();
	compiler.target = target;
	return compiler;
}
