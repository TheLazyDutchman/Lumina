import "../std/collections.lumina"

import "parser.lumina"
import "lexer.lumina"
import "position.lumina"
import "condition.lumina"
import "name.lumina"
import "expression.lumina"
import "operator.lumina"
import "block.lumina"


type Else {
	Region region;

	Name keyword;
	Block block;

	func parse(Else self, Parser parser, Lexer lexer, Name elseKeyword) -> Else {
		self.region = lexer.startRegion();

		self.keyword = elseKeyword;
		self.block = new Block();
		self.block.parse(parser, lexer);

		lexer.endRegion(self.region);
		return self;
	}
}

type ElseIf {
	Region region;

	Name elseKeyword;
	Name ifKeyword;
	Condition condition;
	Block block;

	int id;

	func parse(ElseIf self, Parser parser, Lexer lexer, Name elseKeyword) -> ElseIf {
		self.region = lexer.startRegion();

		self.elseKeyword = elseKeyword;
		self.ifKeyword = lexer.consumeKeyword(KEYWORD_if);

		self.condition = new Condition();
		self.condition.parse(parser, lexer);

		self.block = new Block();
		self.block.parse(parser, lexer);

		lexer.endRegion(self.region);
		return self;
	}
}

type If {
	Region region;
	Name keyword;
	Condition condition;
	Block block;
	Array<ElseIf> elseIfs;
	Else elseObj;

	int id;

	func parse(If self, Parser parser, Lexer lexer) -> If {
		self.region = lexer.startRegion();

		self.keyword = lexer.consumeKeyword(KEYWORD_if);

		self.condition = new Condition();
		self.condition.parse(parser, lexer);

		self.block = new Block();
		self.block.parse(parser, lexer);

		self.elseIfs = createArray<ElseIf>();

		var elseKeyword = lexer.consumeKeyword(KEYWORD_else);
		while (elseKeyword != (Name)0) {
			if (isKeyword(lexer.current.name, KEYWORD_if)) {
				var elseIf = new ElseIf();
				elseIf.parse(parser, lexer, elseKeyword);

				self.elseIfs.push(elseIf);
			} else {
				self.elseObj = new Else();
				self.elseObj.parse(parser, lexer, elseKeyword);
			}

			var elseKeyword = lexer.consumeKeyword(KEYWORD_else);
		}

		lexer.endRegion(self.region);
		return self;
	}
}
