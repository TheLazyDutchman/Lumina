import "../std/collections.lumina"

import "parser.lumina"
import "lexer.lumina"
import "position.lumina"
import "operator.lumina"
import "and.lumina"


type AndPart {
	Operator and;
	Or value;
}

type Expression {
	Region region;

	Or value;
	Array<AndPart> parts;

	func parse(Expression self, Parser parser, Lexer lexer) -> Expression {
		self.region = lexer.startRegion();

		self.value = new Or();
		self.value.parse(parser, lexer);

		while (isOperator(lexer.current.operator, "&&")) {
			var part = new AndPart();
			part.and = lexer.consumeOperator("&&");

			part.value = new Or();
			part.value.parse(parser, lexer);

			self.parts.push(part);
		}

		lexer.endRegion(self.region);

		return self;
	}
}
