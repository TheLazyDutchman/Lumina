import "../std/string.lumina"
import "../std/io.lumina"
import "../std/collections.lumina"

import "parser.lumina"
import "lexer.lumina"
import "identifier.lumina"
import "position.lumina"
import "name.lumina"
import "operation.lumina"
import "expression.lumina"
import "operator.lumina"
import "type.lumina"
import "variable.lumina"
import "definition.lumina"
import "whitespace.lumina"
import "block.lumina"


type Parameter {
	Region region;
	
	Identifier parameterType;
	Name name;
	Operator comma;

	TypeObj typeObj;
	Variable variable;

	func parseParameter(Parameter self, Parser parser, Lexer lexer, Block block, Array<Variable> variables, Array<Definition> definitions) -> Parameter {
		self.region = lexer.startRegion();
		
		self.parameterType = new Identifier();
		self.parameterType.parseIdentifier(parser, lexer, block);

		self.name = lexer.consumeIdentifier();
		if (self.name == (Name)0) {
			parser.error(lexer.here(), " expected parameter name\n");
		}

		self.comma = lexer.consumeOperator(",");

		lexer.endRegion(self.region);

		self.variable = createVariableFromString(self.parameterType.name, block.depth + 1, variables.size, (TypeObj)0);
		variables.push(self.variable);
		definitions.push(createDefinitionFromVariable(self.variable));

		return self;
	}

	func bindParameter(Parameter self, Parser parser) {
		self.parameterType.bindIdentifier(parser);
	}
}

type ReturnType {
	Region region;

	Operator rarrow;
	Identifier returnType;

	TypeObj typeObj;

	func parseReturnType(ReturnType self, Parser parser, Lexer lexer, Block block) -> ReturnType {
		self.region = lexer.startRegion();

		self.rarrow = lexer.consumeOperator("->");

		self.returnType = new Identifier();
		self.returnType.parseIdentifier(parser, lexer, block);

		lexer.endRegion(self.region);

		return self;
	}

	func bindReturnType(ReturnType self, Parser parser) {
		self.returnType.bindIdentifier(parser);
	}
}

type Function {
	Region region;

	Name keyword;

	IdentifierDefinition name;

	Operator lparen;
	Array<Parameter> parameters;
	Operator rparen;

	ReturnType returnType;

	Block block;
	Block outerBlock;

	Array<Function> variants;

	bool isCalled;

	int numGenerics;

	func parseFunction(Function self, Parser parser, SyntaxTree tree, Lexer lexer, Block block) -> Function {
		self.outerBlock = createBlock(block);
		self.region = lexer.startRegion();

		self.keyword = lexer.consumeKeyword(KEYWORD_func);
		
		self.name = new IdentifierDefinition();
		self.name.parseIdentifierDefinition(parser, lexer);

		if (self.name.generics != (GenericDefinitionArray)0) {
			self.numGenerics = self.name.generics.parts.size + 1;
			self.name.generics.addTypes(self.outerBlock.types, self.outerBlock.definitions);
		}

		self.lparen = lexer.consumeOperator("(");
		if (self.lparen == (Operator)0) {
			parser.error(lexer.here(), " expected '(' after function name\n");
		}

		self.block = createBlock(self.outerBlock);
		self.block.depth = self.block.depth + 1;

		self.parameters = createArray<Parameter>();
		while (!isOperator(lexer.current.operator, ")") && !lexer.current.isEOF) {
			var parameter = new Parameter();
			parameter.parseParameter(parser, lexer, self.outerBlock, self.block.variables, self.block.definitions);

			self.parameters.push(parameter);
		}

		self.rparen = lexer.consumeOperator(")");
		if (self.rparen == (Operator)0) {
			parser.error(lexer.here(), " expected ')' after function parameters\n");
		}

		if (isOperator(lexer.current.operator, "->")) {
			self.returnType = new ReturnType();
			self.returnType.parseReturnType(parser, lexer, self.outerBlock);
		}

		self.block.parseBlock(parser, lexer, tree);

		return self;
	}

	func bindFunction(Function self, Parser parser) {
		var definition = self.outerBlock.findDefinitionInBlock(self.name.name);
		if (definition.function != self) {
			parser.error(self.region.start, " a function with this name already exists\n");
			print("[NOTE] the other is defined here: ");
			printPosition(definition.function.region.start);
			print("\n");
		}

		if (definition.variable != (Variable)0) {
			parser.error(self.region.start, " a variable with this name already exists\n");
			print("[NOTE] the other is defined here: ");
			printPosition(definition.variable.region.start);
			print("\n");
		}

		if (definition.typeObj != (TypeObj)0) {
			parser.error(self.region.start, " a type with this name already exists\n");
			print("[NOTE] the other is defined here: ");
			printPosition(definition.typeObj.region.start);
			print("\n");
		}

		var i = 0;
		while (i < self.parameters.size) {
			var parameter = self.parameters.get(i);
			parameter.bindParameter(parser);

			if (findParameter(self.parameters, parameter.name.name) != parameter) {
				parser.error(parameter.region.start, " there already is a parameter with this name\n");
			}

			i = i + 1;
		}
	}
}

type Return {
	Region region;

	Name keyword;
	Expression expression;
	Operator semicolon;

	func parseReturn(Return self, Parser parser, Lexer lexer, Block block) -> Return {
		self.region = lexer.startRegion();

		self.keyword = lexer.consumeKeyword(KEYWORD_return);

		if (!isOperator(lexer.current.operator, ";")) {
			self.expression = new Expression();
			self.expression.parseExpression(parser, lexer, block);
		}

		self.semicolon = lexer.consumeOperator(";");
		if (self.semicolon == (Operator)0) {
			parser.error(lexer.here(), " expected ';' after 'return' statement\n");
		}

		lexer.endRegion(self.region);
		return self;
	}

	func bindReturn(Return self, Parser parser) {
		if (self.expression != (Expression)0) {
			self.expression.bindExpression(parser);
		}
	}
}

func createReturnTypeFromString(TypeObj typeObj) -> ReturnType {
	var returnType = new ReturnType();

	returnType.typeObj = typeObj;

	return returnType;
}

func createFunctionFromString(str value, Array<Parameter> parameters, ReturnType returnType) -> Function {
	var function = new Function();

	function.name = createIdentifierDefinitionFromString(value);
	function.parameters = parameters;
	function.returnType = returnType;

	function.variants = createArray<Function>();

	return function;
}

func findFunction(Array<Function> list, str name) -> Function {
	var i = 0;
	while (i < list.size) {
		if (streq(list.list[i].name.name, name)) {
			return list.list[i];
		}
		i = i + 1;
	}
	return (Function)0;
}

func findParameter(Array<Parameter> list, str name) -> Parameter {
	var i = 0;
	while (i < list.size) {
		if (streq(list.get(i).name.name, name)) {
			return list.get(i);
		}
		i = i + 1;
	}
	return (Parameter)0;
}

func createParameterFromString(TypeObj typeObj, str name) -> Parameter {
	var parameter = new Parameter();

	parameter.name = createNameFromString(name);
	parameter.typeObj = typeObj;

	return parameter;
}
