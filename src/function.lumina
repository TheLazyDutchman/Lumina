import "../std/string.lumina"
import "../std/io.lumina"
import "../std/collections.lumina"

import "parser.lumina"
import "lexer.lumina"
import "identifier.lumina"
import "position.lumina"
import "name.lumina"
import "operation.lumina"
import "expression.lumina"
import "operator.lumina"
import "type.lumina"
import "variable.lumina"
import "whitespace.lumina"
import "block.lumina"


type Parameter {
	Region region;
	
	Identifier parameterType;
	Name name;
	Operator comma;

	TypeObj typeObj;

	func parse(Parameter self, Parser parser, Lexer lexer) -> Parameter {
		self.region = lexer.startRegion();
		
		self.parameterType = new Identifier();
		self.parameterType.parse();

		self.name = lexer.consumeIdentifier();
		if (self.name == (Name)0) {
			parser.error(lexer.here(), " expected parameter name\n");
		}

		self.comma = lexer.consumeOperator(",");

		lexer.endRegion(self.region);
		return self;
	}
}

type ReturnType {
	Region region;

	Operator rarrow;
	Identifier returnType;

	TypeObj typeObj;

	func parse(ReturnType self, Parser parser, Lexer lexer) -> ReturnType {
		self.region = lexer.startRegion();

		self.rarrow = lexer.consumeOperator("->");

		self.returnType = new Identifier();
		self.returnType.parse(parser, lexer);

		lexer.endRegion(self.region);

		return self;
	}
}

type FunctionDefinition {
	Region region;

	Name keyword;

	Identifier name;

	Operator lparen;
	Array<Parameter> parameters;
	Operator rparen;

	ReturnType returnType;

	Block block;

	Array<FunctionDefinition> variants;

	bool isCalled;

	int numGenerics;

	func parse(FunctionDefinition self, Parser parser, Lexer lexer) -> FunctionDefinition {
		self.region = lexer.startRegion();

		self.keyword = lexer.consumeKeyword(KEYWORD_func);
		
		self.name = new Identifier();
		self.name.parse(parser, lexer);

		if (self.name.generics != (GenericArray)0) {
			self.numGenerics = self.name.generics.parts.size + 1;
		}

		self.lparen = lexer.consumeOperator("(");
		if (self.lparen == (Operator)0) {
			parser.error(lexer.here(), " expected '(' after function name\n");
		}

		self.parameters = createArray<Parameter>();
		if (!isOperator(lexer.current.operator, ")")) {
			var parameter = new Parameter();
			parameter.parse(parser, lexer);

			self.parameters.push(parameter);

			while (isOperator(lexer.current.operator, ",")) {
				var parameter = new Parameter();
				parameter.parse(parser, lexer);

				self.parameters.push(parameter);
			}
		}

		self.rparen = lexer.consumeOperator(")");
		if (self.rparen == (Operator)0) {
			parser.error(lexer.here(), " expected ')' after function parameters\n");
		}

		if (isOperator(lexer.current.operator, "->")) {
			self.returnType = new ReturnType();
			self.returnType.parse(parser, lexer);
		}

		self.block = new Block();
		self.block.parse(parser, lexer);

		return self;
	}
}

type Return {
	Region region;

	Name keyword;
	Expression expression;
	Operator semicolon;

	func parse(Return self, Parser parser, Lexer lexer) -> Return {
		self.region = lexer.startRegion();

		self.keyword = lexer.consumeKeyword(KEYWORD_return);
		self.expression = new Expression();
		self.expression.parse(parser, lexer);
		self.semicolon = lexer.consumeOperator(";");
		if (self.semicolon == (Operator)0) {
			parser.error(lexer.here(), " expected ';' after 'return' statement\n");
		}

		lexer.endRegion(self.region);
		return self;
	}
}

func createReturnTypeFromString(TypeObj typeObj) -> ReturnType {
	var returnType = new ReturnType();

	returnType.typeObj = typeObj;

	return returnType;
}

func createFunctionFromString(str value, Array<Parameter> parameters, ReturnType returnType) -> FunctionDefinition {
	var function = new FunctionDefinition();

	function.name = createNameFromString(value);
	function.parameters = parameters;
	function.returnType = returnType;

	function.generics = createArray<Generic>();

	function.variants = createArray<FunctionDefinition>();

	return function;
}

func findFunction(Array<FunctionDefinition> list, str name) -> FunctionDefinition {
	var i = 0;
	while (i < list.size) {
		if (streq(list.list[i].name.name, name)) {
			return list.list[i];
		}
		i = i + 1;
	}
	return (FunctionDefinition)0;
}
