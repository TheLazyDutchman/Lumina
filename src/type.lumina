import "../std/string.lumina"
import "../std/io.lumina"
import "../std/collections.lumina"

import "parser.lumina"
import "lexer.lumina"
import "identifier.lumina"
import "index.lumina"
import "name.lumina" 
import "function.lumina"
import "operator.lumina"
import "operation.lumina"
import "position.lumina"
import "whitespace.lumina"


type Property {
	Region region;

	Identifier propertyType;
	Name name;
	Operator semicolon;

	int offset;

	func parseProperty(Property self, Parser parser, Lexer lexer) -> Property {
		self.region = lexer.startRegion();

		self.propertyType = new Identifier();
		self.propertyType.parseIdentifier(parser, lexer);

		self.name = lexer.consumeIdentifier();
		if (self.name == (Name)0) {
			parser.error(lexer.here(), " expected property name\n");
		}

		self.semicolon = lexer.consumeOperator(";");
		if (self.semicolon == (Operator)0) {
			parser.error(lexer.here(), " expected ';' after property\n");
		}

		lexer.endRegion(self.region);
		return self;
	}
}

type TypeObj {
	Region region;
	Name keyword;
	Identifier name;
	int size;
	int objectSize;

	Operator lbrace;

	Array<Property> properties;
	Array<Function> methods;

	Operator rbrace;

	TypeObj listOf;
	TypeObj listType;

	bool isGeneric;
	

	func parseType(TypeObj self, Parser parser, SyntaxTree tree, Lexer lexer) -> TypeObj {
		self.region = lexer.startRegion();

		self.keyword = lexer.consumeKeyword(KEYWORD_type);

		self.name = new Identifier();
		self.name.parseIdentifier(parser, lexer);

		self.lbrace = lexer.consumeOperator("{");
		if (self.lbrace == (Operator)0) {
			parser.error(lexer.here(), " expected '{' before type properties\n");
		}

		self.properties = createArray<Property>();
		self.methods = createArray<Function>();

		while (!isOperator(lexer.current.operator, "}") && !lexer.current.isEOF) {
			if (isKeyword(lexer.current.name, KEYWORD_func)) {
				var method = new Function();
				method.parseFunction(parser, tree, lexer);
				self.methods.push(method);
			} else {
				var property = new Property();
				property.parseProperty(parser, lexer);
				self.properties.push(property);
			}
		}

		self.rbrace = lexer.consumeOperator("}");
		if (self.rbrace == (Operator)0) {
			parser.error(lexer.here(), " expected '}' after type definition\n");
		}

		lexer.endRegion(self.region);
		return self;
	}
}

func findProperty(Array<Property> list, str name) -> Property {
	var i = 0;
	while (i < list.size) {
		if (streq(list.list[i].name.name, name)) {
			return list.list[i];
		}
		i = i + 1;
	}
	return (Property)0;
}

func createPropertyFromString(str name, TypeObj propertyType, int offset) -> Property {
	var property = new Property();

	property.name = createNameFromString(name);
	property.propertyType = propertyType.name;

	property.offset = offset;

	return property;
}

func createTypeFromString(str name, int size) -> TypeObj {
	var typeObj = new TypeObj();

	typeObj.name = createIdentifierFromString(name);
	typeObj.size = size;
	typeObj.objectSize = size;

	typeObj.properties = createArray<Property>();

//	typeObj.variants = createArray<TypeObj>();
//	typeObj.variants.push(typeObj);

	return typeObj;
}

func createListType(Array<TypeObj> typeArray, str name, TypeObj typeObj) -> TypeObj {
	if (typeObj.listOf != (TypeObj)0) {
		return typeObj.listOf;
	}

	var listType = createTypeFromString(name, 8);
	listType.objectSize = typeObj.size;
	listType.listType = typeObj;
	listType.isGeneric = typeObj.isGeneric;

	typeObj.listOf = listType;

	if (typeArray != (Array<TypeObj>)0) {
		typeArray.push(listType);
	}

	return listType;
}

func findType(Array<TypeObj> list, str name) -> TypeObj {
	var i = 0;
	while (i < list.size) {
		var item = list.get(i);
		if (item.name.name != (str)0 && streq(item.name.name, name)) {
			return list.list[i];
		}
		i = i + 1;
	}
	return (TypeObj)0;
}
//
//func printType(TypeObj typeObj) {
//	if (typeObj == (TypeObj)0) {
//		print("type is null");
//		return;
//	}
//
//	if (typeObj.generics.size != 0) {
//		print(typeObj.name);
//		print("<");
//		var i = 0;
//		while (i < typeObj.generics.size) {
//			if (i != 0) {
//				print(",");
//			}
//			printType(typeObj.generics.list[i].typeObj);
//			i = i + 1;
//		}
//		print(">");
//		return;
//	}
//
//	if (typeObj.listType != (TypeObj)0 && typeObj.name == (str)0) {
//		printType(typeObj.listType);
//		print("[]");
//		return;
//	}
//
//	if (typeObj.name == (str)0) {
//		print("type name is null");
//		return;
//	}
//
//	print(typeObj.name);
//}
//
//func printTypeArray(Array<TypeObj> list) {
//	var i = 0;
//	print("[");
//	while (i < list.size) {
//		if (i != 0) {
//			print(",");
//		}
//		printType(list.list[i]);
//		i = i + 1;
//	}
//	print("]");
//}
