import "parser.lumina"
import "../std/path.lumina"

func usage() {
	print("usage: lumina [-debug] [-r] [-s] [-check] <inputFile>\n");
	print("	-debug: generate a file that can be debugged by gdb\n");
	print("	-r: run the generated executable after compilation finished\n");
	print("	-s: suppress compiler output in stdout\n");
	print("	-check: check input file for errors, but doesn't generate code\n");
}

func createChild(str name, str[] args) -> int {
	var child_pid = fork();
	if (child_pid < 0) {
		print("[ERROR] could not generate child process to call '");
		print(name);
		print("'\n");
		exit(1);
	}

	if (child_pid > 0) {
		print("[CMD]");
		var i = 0;
		while (args[i] != (str)0) {
			print("  ");
			print(args[i]);
			i = i + 1;
		}
		print(" \n");
	} else {
		var returnCode = execvp(name, args);
		print("[ERROR] problem occurred when trying to call ");
		print(name);
		print(": error code: ");
		printi(returnCode);
		print(" \n");
		exit(1);
	}

	return child_pid;
}

func main() {
	var fileName = (str)0;
	var runFile = (bool)0;
	var debug = (bool)0;
	var suppress = (bool)0;
	var check = (bool)0;
	var runArgs = (str[])0;

	var i = 1;

	var currentArg = argv[1];
	while (currentArg != (str)0) {
		if (streq(currentArg, "-r")) {
			runFile = (bool)1;
		} else if (streq(currentArg, "-debug")) {
			debug = (bool)1;
		} else if (streq(currentArg, "-s")) {
			suppress = (bool)1;
		} else if (streq(currentArg, "-check")) {
			check = (bool)1;
		} else {
			fileName = argv[i];
			runArgs = (str[])((int)argv + 8 * i);
			i = argc - 1; //terminate loop
		}
		i = i + 1;
		currentArg = argv[i];
	}

	if (fileName == (str)0) {
		print("[ERROR] expected fileName\n");
		usage();
		return;
	}
	
	var filePath = getPathFromString(fileName);

	fileName = getFullPathString(filePath);

	print("[FILE] opening file '");
	print(fileName);
	print("'\n");

	filePath.extension = "asm";

	var outputName = getFullPathString(filePath);

	var parser = initParser(fileName, outputName, check);

	parse(parser);

	if (parser.hasError) {
		exit(1);
	}

	freeParser(parser);

	if (check) {
		print("[CHECK] successfully checked '");
		print(fileName);
		print("'\n");
		exit(0);
	}

	var nasmDebugArgs = (str[])malloc(8 * 8); // ptr size is 8
	nasmDebugArgs[0] = "nasm";
	nasmDebugArgs[1] = "-f";
	nasmDebugArgs[2] = "elf64";
	nasmDebugArgs[3] = "-F";
	nasmDebugArgs[4] = "dwarf";
	nasmDebugArgs[5] = "-g";
	nasmDebugArgs[6] = outputName;
	nasmDebugArgs[7] = (str)0;

	var nasmArgs = (str[])malloc(8 * 5); // ptr size is 8
	nasmArgs[0] = "nasm";
	nasmArgs[1] = "-f";
	nasmArgs[2] = "elf64";
	nasmArgs[3] = outputName;
	nasmArgs[4] = (str)0;

	var nasm_pid = 0;
	if (debug) {
		nasm_pid = createChild("nasm", nasmDebugArgs);
	} else {
		nasm_pid = createChild("nasm", nasmArgs);
	}

	var nasmStatus = (int[])malloc(8); // pointer to int
	if (wait4(nasm_pid, nasmStatus, 0, (ptr)0) < 0) {
		print("[ERROR] wait4 failed\n");
		exit(1);
	}
	
	if (WIFEXITED(nasmStatus[0])) {
		var code = WIFEXITSTATUS(nasmStatus[0] & 127);  
		if (code > 0) {
			print("[ERROR] in nasm, error code: ");
			printi(code);
			print(" \n");
			exit(code);
		}
	}

	var oString = (str)malloc(2);
	oString[0] = 'o';
	oString[1] = '\0';

	filePath.extension = oString;
	var objectName = getFullPathString(filePath);
	filePath.extension =(str)0;
	var executableName = getFullPathString(filePath);

	free((ptr)oString);


	var linkerArgs = (str[])malloc(8 * 5);
	linkerArgs[0] = "ld";
	linkerArgs[1] = "-o";
	linkerArgs[2] = executableName;
	linkerArgs[3] = objectName;
	linkerArgs[4] = (str)0;

	var linkerStatus = (int[])malloc(8); // pointer to int
	var linker_pid = createChild("ld", linkerArgs);

	if (wait4(linker_pid, linkerStatus, 0, (ptr)0) < 0) {
		print("[ERROR] wait4 failed\n");
		exit(1);
	}

	if (WIFEXITED(linkerStatus[0])) {
		var code = WIFEXITSTATUS(linkerStatus[0] & 127);
		if (code > 0) {
			print("[ERROR] in linker, error code: ");
			printi(code);
			print(" \n");
			exit(code);
		}
	}

	if (runFile) {
		var fileStatus = (int[])malloc(8); // int pointer

		var file_pid = createChild(executableName, runArgs);

		if (wait4(file_pid, fileStatus, 0, (ptr)0) < 0) {
			print("[ERROR] wait4 failed\n");
			exit(1);
		}

		if (WIFEXITED(fileStatus[0])) {
			var code = WIFEXITSTATUS(fileStatus[0] & 127);
			if (code > 0) {
				print("[ERROR] in executable, error code: ");
				printi(code);
				print(" \n");
				exit(code);
			}
		}
	}

	free((ptr)outputName);
	free((ptr)objectName);
	free((ptr)executableName);
}

main();
