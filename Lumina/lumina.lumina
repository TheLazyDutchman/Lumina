import "parser.lumina"
import "../std/path.lumina"

func usage() {
	print("usage: lumina [-debug] [-r] [-s] [-check] <inputFile>\n");
	print("	-debug: generate a file that can be debugged by gdb\n");
	print("	-r: run the generated executable after compilation finished\n");
	print("	-s: suppress compiler output in stdout\n");
	print("	-check: check input file for errors, but doesn't generate code\n");
}

func main() {
	var fileName = (str)0;
	var runFile = (bool)0;
	var debug = (bool)0;
	var suppress = (bool)0;
	var check = (bool)0;

	var i = 1;

	var currentArg = argv[1];
	while (currentArg != (str)0) {
		if (streq(currentArg, "-r")) {
			runFile = (bool)1;
		} else if (streq(currentArg, "-debug")) {
			debug = (bool)1;
		} else if (streq(currentArg, "-s")) {
			suppress = (bool)1;
		} else if (streq(currentArg, "-check")) {
			check = (bool)1;
		} else {
			fileName = argv[i];
		}
		i = i + 1;
		currentArg = argv[i];
	}

	if (fileName == (str)0) {
		print("[ERROR] expected fileName\n");
		usage();
		return;
	}
	
	var filePath = getPathFromString(fileName);

	fileName = getFullPathString(filePath);

	filePath.extension = "asm";

	var outputName = getFullPathString(filePath);

	var parser = initParser(fileName, outputName, check);

	parse(parser);
}

main();
