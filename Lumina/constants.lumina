import "types.lumina"

type Constant {
	str name;
	int value;
	Type constType;
}

type ConstantList {
	int size;
	int maxSize;
	Constant[] constants;
}

func initConstant(str name, int value, Type constType) -> Constant {
	var constant = (Constant)malloc(sizeof(Constant));

	constant.name = name;
	constant.value = value;
	constant.constType = constType;

	return constant;
}

func freeConstant(Constant constant) {
	free((ptr)(constant.name));
	free((ptr)constant);
}

func initConstantList() -> ConstantList {
	var list = (ConstantList)malloc(sizeof(ConstantList));

	list.size = 0;
	list.maxSize = 8;
	list.constants = (Constant[])malloc(8 * 8); // pointer size is 8

	return list;
}

func freeConstantList(ConstantList list) {
	var i = 0;
	while (i < list.size) {
		freeConstant(list.constants[i]);
		i = i + 1;
	}

	free((ptr)(list.constants));
	free((ptr)list);
}

func addConstant(ConstantList list, str name, int value, Type constType) -> Constant {
	var constant = initConstant(name, value, constType);
	list.constants[list.size] = constant;

	list.size = list.size + 1;

	if (list.size == list.maxSize) {
		list.maxSize = list.maxSize * 2;
		list.constants = (Constant[])realloc((ptr)(list.constants), 8 * list.maxSize);
	}

	return constant;
}
