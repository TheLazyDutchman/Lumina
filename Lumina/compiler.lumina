import "luminaStrings.lumina"

var CALLSTACKSIZE = 2048;

type Compiler {
	int output;
	int currentStackSize;
	int functionDepth;
}

func initCompiler(int output) -> Compiler {
	var compiler = (Compiler)malloc(sizeof(Compiler));

	compiler.output = output;
	compiler.currentStackSize = 0;
	compiler.functionDepth = 0;

	return compiler;
}

func printEscapedCharacter(Compiler compiler, str charPtr) -> int {
	var length = 1;
	if (charPtr[0] == '\\') {
		length = 2;
	}

	var chr = unEscapeCharacter(charPtr);

	//split the higher and lower 4 bits of the character
	var lower = (int)chr;

	var higher = 0;
	while (lower >= 16) {
		higher = higher + 1;
		lower = lower - 16;
	}

	if (higher >= 16) {
		return -1;
	}

	var charString = (str)malloc(5);

	charString[0] = '0';
	charString[1] = 'x';

	if (0 <= higher && higher <= 9) {
		charString[2] = '0' + higher;
	} else {
		charString[2] = 'A' + (higher - 10);
	}

	if (0 <= lower && lower <= 9) {
		charString[3] = '0' + lower;
	} else {
		charString[3] = 'A' + (lower - 10);
	}

	charString[4] = '\0';

	fprint(compiler.output, charString);

	free((ptr)charString);

	return length;
}


func writeHeader(Compiler compiler) {
	fprint(compiler.output, "section .text\n");
	fprint(compiler.output, "global _start\n");
	fprint(compiler.output, "_start:\n");
	fprint(compiler.output, "	;; -- initializing call stack --\n");
	fprint(compiler.output, "	lea rax, [callStack + ");
	fprinti(compiler.output, CALLSTACKSIZE);
	fprint(compiler.output, "]\n");
	fprint(compiler.output, "	mov [callrsp], rax\n");
	fprint(compiler.output, "	mov rax, rsp\n");
	fprint(compiler.output, "	add rax, 8\n"); // this is where argc and argv are stored
	fprint(compiler.output, "	push rax\n");
	fprint(compiler.output, "	mov [basestack], rax\n");

	fprint(compiler.output, "	;; -- syscall builtin --\n");
	fprint(compiler.output, "	jmp addr_func_end_0\n");
	fprint(compiler.output, "addr_func_syscall_0:\n");
	fprint(compiler.output, "	pop r9\n");
	fprint(compiler.output, "	pop r8\n");
	fprint(compiler.output, "	pop r10\n");
	fprint(compiler.output, "	pop rdx\n");
	fprint(compiler.output, "	pop rsi\n");
	fprint(compiler.output, "	pop rdi\n");
	fprint(compiler.output, "	pop rax\n");
	fprint(compiler.output, "	syscall\n");

	fprint(compiler.output, "	;; -- return --\n");

	fprint(compiler.output, "	;; -- push return value --\n");
	fprint(compiler.output, "	push rax\n");
	
	fprint(compiler.output, "	;; -- pop return address --\n");
	fprint(compiler.output, "	mov rax, [callrsp]\n");
	fprint(compiler.output, "	add rax, 8\n");
	fprint(compiler.output, "	mov [callrsp], rax\n");
	// jump to address
	fprint(compiler.output, "	mov rax, [callrsp]\n");
	fprint(compiler.output, "	jmp [rax]\n");

	fprint(compiler.output, "addr_func_end_0:\n");
}

func writePop(Compiler compiler, int amount) {
	fprint(compiler.output, "	;; -- pop --\n");
	fprint(compiler.output, "	add rsp, ");
	fprinti(compiler.output, amount * 8);
	fprint(compiler.output, "\n\n");

	compiler.currentStackSize = compiler.currentStackSize - amount;
}

func writeAddress(Compiler compiler, str address, int id) {
	fprint(compiler.output, address);
	fprinti(compiler.output, id);
	fprint(compiler.output, ":\n");
}

func writeBeginFunction(Compiler compiler, str name, int id, int numParams) {
	fprint(compiler.output, "	;; -- function --\n");
	fprint(compiler.output, "	jmp addr_func_end_");
	fprinti(compiler.output, id);
	fprint(compiler.output, "\n");

	fprint(compiler.output, "addr_func_");
	fprint(compiler.output, name);
	fprint(compiler.output, "_");
	fprinti(compiler.output, id);
	fprint(compiler.output, ":\n");
	fprint(compiler.output, "	mov rax, rsp\n");
	fprint(compiler.output, "	add rax, 8 * "); 
	fprinti(compiler.output, numParams);
	fprint(compiler.output, "\n\n");

	fprint(compiler.output, "	;; -- save current stack frame --\n");
	fprint(compiler.output, "	mov rbx, [basestack + 8 * ");
	fprinti(compiler.output, compiler.functionDepth + 1);
	fprint(compiler.output, "]\n");
	fprint(compiler.output, "	push rbx\n\n");

	fprint(compiler.output, "	;; -- create new stack frame --\n");
	fprint(compiler.output, "	mov [basestack + 8 * ");
	fprinti(compiler.output, compiler.functionDepth + 1);
	fprint(compiler.output, "], rax\n\n");
}

func writeCall(Compiler compiler, str name, int id, int numParameters, int numCalls) {
	fprint(compiler.output, "	;; -- function call --\n");
	fprint(compiler.output, "	;; -- push current address --\n");
	// get current address
	fprint(compiler.output, "	mov rax, ret_func_");
	fprint(compiler.output, name);
	fprint(compiler.output, "_");
	fprinti(compiler.output, id);
	fprint(compiler.output, "_");
	
	fprinti(compiler.output, numCalls);
	fprint(compiler.output, "\n");

	fprint(compiler.output, "	mov rbx, [callrsp]\n");
	fprint(compiler.output, "	mov [rbx], rax\n");
	// decrease callrsp
	fprint(compiler.output, "	sub rbx, 8\n");
	fprint(compiler.output, "	mov [callrsp], rbx\n");
	
	fprint(compiler.output, "	;; -- jump --\n");
	fprint(compiler.output, "	jmp addr_func_");
	fprint(compiler.output, name);
	fprint(compiler.output, "_");
	fprinti(compiler.output, id);
	fprint(compiler.output, "\n");

	fprint(compiler.output, "	ret_func_");
	fprint(compiler.output, name);
	fprint(compiler.output, "_");
	fprinti(compiler.output, id);
	fprint(compiler.output, "_");
	fprinti(compiler.output, numCalls);
	fprint(compiler.output, ": ;; first number is function id, second number id call id\n\n");

	compiler.currentStackSize = compiler.currentStackSize - numParameters + 1;
}

func writeReturnEmpty(Compiler compiler, int numVars, int numParameters) {
	fprint(compiler.output, "	;; -- return --\n");

	fprint(compiler.output, "	;; -- pop local variables --\n");
	fprint(compiler.output, "	add rsp, ");
	fprinti(compiler.output, 8 * numVars);
	fprint(compiler.output, "\n");

	fprint(compiler.output, "	;; -- restore stackframe --\n");
	fprint(compiler.output, "	pop rax\n");
	fprint(compiler.output, "	mov [basestack + 8 * ");
	fprinti(compiler.output, compiler.functionDepth);
	fprint(compiler.output, "], rax\n");

	fprint(compiler.output, "	;; -- pop parameters --\n");
	fprint(compiler.output, "	add rsp, ");
	fprinti(compiler.output, 8 * numParameters);
	fprint(compiler.output, "\n");

	fprint(compiler.output, "	;; -- return empty --\n");
	fprint(compiler.output, "	push 0\n");
	
	fprint(compiler.output, "	;; -- jump to return address --\n");
	fprint(compiler.output, "	mov rax, [callrsp]\n");
	fprint(compiler.output, "	add rax, 8\n");
	fprint(compiler.output, "	mov [callrsp], rax\n");
	// jump to address
	fprint(compiler.output, "	mov rax, [callrsp]\n");
	fprint(compiler.output, "	jmp [rax]\n");
}

func writeReturnValue(Compiler compiler, int numVars, int numParameters) {
	fprint(compiler.output, "	;; -- return --\n");

	fprint(compiler.output, "	;; -- store return value --\n");
	fprint(compiler.output, "	pop rax\n");

	fprint(compiler.output, "	;; -- pop local variables --\n");
	fprint(compiler.output, "	add rsp, ");
	fprinti(compiler.output, 8 * numVars);
	fprint(compiler.output, "\n");

	fprint(compiler.output, "	;; -- restore stackframe --\n");
	fprint(compiler.output, "	pop rbx\n");
	fprint(compiler.output, "	mov [basestack + 8 * ");
	fprinti(compiler.output, compiler.functionDepth);
	fprint(compiler.output, "], rbx\n");

	fprint(compiler.output, "	;; -- pop parameters --\n");
	fprint(compiler.output, "	add rsp, ");
	fprinti(compiler.output, 8 * numParameters);
	fprint(compiler.output, "\n");

	fprint(compiler.output, "	;; -- push return value --\n");
	fprint(compiler.output, "	push rax\n");
	
	fprint(compiler.output, "	;; -- pop return address --\n");
	fprint(compiler.output, "	mov rax, [callrsp]\n");
	fprint(compiler.output, "	add rax, 8\n");
	fprint(compiler.output, "	mov [callrsp], rax\n");
	// jump to address
	fprint(compiler.output, "	mov rax, [callrsp]\n");
	fprint(compiler.output, "	jmp [rax]\n");

	compiler.currentStackSize = compiler.currentStackSize - 1;
}

func writeCompare(Compiler compiler) {
	fprint(compiler.output, "	;; -- comparison --\n");
	fprint(compiler.output, "	pop rbx\n");
	fprint(compiler.output, "	pop rax\n");
	fprint(compiler.output, "	cmp rax, rbx\n\n");
	
	compiler.currentStackSize = compiler.currentStackSize - 2;
}

func writeBitAnd(Compiler compiler) {
	fprint(compiler.output, "	;; -- bit and --\n");
	fprint(compiler.output, "	pop rbx\n");
	fprint(compiler.output, "	pop rax\n");
	fprint(compiler.output, "	and rax, rbx\n");
	fprint(compiler.output, "	push rax\n");

	compiler.currentStackSize = compiler.currentStackSize - 1;
}

func writeBitOr(Compiler compiler) {
	fprint(compiler.output, "	;; -- bit or --\n");
	fprint(compiler.output, "	pop rbx\n");
	fprint(compiler.output, "	pop rax\n");
	fprint(compiler.output, "	or rax, rbx\n");
	fprint(compiler.output, "	push rax\n");

	compiler.currentStackSize = compiler.currentStackSize - 1;
}

func writeBitNot(Compiler compiler) {
	fprint(compiler.output, "	;; -- bit not --\n");
	fprint(compiler.output, "	pop rax\n");
	fprint(compiler.output, "	not rax\n");
	fprint(compiler.output, "	push rax\n\n");
}

func writeShiftLeft(Compiler compiler) {
	fprint(compiler.output, "	;; -- shift left --\n");
	fprint(compiler.output, "	pop rcx\n");
	fprint(compiler.output, "	pop rax\n");
	fprint(compiler.output, "	shl rax, cl\n");
	fprint(compiler.output, "	push rax\n");
	
	compiler.currentStackSize = compiler.currentStackSize - 1;
}

func writeShiftRight(Compiler compiler) {
	fprint(compiler.output, "	;; -- shift right --\n");
	fprint(compiler.output, "	pop rcx\n");
	fprint(compiler.output, "	pop rax\n");
	fprint(compiler.output, "	shr rax, cl\n");
	fprint(compiler.output, "	push rax\n");

	compiler.currentStackSize = compiler.currentStackSize - 1;
}

func writeLess(Compiler compiler) {
	fprint(compiler.output, "	;; -- less --\n");
	fprint(compiler.output, "	pop rbx\n");
	fprint(compiler.output, "	pop rax\n");
	fprint(compiler.output, "	mov rcx, 0\n");
	fprint(compiler.output, "	mov rdx, 1\n");
	fprint(compiler.output, "	cmp rax, rbx\n");
	fprint(compiler.output, "	cmovl rcx, rdx\n");
	fprint(compiler.output, "	push rcx\n\n");

	compiler.currentStackSize = compiler.currentStackSize - 1;
}

func writeLessEqual(Compiler compiler) {
	fprint(compiler.output, "	;; -- less equal --\n");
	fprint(compiler.output, "	pop rbx\n");
	fprint(compiler.output, "	pop rax\n");
	fprint(compiler.output, "	mov rcx, 0\n");
	fprint(compiler.output, "	mov rdx, 1\n");
	fprint(compiler.output, "	cmp rax, rbx\n");
	fprint(compiler.output, "	cmovle rcx, rdx\n");
	fprint(compiler.output, "	push rcx\n\n");

	compiler.currentStackSize = compiler.currentStackSize - 1;
}

func writeGreater(Compiler compiler) {
	fprint(compiler.output, "	;; -- greater --\n");
	fprint(compiler.output, "	pop rbx\n");
	fprint(compiler.output, "	pop rax\n");
	fprint(compiler.output, "	mov rcx, 0\n");
	fprint(compiler.output, "	mov rdx, 1\n");
	fprint(compiler.output, "	cmp rax, rbx\n");
	fprint(compiler.output, "	cmovg rcx, rdx\n");
	fprint(compiler.output, "	push rcx\n\n");

	compiler.currentStackSize = compiler.currentStackSize - 1;
}

func writeGreaterEqual(Compiler compiler) {
	fprint(compiler.output, "	;; -- greater equal --\n");
	fprint(compiler.output, "	pop rbx\n");
	fprint(compiler.output, "	pop rax\n");
	fprint(compiler.output, "	mov rcx, 0\n");
	fprint(compiler.output, "	mov rdx, 1\n");
	fprint(compiler.output, "	cmp rax, rbx\n");
	fprint(compiler.output, "	cmovge rcx, rdx\n");
	fprint(compiler.output, "	push rcx\n\n");

	compiler.currentStackSize = compiler.currentStackSize - 1;
}

func writeEqual(Compiler compiler) {
	fprint(compiler.output, "	;; -- equal --\n");
	fprint(compiler.output, "	pop rbx\n");
	fprint(compiler.output, "	pop rax\n");
	fprint(compiler.output, "	mov rcx, 0\n");
	fprint(compiler.output, "	mov rdx, 1\n");
	fprint(compiler.output, "	cmp rax, rbx\n");
	fprint(compiler.output, "	cmove rcx, rdx\n");
	fprint(compiler.output, "	push rcx\n\n");

	compiler.currentStackSize = compiler.currentStackSize - 1;
}

func writeNotEqual(Compiler compiler) {
	fprint(compiler.output, "	;; -- not equal --\n");
	fprint(compiler.output, "	pop rbx\n");
	fprint(compiler.output, "	pop rax\n");
	fprint(compiler.output, "	mov rcx, 0\n");
	fprint(compiler.output, "	mov rdx, 1\n");
	fprint(compiler.output, "	cmp rax, rbx\n");
	fprint(compiler.output, "	cmovne rcx, rdx\n");
	fprint(compiler.output, "	push rcx\n\n");

	compiler.currentStackSize = compiler.currentStackSize - 1;
}

func writeCondition(Compiler compiler) {
	fprint(compiler.output, "	;; -- condition --\n");
	fprint(compiler.output, "	pop rax\n");
	fprint(compiler.output, "	cmp rax, 1\n\n");
	
	compiler.currentStackSize = compiler.currentStackSize - 1;
}

func writeJump(Compiler compiler, str address, int id) {
	fprint(compiler.output, "	;; -- jump --\n");
	fprint(compiler.output, "	jmp "); 
	fprint(compiler.output, address);
	fprinti(compiler.output, id);
	fprint(compiler.output, "\n\n");
}

func writeJumpEqual(Compiler compiler, str address, int id) {
	fprint(compiler.output, "	;; -- jump --\n");
	fprint(compiler.output, "	je ");
	fprint(compiler.output, address);
	fprinti(compiler.output, id);
	fprint(compiler.output, "\n\n");
}

func writeJumpNotEqual(Compiler compiler, str address, int id) {
	fprint(compiler.output, "	;; -- jump if not equal --\n");
	fprint(compiler.output, "	jne ");
	fprint(compiler.output, address);
	fprinti(compiler.output, id);
	fprint(compiler.output, "\n\n");
}

func writeNumber(Compiler compiler, str value) {
	fprint(compiler.output, "	;; -- number --\n");
	fprint(compiler.output, "	mov rax, ");
	fprint(compiler.output, value);
	fprint(compiler.output, "\n");
	fprint(compiler.output, "	push rax\n\n");

	compiler.currentStackSize = compiler.currentStackSize + 1;
}

func writeCharacter(Compiler compiler, str value) {
	fprint(compiler.output, "	;; -- character --\n");
	fprint(compiler.output, "	mov rax, ");
	printEscapedCharacter(compiler, value);
	fprint(compiler.output, "\n");
	fprint(compiler.output, "	push rax\n\n");

	compiler.currentStackSize = compiler.currentStackSize + 1;
}

func writeString(Compiler compiler, int id) {
	fprint(compiler.output, "	;; -- string --\n");
	fprint(compiler.output, "	mov rax, string_");
	fprinti(compiler.output, id);
	fprint(compiler.output, "\n");
	fprint(compiler.output, "	push rax\n\n");

	compiler.currentStackSize = compiler.currentStackSize + 1;
}

func writeReadIndex(Compiler compiler, int size) {
	fprint(compiler.output, "	;; -- read at index --\n");
	fprint(compiler.output, "	pop rax ;; index\n");
	fprint(compiler.output, "	mov rbx, ");
	fprinti(compiler.output, size);
	fprint(compiler.output, "\n");
	fprint(compiler.output, "	mul rbx\n");
	fprint(compiler.output, "	pop rbx ;; pointer\n");
	fprint(compiler.output, "	add rbx, rax\n");
	fprint(compiler.output, "	mov rbx, [rbx]\n");
	fprint(compiler.output, "	;; create bit mask\n");
	if (size < 8) {
		fprint(compiler.output, "	mov rcx, 1\n");
		fprint(compiler.output, "	shl rcx, ");
		fprinti(compiler.output, 8 * size);
		fprint(compiler.output, ";; size\n");
	} else {
		fprint(compiler.output, "	mov rcx, 0\n");
	}
	fprint(compiler.output, "	sub rcx, 1\n");
	fprint(compiler.output, "	and rbx, rcx\n");
	fprint(compiler.output, "	push rbx\n\n");

	compiler.currentStackSize = compiler.currentStackSize - 1;
}

func writeWriteIndex(Compiler compiler, int size) {
	fprint(compiler.output, "	;; -- write at index --\n");
	fprint(compiler.output, "	pop rcx ;; value\n");
	fprint(compiler.output, "	pop rax ;; index\n");
	fprint(compiler.output, "	mov rbx, ");
	fprinti(compiler.output, size);
	fprint(compiler.output, "\n");
	fprint(compiler.output, "	mul rbx\n");
	fprint(compiler.output, "	pop rbx ;; pointer\n");
	fprint(compiler.output, "	add rbx, rax\n");
	fprint(compiler.output, "	mov r8, [rbx]\n");
	fprint(compiler.output, "	;; create bit mask\n");
	if (size < 8) {
		fprint(compiler.output, "	mov r9, 1\n");
		fprint(compiler.output, "	shl r9, ");
		fprinti(compiler.output, 8 * size);
		fprint(compiler.output, ";; size\n");
	} else {
		fprint(compiler.output, "	mov r9, 0\n");
	}
	fprint(compiler.output, "	sub r9, 1\n");
	fprint(compiler.output, "	and rcx, r9\n");
	fprint(compiler.output, "	not r9\n");
	fprint(compiler.output, "	and r8, r9\n");
	fprint(compiler.output, "	add r8, rcx\n");
	fprint(compiler.output, "	mov [rbx], r8\n");
	fprint(compiler.output, "	push rcx\n\n");

	compiler.currentStackSize = compiler.currentStackSize - 2;
}

func writeReadProperty(Compiler compiler, int offset, int size) {
	fprint(compiler.output, "	;; -- read property --\n");
	fprint(compiler.output, "	pop rax ;; pointer\n");
	fprint(compiler.output, "	add rax, ");
	fprinti(compiler.output, offset);
	fprint(compiler.output, "\n");
	fprint(compiler.output, "	mov rax, [rax]\n");
	fprint(compiler.output, "	;; create bit mask\n");
	if (size < 8) {
		fprint(compiler.output, "	mov rbx, 1\n");
		fprint(compiler.output, "	shl rbx, ");
		fprinti(compiler.output, 8 * size);
		fprint(compiler.output, ";; size\n");
	} else {
		fprint(compiler.output, "	mov rbx, 0\n");
	}
	fprint(compiler.output, "	sub rbx, 1\n");
	fprint(compiler.output, "	and rax, rbx\n");
	fprint(compiler.output, "	push rax\n\n");
}

func writeWriteProperty(Compiler compiler, int offset, int size) {
	fprint(compiler.output, "	;; -- write property --\n");
	fprint(compiler.output, "	pop rax ;; value\n");
	fprint(compiler.output, "	pop rbx ;; pointer\n");
	fprint(compiler.output, "	add rbx, ");
	fprinti(compiler.output, offset);
	fprint(compiler.output, "\n");
	fprint(compiler.output, "	mov rcx, [rbx]\n");
	fprint(compiler.output, "	;; create bit mask\n");
	if (size < 8) {
		fprint(compiler.output, "	mov r9, 1\n");
		fprint(compiler.output, "	shl r9, ");
		fprinti(compiler.output, 8 * size);
		fprint(compiler.output, ";; size\n");
	} else {
		fprint(compiler.output, "	mov r9, 0\n");
	}
	fprint(compiler.output, "	sub r9, 1\n");
	fprint(compiler.output, "	and rax, r9\n");
	fprint(compiler.output, "	not r9\n");
	fprint(compiler.output, "	and rcx, r9\n");
	fprint(compiler.output, "	add rcx, rax\n");
	fprint(compiler.output, "	mov [rbx], rcx\n");
	fprint(compiler.output, "	push rax\n\n");

	compiler.currentStackSize = compiler.currentStackSize - 1;
}

func writeIdentifier(Compiler compiler, int offset, int currentDepth) {
	fprint(compiler.output, "	;; -- identifier --\n");
	fprint(compiler.output, "	mov rax, [basestack + 8 * ");
	fprinti(compiler.output, currentDepth);
	fprint(compiler.output, "]\n");
	fprint(compiler.output, "	mov rbx, ");
	fprinti(compiler.output, 8 * offset);
	fprint(compiler.output, "\n");
	fprint(compiler.output, "	sub rax, rbx\n");
	fprint(compiler.output, "	mov rax, [rax]\n");
	fprint(compiler.output, "	push rax\n\n");

	compiler.currentStackSize = compiler.currentStackSize + 1;
}

func writeAssignment(Compiler compiler, int offset, int currentDepth) {
	fprint(compiler.output, "	;; -- assignment --\n");
	fprint(compiler.output, "	mov rax, [basestack + 8 * ");
	fprinti(compiler.output, currentDepth);
	fprint(compiler.output, "]\n");
	fprint(compiler.output, "	mov rbx, ");
	fprinti(compiler.output, 8 * offset);
	fprint(compiler.output, "\n");
	fprint(compiler.output, "	sub rax, rbx\n");
	fprint(compiler.output, "	mov rbx, [rsp]\n");
	fprint(compiler.output, "	mov [rax], rbx\n\n");
}

func writeAdd(Compiler compiler) {
	fprint(compiler.output, "	;; -- add --\n");
	fprint(compiler.output, "	pop rbx\n");
	fprint(compiler.output, "	pop rax\n");
	fprint(compiler.output, "	add rax, rbx\n");
	fprint(compiler.output, "	push rax\n\n");

	compiler.currentStackSize = compiler.currentStackSize - 1;
}

func writeSubtract(Compiler compiler) {
	fprint(compiler.output, "	;; -- subtract --\n");
	fprint(compiler.output, "	pop rbx\n");
	fprint(compiler.output, "	pop rax\n");
	fprint(compiler.output, "	sub rax, rbx\n");
	fprint(compiler.output, "	push rax\n\n");

	compiler.currentStackSize = compiler.currentStackSize - 1;
}

func writeNegative(Compiler compiler) {
	fprint(compiler.output, "	;; -- negative --\n");
	fprint(compiler.output, "	pop rax\n");
	fprint(compiler.output, "	neg rax\n");
	fprint(compiler.output, "	push rax\n\n");
}

func writeMult(Compiler compiler) {
	fprint(compiler.output, "	;; -- mult --\n");
	fprint(compiler.output, "	pop rbx\n");
	fprint(compiler.output, "	pop rax\n");
	fprint(compiler.output, "	mul rbx\n");
	fprint(compiler.output, "	push rax\n\n");

	compiler.currentStackSize = compiler.currentStackSize - 1;
}

func writeFooter(Compiler compiler, StringList strings) {
	fprint(compiler.output, "	mov rax, 60\n");
	fprint(compiler.output, "	xor rdi, rdi\n");
	fprint(compiler.output, "	syscall\n\n");

	fprint(compiler.output, "section .bss\n");
	fprint(compiler.output, "	basestack: resq ");
	fprinti(compiler.output, CALLSTACKSIZE);
	fprint(compiler.output, "\n");
	fprint(compiler.output, "	callrsp: resq 1\n");
	fprint(compiler.output, "	callStack: resq ");
	fprinti(compiler.output, CALLSTACKSIZE);
	fprint(compiler.output, "\n");

	fprint(compiler.output, "section .data\n");
	var i = 0;
	while (i < strings.size) {
		fprint(compiler.output, "	string_");
		fprinti(compiler.output, i);
		fprint(compiler.output, ": db ");
		var j = 0;
		var string = strings.strings[i];
		var len = strlen(string);
		while (j < len) {
			var chr = (str)((int)string + j);

			var length = printEscapedCharacter(compiler, chr);
			
			j = j + length; 

			fprint(compiler.output, ", ");

			if (length == -1) {
				j = len;
			}
		}

		fprint(compiler.output, "0x00\n");

		i = i + 1;
	}
}
