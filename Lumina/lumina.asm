section .text
global _start
_start:
	;; -- initializing call stack --
	lea rax, [callStack + 2048]
	mov [callrsp], rax
	mov rax, rsp
	add rax, 8
	push rax
	mov [basestack], rax
	;; -- syscall builtin --
	jmp addr_func_end_0
addr_func_0:
	pop r9
	pop r8
	pop r10
	pop rdx
	pop rsi
	pop rdi
	pop rax
	syscall
	;; -- return --
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_0:
	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- number --
	mov rax, 2 
	push rax

	;; -- number --
	mov rax, 3 
	push rax

	;; -- number --
	mov rax, 4 
	push rax

	;; -- number --
	mov rax, 5 
	push rax

	;; -- number --
	mov rax, 6 
	push rax

	;; -- number --
	mov rax, 7 
	push rax

	;; -- number --
	mov rax, 8 
	push rax

	;; -- number --
	mov rax, 9 
	push rax

	;; -- number --
	mov rax, 10 
	push rax

	;; -- number --
	mov rax, 11 
	push rax

	;; -- number --
	mov rax, 12 
	push rax

	;; -- number --
	mov rax, 13 
	push rax

	;; -- number --
	mov rax, 14 
	push rax

	;; -- number --
	mov rax, 16 
	push rax

	;; -- number --
	mov rax, 17 
	push rax

	;; -- number --
	mov rax, 18 
	push rax

	;; -- number --
	mov rax, 19 
	push rax

	;; -- number --
	mov rax, 20 
	push rax

	;; -- number --
	mov rax, 21 
	push rax

	;; -- number --
	mov rax, 22 
	push rax

	;; -- number --
	mov rax, 23 
	push rax

	;; -- number --
	mov rax, 24 
	push rax

	;; -- number --
	mov rax, 25 
	push rax

	;; -- number --
	mov rax, 26 
	push rax

	;; -- number --
	mov rax, 27 
	push rax

	;; -- number --
	mov rax, 28 
	push rax

	;; -- number --
	mov rax, 29 
	push rax

	;; -- number --
	mov rax, 30 
	push rax

	;; -- number --
	mov rax, 31 
	push rax

	;; -- number --
	mov rax, 32 
	push rax

	;; -- number --
	mov rax, 33 
	push rax

	;; -- number --
	mov rax, 34 
	push rax

	;; -- number --
	mov rax, 35 
	push rax

	;; -- number --
	mov rax, 36 
	push rax

	;; -- number --
	mov rax, 37 
	push rax

	;; -- number --
	mov rax, 38 
	push rax

	;; -- number --
	mov rax, 39 
	push rax

	;; -- number --
	mov rax, 40 
	push rax

	;; -- number --
	mov rax, 41 
	push rax

	;; -- number --
	mov rax, 42 
	push rax

	;; -- number --
	mov rax, 43 
	push rax

	;; -- number --
	mov rax, 44 
	push rax

	;; -- number --
	mov rax, 45 
	push rax

	;; -- number --
	mov rax, 46 
	push rax

	;; -- number --
	mov rax, 47 
	push rax

	;; -- number --
	mov rax, 48 
	push rax

	;; -- number --
	mov rax, 49 
	push rax

	;; -- number --
	mov rax, 50 
	push rax

	;; -- number --
	mov rax, 51 
	push rax

	;; -- number --
	mov rax, 52 
	push rax

	;; -- number --
	mov rax, 53 
	push rax

	;; -- number --
	mov rax, 54 
	push rax

	;; -- number --
	mov rax, 55 
	push rax

	;; -- number --
	mov rax, 56 
	push rax

	;; -- number --
	mov rax, 57 
	push rax

	;; -- number --
	mov rax, 58 
	push rax

	;; -- number --
	mov rax, 59 
	push rax

	;; -- number --
	mov rax, 60 
	push rax

	;; -- number --
	mov rax, 61 
	push rax

	;; -- number --
	mov rax, 62 
	push rax

	;; -- number --
	mov rax, 63 
	push rax

	;; -- number --
	mov rax, 64 
	push rax

	;; -- number --
	mov rax, 65 
	push rax

	;; -- number --
	mov rax, 66 
	push rax

	;; -- number --
	mov rax, 67 
	push rax

	;; -- number --
	mov rax, 68 
	push rax

	;; -- number --
	mov rax, 69 
	push rax

	;; -- number --
	mov rax, 70 
	push rax

	;; -- number --
	mov rax, 71 
	push rax

	;; -- number --
	mov rax, 72 
	push rax

	;; -- number --
	mov rax, 73 
	push rax

	;; -- number --
	mov rax, 74 
	push rax

	;; -- number --
	mov rax, 75 
	push rax

	;; -- number --
	mov rax, 76 
	push rax

	;; -- number --
	mov rax, 77 
	push rax

	;; -- number --
	mov rax, 78 
	push rax

	;; -- number --
	mov rax, 79 
	push rax

	;; -- number --
	mov rax, 80 
	push rax

	;; -- number --
	mov rax, 81 
	push rax

	;; -- number --
	mov rax, 82 
	push rax

	;; -- number --
	mov rax, 83 
	push rax

	;; -- number --
	mov rax, 84 
	push rax

	;; -- number --
	mov rax, 85 
	push rax

	;; -- number --
	mov rax, 86 
	push rax

	;; -- number --
	mov rax, 87 
	push rax

	;; -- number --
	mov rax, 88 
	push rax

	;; -- number --
	mov rax, 89 
	push rax

	;; -- number --
	mov rax, 90 
	push rax

	;; -- number --
	mov rax, 91 
	push rax

	;; -- number --
	mov rax, 92 
	push rax

	;; -- number --
	mov rax, 93 
	push rax

	;; -- number --
	mov rax, 94 
	push rax

	;; -- number --
	mov rax, 95 
	push rax

	;; -- number --
	mov rax, 96 
	push rax

	;; -- number --
	mov rax, 97 
	push rax

	;; -- number --
	mov rax, 98 
	push rax

	;; -- number --
	mov rax, 99 
	push rax

	;; -- number --
	mov rax, 100 
	push rax

	;; -- number --
	mov rax, 101 
	push rax

	;; -- number --
	mov rax, 102 
	push rax

	;; -- number --
	mov rax, 103 
	push rax

	;; -- number --
	mov rax, 104 
	push rax

	;; -- number --
	mov rax, 105 
	push rax

	;; -- number --
	mov rax, 106 
	push rax

	;; -- number --
	mov rax, 107 
	push rax

	;; -- number --
	mov rax, 108 
	push rax

	;; -- number --
	mov rax, 109 
	push rax

	;; -- number --
	mov rax, 110 
	push rax

	;; -- number --
	mov rax, 111 
	push rax

	;; -- number --
	mov rax, 112 
	push rax

	;; -- number --
	mov rax, 113 
	push rax

	;; -- number --
	mov rax, 114 
	push rax

	;; -- number --
	mov rax, 115 
	push rax

	;; -- number --
	mov rax, 116 
	push rax

	;; -- number --
	mov rax, 117 
	push rax

	;; -- number --
	mov rax, 118 
	push rax

	;; -- number --
	mov rax, 119 
	push rax

	;; -- number --
	mov rax, 120 
	push rax

	;; -- number --
	mov rax, 121 
	push rax

	;; -- number --
	mov rax, 122 
	push rax

	;; -- number --
	mov rax, 123 
	push rax

	;; -- number --
	mov rax, 124 
	push rax

	;; -- number --
	mov rax, 125 
	push rax

	;; -- number --
	mov rax, 126 
	push rax

	;; -- number --
	mov rax, 127 
	push rax

	;; -- number --
	mov rax, 128 
	push rax

	;; -- number --
	mov rax, 129 
	push rax

	;; -- number --
	mov rax, 130 
	push rax

	;; -- number --
	mov rax, 257 
	push rax

	;; -- function --
	jmp addr_func_end_1 
addr_func_1:
	mov rax, rsp
	add rax, 8 * 3

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_0__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_0 
	ret_func_0__0: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 24 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_1:
	;; -- function --
	jmp addr_func_end_2 
addr_func_2:
	mov rax, rsp
	add rax, 8 * 3

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_0__1 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_0 
	ret_func_0__1: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 24 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_2:
	;; -- function --
	jmp addr_func_end_3 
addr_func_3:
	mov rax, rsp
	add rax, 8 * 3

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_0__2 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_0 
	ret_func_0__2: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 24 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_3:
	;; -- function --
	jmp addr_func_end_4 
addr_func_4:
	mov rax, rsp
	add rax, 8 * 1

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 48 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_0__3 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_0 
	ret_func_0__3: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 8 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_4:
	;; -- function --
	jmp addr_func_end_5 
addr_func_5:
	mov rax, rsp
	add rax, 8 * 2

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 56 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_0__4 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_0 
	ret_func_0__4: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 16 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_5:
	;; -- function --
	jmp addr_func_end_6 
addr_func_6:
	mov rax, rsp
	add rax, 8 * 2

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 64 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_0__5 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_0 
	ret_func_0__5: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 16 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_6:
	;; -- function --
	jmp addr_func_end_7 
addr_func_7:
	mov rax, rsp
	add rax, 8 * 2

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 72 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_0__6 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_0 
	ret_func_0__6: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 16 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_7:
	;; -- function --
	jmp addr_func_end_8 
addr_func_8:
	mov rax, rsp
	add rax, 8 * 3

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 80 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_0__7 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_0 
	ret_func_0__7: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 24 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_8:
	;; -- function --
	jmp addr_func_end_9 
addr_func_9:
	mov rax, rsp
	add rax, 8 * 3

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 88 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_0__8 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_0 
	ret_func_0__8: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 24 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_9:
	;; -- function --
	jmp addr_func_end_10 
addr_func_10:
	mov rax, rsp
	add rax, 8 * 6

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 96 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 48 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_0__9 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_0 
	ret_func_0__9: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 48 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_10:
	;; -- function --
	jmp addr_func_end_11 
addr_func_11:
	mov rax, rsp
	add rax, 8 * 3

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 104 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_0__10 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_0 
	ret_func_0__10: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 24 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_11:
	;; -- function --
	jmp addr_func_end_12 
addr_func_12:
	mov rax, rsp
	add rax, 8 * 2

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 112 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_0__11 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_0 
	ret_func_0__11: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 16 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_12:
	;; -- function --
	jmp addr_func_end_13 
addr_func_13:
	mov rax, rsp
	add rax, 8 * 1

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 120 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_0__12 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_0 
	ret_func_0__12: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 8 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_13:
	;; -- function --
	jmp addr_func_end_14 
addr_func_14:
	mov rax, rsp
	add rax, 8 * 4

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 128 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_0__13 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_0 
	ret_func_0__13: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 32 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_14:
	;; -- function --
	jmp addr_func_end_15 
addr_func_15:
	mov rax, rsp
	add rax, 8 * 4

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 136 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_0__14 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_0 
	ret_func_0__14: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 32 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_15:
	;; -- function --
	jmp addr_func_end_16 
addr_func_16:
	mov rax, rsp
	add rax, 8 * 3

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 144 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_0__15 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_0 
	ret_func_0__15: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 24 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_16:
	;; -- function --
	jmp addr_func_end_17 
addr_func_17:
	mov rax, rsp
	add rax, 8 * 4

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 152 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_0__16 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_0 
	ret_func_0__16: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 32 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_17:
	;; -- function --
	jmp addr_func_end_18 
addr_func_18:
	mov rax, rsp
	add rax, 8 * 4

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 160 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_0__17 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_0 
	ret_func_0__17: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 32 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_18:
	;; -- function --
	jmp addr_func_end_19 
addr_func_19:
	mov rax, rsp
	add rax, 8 * 3

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 168 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_0__18 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_0 
	ret_func_0__18: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 24 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_19:
	;; -- function --
	jmp addr_func_end_20 
addr_func_20:
	mov rax, rsp
	add rax, 8 * 3

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 176 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_0__19 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_0 
	ret_func_0__19: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 24 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_20:
	;; -- function --
	jmp addr_func_end_21 
addr_func_21:
	mov rax, rsp
	add rax, 8 * 2

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 184 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_0__20 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_0 
	ret_func_0__20: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 16 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_21:
	;; -- function --
	jmp addr_func_end_22 
addr_func_22:
	mov rax, rsp
	add rax, 8 * 1

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 192 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_0__21 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_0 
	ret_func_0__21: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 8 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_22:
	;; -- function --
	jmp addr_func_end_23 
addr_func_23:
	mov rax, rsp
	add rax, 8 * 5

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 200 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_0__22 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_0 
	ret_func_0__22: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 40 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_23:
	;; -- function --
	jmp addr_func_end_24 
addr_func_24:
	mov rax, rsp
	add rax, 8 * 0

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 208 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_0__23 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_0 
	ret_func_0__23: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 0 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_24:
	;; -- function --
	jmp addr_func_end_25 
addr_func_25:
	mov rax, rsp
	add rax, 8 * 5

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 216 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_0__24 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_0 
	ret_func_0__24: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 40 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_25:
	;; -- function --
	jmp addr_func_end_26 
addr_func_26:
	mov rax, rsp
	add rax, 8 * 3

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 224 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_0__25 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_0 
	ret_func_0__25: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 24 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_26:
	;; -- function --
	jmp addr_func_end_27 
addr_func_27:
	mov rax, rsp
	add rax, 8 * 3

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 232 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_0__26 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_0 
	ret_func_0__26: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 24 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_27:
	;; -- function --
	jmp addr_func_end_28 
addr_func_28:
	mov rax, rsp
	add rax, 8 * 3

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 240 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_0__27 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_0 
	ret_func_0__27: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 24 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_28:
	;; -- function --
	jmp addr_func_end_29 
addr_func_29:
	mov rax, rsp
	add rax, 8 * 0

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 248 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_0__28 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_0 
	ret_func_0__28: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 0 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_29:
	;; -- function --
	jmp addr_func_end_30 
addr_func_30:
	mov rax, rsp
	add rax, 8 * 0

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 256 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_0__29 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_0 
	ret_func_0__29: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 0 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_30:
	;; -- function --
	jmp addr_func_end_31 
addr_func_31:
	mov rax, rsp
	add rax, 8 * 0

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 264 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_0__30 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_0 
	ret_func_0__30: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 0 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_31:
	;; -- function --
	jmp addr_func_end_32 
addr_func_32:
	mov rax, rsp
	add rax, 8 * 0

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 272 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_0__31 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_0 
	ret_func_0__31: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 0 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_32:
	;; -- function --
	jmp addr_func_end_33 
addr_func_33:
	mov rax, rsp
	add rax, 8 * 0

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 280 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_0__32 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_0 
	ret_func_0__32: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 0 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_33:
	;; -- function --
	jmp addr_func_end_34 
addr_func_34:
	mov rax, rsp
	add rax, 8 * 0

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 288 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_0__33 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_0 
	ret_func_0__33: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 0 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_34:
	;; -- function --
	jmp addr_func_end_35 
addr_func_35:
	mov rax, rsp
	add rax, 8 * 0

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 296 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_0__34 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_0 
	ret_func_0__34: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 0 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_35:
	;; -- function --
	jmp addr_func_end_36 
addr_func_36:
	mov rax, rsp
	add rax, 8 * 0

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 304 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_0__35 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_0 
	ret_func_0__35: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 0 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_36:
	;; -- function --
	jmp addr_func_end_37 
addr_func_37:
	mov rax, rsp
	add rax, 8 * 0

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 312 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_0__36 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_0 
	ret_func_0__36: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 0 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_37:
	;; -- function --
	jmp addr_func_end_38 
addr_func_38:
	mov rax, rsp
	add rax, 8 * 0

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 320 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_0__37 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_0 
	ret_func_0__37: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 0 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_38:
	;; -- function --
	jmp addr_func_end_39 
addr_func_39:
	mov rax, rsp
	add rax, 8 * 0

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 328 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_0__38 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_0 
	ret_func_0__38: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 0 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_39:
	;; -- function --
	jmp addr_func_end_40 
addr_func_40:
	mov rax, rsp
	add rax, 8 * 0

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 336 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_0__39 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_0 
	ret_func_0__39: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 0 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_40:
	;; -- function --
	jmp addr_func_end_41 
addr_func_41:
	mov rax, rsp
	add rax, 8 * 0

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 344 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_0__40 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_0 
	ret_func_0__40: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 0 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_41:
	;; -- function --
	jmp addr_func_end_42 
addr_func_42:
	mov rax, rsp
	add rax, 8 * 0

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 352 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_0__41 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_0 
	ret_func_0__41: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 0 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_42:
	;; -- function --
	jmp addr_func_end_43 
addr_func_43:
	mov rax, rsp
	add rax, 8 * 0

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 360 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_0__42 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_0 
	ret_func_0__42: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 0 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_43:
	;; -- function --
	jmp addr_func_end_44 
addr_func_44:
	mov rax, rsp
	add rax, 8 * 0

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 368 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_0__43 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_0 
	ret_func_0__43: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 0 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_44:
	;; -- function --
	jmp addr_func_end_45 
addr_func_45:
	mov rax, rsp
	add rax, 8 * 0

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 376 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_0__44 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_0 
	ret_func_0__44: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 0 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_45:
	;; -- function --
	jmp addr_func_end_46 
addr_func_46:
	mov rax, rsp
	add rax, 8 * 0

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 384 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_0__45 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_0 
	ret_func_0__45: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 0 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_46:
	;; -- function --
	jmp addr_func_end_47 
addr_func_47:
	mov rax, rsp
	add rax, 8 * 0

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 392 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_0__46 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_0 
	ret_func_0__46: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 0 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_47:
	;; -- function --
	jmp addr_func_end_48 
addr_func_48:
	mov rax, rsp
	add rax, 8 * 0

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 400 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_0__47 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_0 
	ret_func_0__47: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 0 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_48:
	;; -- function --
	jmp addr_func_end_49 
addr_func_49:
	mov rax, rsp
	add rax, 8 * 0

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 408 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_0__48 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_0 
	ret_func_0__48: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 0 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_49:
	;; -- function --
	jmp addr_func_end_50 
addr_func_50:
	mov rax, rsp
	add rax, 8 * 0

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 416 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_0__49 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_0 
	ret_func_0__49: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 0 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_50:
	;; -- function --
	jmp addr_func_end_51 
addr_func_51:
	mov rax, rsp
	add rax, 8 * 0

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 424 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_0__50 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_0 
	ret_func_0__50: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 0 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_51:
	;; -- function --
	jmp addr_func_end_52 
addr_func_52:
	mov rax, rsp
	add rax, 8 * 0

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 432 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_0__51 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_0 
	ret_func_0__51: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 0 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_52:
	;; -- function --
	jmp addr_func_end_53 
addr_func_53:
	mov rax, rsp
	add rax, 8 * 0

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 440 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_0__52 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_0 
	ret_func_0__52: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 0 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_53:
	;; -- function --
	jmp addr_func_end_54 
addr_func_54:
	mov rax, rsp
	add rax, 8 * 0

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 448 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_0__53 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_0 
	ret_func_0__53: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 0 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_54:
	;; -- function --
	jmp addr_func_end_55 
addr_func_55:
	mov rax, rsp
	add rax, 8 * 0

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 456 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_0__54 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_0 
	ret_func_0__54: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 0 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_55:
	;; -- function --
	jmp addr_func_end_56 
addr_func_56:
	mov rax, rsp
	add rax, 8 * 0

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 464 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_0__55 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_0 
	ret_func_0__55: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 0 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_56:
	;; -- function --
	jmp addr_func_end_57 
addr_func_57:
	mov rax, rsp
	add rax, 8 * 0

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 472 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_0__56 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_0 
	ret_func_0__56: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 0 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_57:
	;; -- function --
	jmp addr_func_end_58 
addr_func_58:
	mov rax, rsp
	add rax, 8 * 0

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 480 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_0__57 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_0 
	ret_func_0__57: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 0 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_58:
	;; -- function --
	jmp addr_func_end_59 
addr_func_59:
	mov rax, rsp
	add rax, 8 * 3

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 488 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_0__58 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_0 
	ret_func_0__58: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 24 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_59:
	;; -- function --
	jmp addr_func_end_60 
addr_func_60:
	mov rax, rsp
	add rax, 8 * 1

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 496 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_0__59 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_0 
	ret_func_0__59: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 8 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_60:
	;; -- function --
	jmp addr_func_end_61 
addr_func_61:
	mov rax, rsp
	add rax, 8 * 4

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 504 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_0__60 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_0 
	ret_func_0__60: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 32 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_61:
	;; -- function --
	jmp addr_func_end_62 
addr_func_62:
	mov rax, rsp
	add rax, 8 * 0

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 512 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_0__61 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_0 
	ret_func_0__61: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 0 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_62:
	;; -- function --
	jmp addr_func_end_63 
addr_func_63:
	mov rax, rsp
	add rax, 8 * 0

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 520 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_0__62 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_0 
	ret_func_0__62: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 0 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_63:
	;; -- function --
	jmp addr_func_end_64 
addr_func_64:
	mov rax, rsp
	add rax, 8 * 0

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 528 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_0__63 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_0 
	ret_func_0__63: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 0 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_64:
	;; -- function --
	jmp addr_func_end_65 
addr_func_65:
	mov rax, rsp
	add rax, 8 * 0

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 536 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_0__64 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_0 
	ret_func_0__64: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 0 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_65:
	;; -- function --
	jmp addr_func_end_66 
addr_func_66:
	mov rax, rsp
	add rax, 8 * 0

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 544 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_0__65 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_0 
	ret_func_0__65: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 0 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_66:
	;; -- function --
	jmp addr_func_end_67 
addr_func_67:
	mov rax, rsp
	add rax, 8 * 0

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 552 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_0__66 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_0 
	ret_func_0__66: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 0 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_67:
	;; -- function --
	jmp addr_func_end_68 
addr_func_68:
	mov rax, rsp
	add rax, 8 * 0

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 560 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_0__67 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_0 
	ret_func_0__67: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 0 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_68:
	;; -- function --
	jmp addr_func_end_69 
addr_func_69:
	mov rax, rsp
	add rax, 8 * 0

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 568 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_0__68 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_0 
	ret_func_0__68: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 0 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_69:
	;; -- function --
	jmp addr_func_end_70 
addr_func_70:
	mov rax, rsp
	add rax, 8 * 0

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 576 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_0__69 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_0 
	ret_func_0__69: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 0 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_70:
	;; -- function --
	jmp addr_func_end_71 
addr_func_71:
	mov rax, rsp
	add rax, 8 * 0

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 584 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_0__70 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_0 
	ret_func_0__70: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 0 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_71:
	;; -- function --
	jmp addr_func_end_72 
addr_func_72:
	mov rax, rsp
	add rax, 8 * 0

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 592 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_0__71 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_0 
	ret_func_0__71: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 0 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_72:
	;; -- function --
	jmp addr_func_end_73 
addr_func_73:
	mov rax, rsp
	add rax, 8 * 0

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 600 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_0__72 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_0 
	ret_func_0__72: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 0 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_73:
	;; -- function --
	jmp addr_func_end_74 
addr_func_74:
	mov rax, rsp
	add rax, 8 * 0

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 608 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_0__73 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_0 
	ret_func_0__73: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 0 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_74:
	;; -- function --
	jmp addr_func_end_75 
addr_func_75:
	mov rax, rsp
	add rax, 8 * 0

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 616 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_0__74 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_0 
	ret_func_0__74: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 0 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_75:
	;; -- function --
	jmp addr_func_end_76 
addr_func_76:
	mov rax, rsp
	add rax, 8 * 0

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 624 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_0__75 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_0 
	ret_func_0__75: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 0 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_76:
	;; -- function --
	jmp addr_func_end_77 
addr_func_77:
	mov rax, rsp
	add rax, 8 * 0

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 632 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_0__76 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_0 
	ret_func_0__76: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 0 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_77:
	;; -- function --
	jmp addr_func_end_78 
addr_func_78:
	mov rax, rsp
	add rax, 8 * 0

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 640 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_0__77 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_0 
	ret_func_0__77: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 0 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_78:
	;; -- function --
	jmp addr_func_end_79 
addr_func_79:
	mov rax, rsp
	add rax, 8 * 2

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 648 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_0__78 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_0 
	ret_func_0__78: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 16 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_79:
	;; -- function --
	jmp addr_func_end_80 
addr_func_80:
	mov rax, rsp
	add rax, 8 * 0

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 656 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_0__79 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_0 
	ret_func_0__79: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 0 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_80:
	;; -- function --
	jmp addr_func_end_81 
addr_func_81:
	mov rax, rsp
	add rax, 8 * 0

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 664 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_0__80 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_0 
	ret_func_0__80: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 0 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_81:
	;; -- function --
	jmp addr_func_end_82 
addr_func_82:
	mov rax, rsp
	add rax, 8 * 0

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 672 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_0__81 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_0 
	ret_func_0__81: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 0 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_82:
	;; -- function --
	jmp addr_func_end_83 
addr_func_83:
	mov rax, rsp
	add rax, 8 * 0

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 680 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_0__82 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_0 
	ret_func_0__82: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 0 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_83:
	;; -- function --
	jmp addr_func_end_84 
addr_func_84:
	mov rax, rsp
	add rax, 8 * 0

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 688 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_0__83 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_0 
	ret_func_0__83: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 0 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_84:
	;; -- function --
	jmp addr_func_end_85 
addr_func_85:
	mov rax, rsp
	add rax, 8 * 0

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 696 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_0__84 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_0 
	ret_func_0__84: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 0 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_85:
	;; -- function --
	jmp addr_func_end_86 
addr_func_86:
	mov rax, rsp
	add rax, 8 * 0

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 704 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_0__85 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_0 
	ret_func_0__85: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 0 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_86:
	;; -- function --
	jmp addr_func_end_87 
addr_func_87:
	mov rax, rsp
	add rax, 8 * 0

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 712 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_0__86 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_0 
	ret_func_0__86: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 0 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_87:
	;; -- function --
	jmp addr_func_end_88 
addr_func_88:
	mov rax, rsp
	add rax, 8 * 0

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 720 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_0__87 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_0 
	ret_func_0__87: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 0 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_88:
	;; -- function --
	jmp addr_func_end_89 
addr_func_89:
	mov rax, rsp
	add rax, 8 * 0

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 728 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_0__88 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_0 
	ret_func_0__88: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 0 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_89:
	;; -- function --
	jmp addr_func_end_90 
addr_func_90:
	mov rax, rsp
	add rax, 8 * 0

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 736 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_0__89 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_0 
	ret_func_0__89: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 0 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_90:
	;; -- function --
	jmp addr_func_end_91 
addr_func_91:
	mov rax, rsp
	add rax, 8 * 0

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 744 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_0__90 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_0 
	ret_func_0__90: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 0 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_91:
	;; -- function --
	jmp addr_func_end_92 
addr_func_92:
	mov rax, rsp
	add rax, 8 * 0

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 752 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_0__91 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_0 
	ret_func_0__91: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 0 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_92:
	;; -- function --
	jmp addr_func_end_93 
addr_func_93:
	mov rax, rsp
	add rax, 8 * 0

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 760 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_0__92 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_0 
	ret_func_0__92: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 0 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_93:
	;; -- function --
	jmp addr_func_end_94 
addr_func_94:
	mov rax, rsp
	add rax, 8 * 0

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 768 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_0__93 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_0 
	ret_func_0__93: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 0 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_94:
	;; -- function --
	jmp addr_func_end_95 
addr_func_95:
	mov rax, rsp
	add rax, 8 * 0

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 776 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_0__94 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_0 
	ret_func_0__94: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 0 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_95:
	;; -- function --
	jmp addr_func_end_96 
addr_func_96:
	mov rax, rsp
	add rax, 8 * 0

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 784 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_0__95 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_0 
	ret_func_0__95: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 0 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_96:
	;; -- function --
	jmp addr_func_end_97 
addr_func_97:
	mov rax, rsp
	add rax, 8 * 0

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 792 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_0__96 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_0 
	ret_func_0__96: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 0 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_97:
	;; -- function --
	jmp addr_func_end_98 
addr_func_98:
	mov rax, rsp
	add rax, 8 * 0

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 800 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_0__97 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_0 
	ret_func_0__97: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 0 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_98:
	;; -- function --
	jmp addr_func_end_99 
addr_func_99:
	mov rax, rsp
	add rax, 8 * 0

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 808 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_0__98 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_0 
	ret_func_0__98: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 0 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_99:
	;; -- function --
	jmp addr_func_end_100 
addr_func_100:
	mov rax, rsp
	add rax, 8 * 0

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 816 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_0__99 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_0 
	ret_func_0__99: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 0 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_100:
	;; -- function --
	jmp addr_func_end_101 
addr_func_101:
	mov rax, rsp
	add rax, 8 * 0

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 824 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_0__100 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_0 
	ret_func_0__100: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 0 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_101:
	;; -- function --
	jmp addr_func_end_102 
addr_func_102:
	mov rax, rsp
	add rax, 8 * 0

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 832 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_0__101 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_0 
	ret_func_0__101: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 0 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_102:
	;; -- function --
	jmp addr_func_end_103 
addr_func_103:
	mov rax, rsp
	add rax, 8 * 0

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 840 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_0__102 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_0 
	ret_func_0__102: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 0 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_103:
	;; -- function --
	jmp addr_func_end_104 
addr_func_104:
	mov rax, rsp
	add rax, 8 * 0

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 848 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_0__103 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_0 
	ret_func_0__103: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 0 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_104:
	;; -- function --
	jmp addr_func_end_105 
addr_func_105:
	mov rax, rsp
	add rax, 8 * 0

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 856 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_0__104 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_0 
	ret_func_0__104: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 0 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_105:
	;; -- function --
	jmp addr_func_end_106 
addr_func_106:
	mov rax, rsp
	add rax, 8 * 0

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 864 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_0__105 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_0 
	ret_func_0__105: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 0 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_106:
	;; -- function --
	jmp addr_func_end_107 
addr_func_107:
	mov rax, rsp
	add rax, 8 * 0

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 872 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_0__106 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_0 
	ret_func_0__106: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 0 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_107:
	;; -- function --
	jmp addr_func_end_108 
addr_func_108:
	mov rax, rsp
	add rax, 8 * 0

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 880 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_0__107 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_0 
	ret_func_0__107: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 0 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_108:
	;; -- function --
	jmp addr_func_end_109 
addr_func_109:
	mov rax, rsp
	add rax, 8 * 0

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 888 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_0__108 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_0 
	ret_func_0__108: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 0 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_109:
	;; -- function --
	jmp addr_func_end_110 
addr_func_110:
	mov rax, rsp
	add rax, 8 * 0

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 896 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_0__109 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_0 
	ret_func_0__109: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 0 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_110:
	;; -- function --
	jmp addr_func_end_111 
addr_func_111:
	mov rax, rsp
	add rax, 8 * 0

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 904 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_0__110 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_0 
	ret_func_0__110: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 0 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_111:
	;; -- function --
	jmp addr_func_end_112 
addr_func_112:
	mov rax, rsp
	add rax, 8 * 0

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 912 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_0__111 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_0 
	ret_func_0__111: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 0 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_112:
	;; -- function --
	jmp addr_func_end_113 
addr_func_113:
	mov rax, rsp
	add rax, 8 * 0

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 920 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_0__112 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_0 
	ret_func_0__112: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 0 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_113:
	;; -- function --
	jmp addr_func_end_114 
addr_func_114:
	mov rax, rsp
	add rax, 8 * 0

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 928 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_0__113 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_0 
	ret_func_0__113: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 0 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_114:
	;; -- function --
	jmp addr_func_end_115 
addr_func_115:
	mov rax, rsp
	add rax, 8 * 0

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 936 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_0__114 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_0 
	ret_func_0__114: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 0 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_115:
	;; -- function --
	jmp addr_func_end_116 
addr_func_116:
	mov rax, rsp
	add rax, 8 * 0

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 944 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_0__115 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_0 
	ret_func_0__115: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 0 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_116:
	;; -- function --
	jmp addr_func_end_117 
addr_func_117:
	mov rax, rsp
	add rax, 8 * 0

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 952 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_0__116 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_0 
	ret_func_0__116: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 0 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_117:
	;; -- function --
	jmp addr_func_end_118 
addr_func_118:
	mov rax, rsp
	add rax, 8 * 0

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 960 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_0__117 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_0 
	ret_func_0__117: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 0 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_118:
	;; -- function --
	jmp addr_func_end_119 
addr_func_119:
	mov rax, rsp
	add rax, 8 * 0

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 968 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_0__118 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_0 
	ret_func_0__118: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 0 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_119:
	;; -- function --
	jmp addr_func_end_120 
addr_func_120:
	mov rax, rsp
	add rax, 8 * 0

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 976 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_0__119 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_0 
	ret_func_0__119: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 0 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_120:
	;; -- function --
	jmp addr_func_end_121 
addr_func_121:
	mov rax, rsp
	add rax, 8 * 0

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 984 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_0__120 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_0 
	ret_func_0__120: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 0 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_121:
	;; -- function --
	jmp addr_func_end_122 
addr_func_122:
	mov rax, rsp
	add rax, 8 * 0

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 992 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_0__121 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_0 
	ret_func_0__121: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 0 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_122:
	;; -- function --
	jmp addr_func_end_123 
addr_func_123:
	mov rax, rsp
	add rax, 8 * 0

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1000 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_0__122 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_0 
	ret_func_0__122: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 0 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_123:
	;; -- function --
	jmp addr_func_end_124 
addr_func_124:
	mov rax, rsp
	add rax, 8 * 0

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1008 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_0__123 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_0 
	ret_func_0__123: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 0 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_124:
	;; -- function --
	jmp addr_func_end_125 
addr_func_125:
	mov rax, rsp
	add rax, 8 * 0

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1016 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_0__124 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_0 
	ret_func_0__124: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 0 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_125:
	;; -- function --
	jmp addr_func_end_126 
addr_func_126:
	mov rax, rsp
	add rax, 8 * 0

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1024 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_0__125 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_0 
	ret_func_0__125: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 0 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_126:
	;; -- function --
	jmp addr_func_end_127 
addr_func_127:
	mov rax, rsp
	add rax, 8 * 0

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1032 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_0__126 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_0 
	ret_func_0__126: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 0 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_127:
	;; -- function --
	jmp addr_func_end_128 
addr_func_128:
	mov rax, rsp
	add rax, 8 * 0

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1040 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_0__127 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_0 
	ret_func_0__127: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 0 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_128:
	;; -- function --
	jmp addr_func_end_129 
addr_func_129:
	mov rax, rsp
	add rax, 8 * 0

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1048 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_0__128 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_0 
	ret_func_0__128: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 0 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_129:
	;; -- function --
	jmp addr_func_end_130 
addr_func_130:
	mov rax, rsp
	add rax, 8 * 2

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1056 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_0__129 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_0 
	ret_func_0__129: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 16 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_130:
	;; -- function --
	jmp addr_func_end_131 
addr_func_131:
	mov rax, rsp
	add rax, 8 * 4

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1064 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_0__130 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_0 
	ret_func_0__130: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 32 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_131:
	;; -- number --
	mov rax, 4096 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_13__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_13 
	ret_func_13__0: ;; first number is function id, second number id call id

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1080 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1080 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1072 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- add --
	pop rbx
	pop rax
	add rax, rbx
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_13__1 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_13 
	ret_func_13__1: ;; first number is function id, second number id call id

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1080 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1072 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 25 
	push rax

	;; -- subtract --
	pop rbx
	pop rax
	sub rax, rbx
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 0 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1080 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 8 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 1
	shl r9, 8 ;; size
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1080 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 9 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1080 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 17 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- function --
	jmp addr_func_end_132 
addr_func_132:
	mov rax, rsp
	add rax, 8 * 1

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1072 
	sub rax, rbx
	mov rax, [rax]
	push rax

addr_while_condition_0:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- greater --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	pushf
	pop rbx
	pushf
	pop rcx
	shr rax, 7
	and rax, 1
	shr rbx, 11
	and rbx, 1
	shr rcx, 6
	and rcx, 1
	xor rax, rbx
	or rax, rcx
	mov rbx, 1
	sub rbx, rax
	push rbx
	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_while_end_0

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1072 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- add --
	pop rbx
	pop rax
	add rax, rbx
	push rax

	;; -- assignment --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

	;; -- jump --
	jmp addr_while_condition_0

addr_while_end_0:
	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1096 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- add --
	pop rbx
	pop rax
	add rax, rbx
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_13__2 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_13 
	ret_func_13__2: ;; first number is function id, second number id call id

	;; -- assignment --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1096 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 8 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 8 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_132:
	;; -- function --
	jmp addr_func_end_133 
addr_func_133:
	mov rax, rsp
	add rax, 8 * 2

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 25 
	push rax

	;; -- add --
	pop rbx
	pop rax
	add rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- greater --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	pushf
	pop rbx
	pushf
	pop rcx
	shr rax, 7
	and rax, 1
	shr rbx, 11
	and rbx, 1
	xor rax, rbx
	mov rbx, 1
	sub rbx, rax
	push rbx
	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_0

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 16 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
	;; -- pop --
	add rsp, 0

addr_if_0:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- add --
	pop rbx
	pop rax
	add rax, rbx
	push rax

	;; -- number --
	mov rax, 25 
	push rax

	;; -- add --
	pop rbx
	pop rax
	add rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 8 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 1
	shl r9, 8 ;; size
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- subtract --
	pop rbx
	pop rax
	sub rax, rbx
	push rax

	;; -- number --
	mov rax, 25 
	push rax

	;; -- subtract --
	pop rbx
	pop rax
	sub rax, rbx
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 0 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 0 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 9 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 17 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 17 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 17 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- greater --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	pushf
	pop rbx
	pushf
	pop rcx
	shr rax, 7
	and rax, 1
	shr rbx, 11
	and rbx, 1
	shr rcx, 6
	and rcx, 1
	xor rax, rbx
	or rax, rcx
	mov rbx, 1
	sub rbx, rax
	push rbx
	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_1

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 17 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 9 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

addr_if_1:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 17 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1088 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_2

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- assignment --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1088 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

addr_if_2:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 8 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 16 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_133:
	;; -- function --
	jmp addr_func_end_134 
addr_func_134:
	mov rax, rsp
	add rax, 8 * 1

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 25 
	push rax

	;; -- add --
	pop rbx
	pop rax
	add rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 17 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- add --
	pop rbx
	pop rax
	add rax, rbx
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 0 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 17 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1088 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_3

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- assignment --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1088 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

addr_if_3:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 17 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 17 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 17 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 17 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- greater --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	pushf
	pop rbx
	pushf
	pop rcx
	shr rax, 7
	and rax, 1
	shr rbx, 11
	and rbx, 1
	shr rcx, 6
	and rcx, 1
	xor rax, rbx
	or rax, rcx
	mov rbx, 1
	sub rbx, rax
	push rbx
	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_4

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 17 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 9 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

addr_if_4:
	;; -- return --
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rax
 mov [basestack + 8 * 1], rax
	;; -- pop parameters --
	add rsp, 8 
	;; -- return empty --
	push 0
	;; -- jump to return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_134:
	;; -- function --
	jmp addr_func_end_135 
addr_func_135:
	mov rax, rsp
	add rax, 8 * 1

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 25 
	push rax

	;; -- add --
	pop rbx
	pop rax
	add rax, rbx
	push rax

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 8 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_135:
	;; -- function --
	jmp addr_func_end_136 
addr_func_136:
	mov rax, rsp
	add rax, 8 * 1

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- less --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pushf
	pushf
	pop rax
	shr rax, 7
	and rax, 1
	pop rbx
	shr rbx, 11
	and rbx, 1
	pop rcx
	shr rcx, 6
	and rcx, 1
	xor rax, rbx
	or rax, rcx
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_5

	;; -- number --
	mov rax, 0 
	push rax

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 8 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
	;; -- pop --
	add rsp, 0

addr_if_5:
	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1080 
	sub rax, rbx
	mov rax, [rax]
	push rax

addr_while_condition_1:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- not equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	mov rbx, 1
	sub rbx, rax
	push rbx

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_and_0

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1096 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 25 
	push rax

	;; -- subtract --
	pop rbx
	pop rax
	sub rax, rbx
	push rax

	;; -- less --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 7
	and rax, 1
	pushf
	pop rbx
	shr rbx, 11
	and rbx, 1
	xor rax, rbx
	push rax

	;; -- jump --
	jmp addr_end_and_0

addr_and_0:
	;; -- number --
	mov rax, 0  
	push rax

addr_end_and_0:
	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_while_end_1

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 8 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 1
	shl rbx, 8 ;; size
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_6

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- greater --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	pushf
	pop rbx
	pushf
	pop rcx
	shr rax, 7
	and rax, 1
	shr rbx, 11
	and rbx, 1
	xor rax, rbx
	mov rbx, 1
	sub rbx, rax
	push rbx
	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_7

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_133__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_133 
	ret_func_133__0: ;; first number is function id, second number id call id

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 8 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 1
	shl r9, 8 ;; size
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_135__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_135 
	ret_func_135__0: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 16 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 8 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
	;; -- pop --
	add rsp, 8

addr_if_7:
	;; -- pop --
	add rsp, 0

addr_if_6:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 17 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- assignment --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

	;; -- jump --
	jmp addr_while_condition_1

addr_while_end_1:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_132__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_132 
	ret_func_132__0: ;; first number is function id, second number id call id

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1088 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 25 
	push rax

	;; -- add --
	pop rbx
	pop rax
	add rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1088 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- add --
	pop rbx
	pop rax
	add rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 8 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 1
	shl r9, 8 ;; size
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 25 
	push rax

	;; -- subtract --
	pop rbx
	pop rax
	sub rax, rbx
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 0 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1088 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 9 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1088 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 17 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 17 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- assignment --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1088 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 9 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 8 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 1
	shl rbx, 8 ;; size
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 9 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_134__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_134 
	ret_func_134__0: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

addr_if_8:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_136__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_136 
	ret_func_136__0: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 24 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 8 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_136:
	;; -- function --
	jmp addr_func_end_137 
addr_func_137:
	mov rax, rsp
	add rax, 8 * 1

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 25 
	push rax

	;; -- subtract --
	pop rbx
	pop rax
	sub rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 8 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 1
	shl r9, 8 ;; size
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 17 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- greater --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	pushf
	pop rbx
	pushf
	pop rcx
	shr rax, 7
	and rax, 1
	shr rbx, 11
	and rbx, 1
	shr rcx, 6
	and rcx, 1
	xor rax, rbx
	or rax, rcx
	mov rbx, 1
	sub rbx, rax
	push rbx
	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_9

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 17 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 8 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 1
	shl rbx, 8 ;; size
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_10

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_134__1 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_134 
	ret_func_134__1: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

addr_if_10:
	;; -- pop --
	add rsp, 0

addr_if_9:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 9 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- greater --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	pushf
	pop rbx
	pushf
	pop rcx
	shr rax, 7
	and rax, 1
	shr rbx, 11
	and rbx, 1
	shr rcx, 6
	and rcx, 1
	xor rax, rbx
	or rax, rcx
	mov rbx, 1
	sub rbx, rax
	push rbx
	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_11

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 9 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 8 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 1
	shl rbx, 8 ;; size
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_12

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 9 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_134__2 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_134 
	ret_func_134__2: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

addr_if_12:
	;; -- pop --
	add rsp, 0

addr_if_11:
	;; -- return --
	;; -- pop local variables --
	add rsp, 8 
	;; -- restore stackframe -- 
	pop rax
 mov [basestack + 8 * 1], rax
	;; -- pop parameters --
	add rsp, 8 
	;; -- return empty --
	push 0
	;; -- jump to return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_137:
	;; -- function --
	jmp addr_func_end_138 
addr_func_138:
	mov rax, rsp
	add rax, 8 * 2

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 25 
	push rax

	;; -- subtract --
	pop rbx
	pop rax
	sub rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 25 
	push rax

	;; -- subtract --
	pop rbx
	pop rax
	sub rax, rbx
	push rax

	;; -- less --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 7
	and rax, 1
	pushf
	pop rbx
	shr rbx, 11
	and rbx, 1
	xor rax, rbx
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_13

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_133__1 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_133 
	ret_func_133__1: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_135__1 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_135 
	ret_func_135__1: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 16 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 16 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
	;; -- pop --
	add rsp, 0

addr_if_13:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- greater --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	pushf
	pop rbx
	pushf
	pop rcx
	shr rax, 7
	and rax, 1
	shr rbx, 11
	and rbx, 1
	shr rcx, 6
	and rcx, 1
	xor rax, rbx
	or rax, rcx
	mov rbx, 1
	sub rbx, rax
	push rbx
	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_14

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 17 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- greater --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	pushf
	pop rbx
	pushf
	pop rcx
	shr rax, 7
	and rax, 1
	shr rbx, 11
	and rbx, 1
	shr rcx, 6
	and rcx, 1
	xor rax, rbx
	or rax, rcx
	mov rbx, 1
	sub rbx, rax
	push rbx
	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_15

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 17 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 8 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 1
	shl rbx, 8 ;; size
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_16

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_134__3 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_134 
	ret_func_134__3: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_138__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_138 
	ret_func_138__0: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 16 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 16 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
	;; -- pop --
	add rsp, 0

addr_if_16:
	;; -- pop --
	add rsp, 0

addr_if_15:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_136__1 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_136 
	ret_func_136__1: ;; first number is function id, second number id call id

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 48 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

addr_while_condition_2:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 72 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- less --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 7
	and rax, 1
	pushf
	pop rbx
	shr rbx, 11
	and rbx, 1
	xor rax, rbx
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_while_end_2

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 64 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 72 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 56 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 72 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read at index -- 
	pop rax ;; index
	mov rbx, 1 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov rbx, [rbx]
	;; create bit mask
	mov rcx, 1
	shl rcx, 8 ;; size
	sub rcx, 1
	and rbx, rcx
	push rbx

	;; -- write at index -- 
	pop rcx ;; value
	pop rax ;; index
	mov rbx, 1 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov r8, [rbx]
	;; create bit mask
	mov r9, 1
	shl r9, 8;; size
	sub r9, 1
	and rcx, r9
	not r9
	and r8, r9
	add r8, rcx
	mov [rbx], r8
	push rcx

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 72 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- add --
	pop rbx
	pop rax
	add rax, rbx
	push rax

	;; -- assignment --
	mov rax, [basestack + 8 * 1]
	mov rbx, 72 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

	;; -- jump --
	jmp addr_while_condition_2

addr_while_end_2:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_137__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_137 
	ret_func_137__0: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 48 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 48 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 16 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
	;; -- pop --
	add rsp, 32

addr_if_14:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 16 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 16 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_138:
	;; -- function --
	jmp addr_func_end_139 
addr_func_139:
	mov rax, rsp
	add rax, 8 * 1

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- number --
	mov rax, 0 
	push rax

addr_while_condition_3:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read at index -- 
	pop rax ;; index
	mov rbx, 1 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov rbx, [rbx]
	;; create bit mask
	mov rcx, 1
	shl rcx, 8 ;; size
	sub rcx, 1
	and rbx, rcx
	push rbx

	;; -- character --
	mov rax, 0x00 
	push rax

	;; -- greater --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	pushf
	pop rbx
	pushf
	pop rcx
	shr rax, 7
	and rax, 1
	shr rbx, 11
	and rbx, 1
	shr rcx, 6
	and rcx, 1
	xor rax, rbx
	or rax, rcx
	mov rbx, 1
	sub rbx, rax
	push rbx
	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_while_end_3

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- add --
	pop rbx
	pop rax
	add rax, rbx
	push rax

	;; -- assignment --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

	;; -- jump --
	jmp addr_while_condition_3

addr_while_end_3:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 8 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 8 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_139:
	;; -- function --
	jmp addr_func_end_140 
addr_func_140:
	mov rax, rsp
	add rax, 8 * 3

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- number --
	mov rax, 0 
	push rax

addr_while_condition_4:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- less --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 7
	and rax, 1
	pushf
	pop rbx
	shr rbx, 11
	and rbx, 1
	xor rax, rbx
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_while_end_4

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read at index -- 
	pop rax ;; index
	mov rbx, 1 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov rbx, [rbx]
	;; create bit mask
	mov rcx, 1
	shl rcx, 8 ;; size
	sub rcx, 1
	and rbx, rcx
	push rbx

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read at index -- 
	pop rax ;; index
	mov rbx, 1 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov rbx, [rbx]
	;; create bit mask
	mov rcx, 1
	shl rcx, 8 ;; size
	sub rcx, 1
	and rbx, rcx
	push rbx

	;; -- not equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	mov rbx, 1
	sub rbx, rax
	push rbx

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_17

	;; -- number --
	mov rax, 0 
	push rax

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 8 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 24 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
	;; -- pop --
	add rsp, 0

addr_if_17:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- add --
	pop rbx
	pop rax
	add rax, rbx
	push rax

	;; -- assignment --
	mov rax, [basestack + 8 * 1]
	mov rbx, 40 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

	;; -- jump --
	jmp addr_while_condition_4

addr_while_end_4:
	;; -- number --
	mov rax, 1 
	push rax

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 8 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 24 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_140:
	;; -- function --
	jmp addr_func_end_141 
addr_func_141:
	mov rax, rsp
	add rax, 8 * 2

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_139__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_139 
	ret_func_139__0: ;; first number is function id, second number id call id

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_139__1 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_139 
	ret_func_139__1: ;; first number is function id, second number id call id

	;; -- not equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	mov rbx, 1
	sub rbx, rax
	push rbx

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_18

	;; -- number --
	mov rax, 0 
	push rax

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 8 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 16 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
	;; -- pop --
	add rsp, 0

addr_if_18:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_140__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_140 
	ret_func_140__0: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 8 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 16 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_141:
	;; -- function --
	jmp addr_func_end_142 
addr_func_142:
	mov rax, rsp
	add rax, 8 * 2

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

addr_while_condition_5:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read at index -- 
	pop rax ;; index
	mov rbx, 1 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov rbx, [rbx]
	;; create bit mask
	mov rcx, 1
	shl rcx, 8 ;; size
	sub rcx, 1
	and rbx, rcx
	push rbx

	;; -- character --
	mov rax, 0x00 
	push rax

	;; -- not equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	mov rbx, 1
	sub rbx, rax
	push rbx

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_while_end_5

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read at index -- 
	pop rax ;; index
	mov rbx, 1 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov rbx, [rbx]
	;; create bit mask
	mov rcx, 1
	shl rcx, 8 ;; size
	sub rcx, 1
	and rbx, rcx
	push rbx

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_19

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- add --
	pop rbx
	pop rax
	add rax, rbx
	push rax

	;; -- assignment --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

addr_if_19:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- add --
	pop rbx
	pop rax
	add rax, rbx
	push rax

	;; -- assignment --
	mov rax, [basestack + 8 * 1]
	mov rbx, 40 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

	;; -- jump --
	jmp addr_while_condition_5

addr_while_end_5:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 16 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 16 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_142:
	;; -- function --
	jmp addr_func_end_143 
addr_func_143:
	mov rax, rsp
	add rax, 8 * 2

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- number --
	mov rax, 0 
	push rax

addr_while_condition_6:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read at index -- 
	pop rax ;; index
	mov rbx, 1 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov rbx, [rbx]
	;; create bit mask
	mov rcx, 1
	shl rcx, 8 ;; size
	sub rcx, 1
	and rbx, rcx
	push rbx

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- not equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	mov rbx, 1
	sub rbx, rax
	push rbx

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_while_end_6

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read at index -- 
	pop rax ;; index
	mov rbx, 1 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov rbx, [rbx]
	;; create bit mask
	mov rcx, 1
	shl rcx, 8 ;; size
	sub rcx, 1
	and rbx, rcx
	push rbx

	;; -- character --
	mov rax, 0x00 
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_20

	;; -- number --
	mov rax, 1 
	push rax

	;; -- negative --
	pop rax
	neg rax
	push rax

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 8 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 16 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
	;; -- pop --
	add rsp, 0

addr_if_20:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- add --
	pop rbx
	pop rax
	add rax, rbx
	push rax

	;; -- assignment --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

	;; -- jump --
	jmp addr_while_condition_6

addr_while_end_6:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- add --
	pop rbx
	pop rax
	add rax, rbx
	push rax

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 8 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 16 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_143:
	;; -- function --
	jmp addr_func_end_144 
addr_func_144:
	mov rax, rsp
	add rax, 8 * 3

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- number --
	mov rax, 0 
	push rax

addr_while_condition_7:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- less --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 7
	and rax, 1
	pushf
	pop rbx
	shr rbx, 11
	and rbx, 1
	xor rax, rbx
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_while_end_7

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read at index -- 
	pop rax ;; index
	mov rbx, 1 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov rbx, [rbx]
	;; create bit mask
	mov rcx, 1
	shl rcx, 8 ;; size
	sub rcx, 1
	and rbx, rcx
	push rbx

	;; -- write at index -- 
	pop rcx ;; value
	pop rax ;; index
	mov rbx, 1 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov r8, [rbx]
	;; create bit mask
	mov r9, 1
	shl r9, 8;; size
	sub r9, 1
	and rcx, r9
	not r9
	and r8, r9
	add r8, rcx
	mov [rbx], r8
	push rcx

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- add --
	pop rbx
	pop rax
	add rax, rbx
	push rax

	;; -- assignment --
	mov rax, [basestack + 8 * 1]
	mov rbx, 40 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

	;; -- jump --
	jmp addr_while_condition_7

addr_while_end_7:
	;; -- return --
	;; -- pop local variables --
	add rsp, 8 
	;; -- restore stackframe -- 
	pop rax
 mov [basestack + 8 * 1], rax
	;; -- pop parameters --
	add rsp, 24 
	;; -- return empty --
	push 0
	;; -- jump to return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_144:
	;; -- function --
	jmp addr_func_end_145 
addr_func_145:
	mov rax, rsp
	add rax, 8 * 2

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 20 
	push rax

	;; -- add --
	pop rbx
	pop rax
	add rax, rbx
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_136__2 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_136 
	ret_func_136__2: ;; first number is function id, second number id call id

	;; -- number --
	mov rax, 0 
	push rax

addr_while_condition_8:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- less --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 7
	and rax, 1
	pushf
	pop rbx
	shr rbx, 11
	and rbx, 1
	xor rax, rbx
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_while_end_8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read at index -- 
	pop rax ;; index
	mov rbx, 1 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov rbx, [rbx]
	;; create bit mask
	mov rcx, 1
	shl rcx, 8 ;; size
	sub rcx, 1
	and rbx, rcx
	push rbx

	;; -- write at index -- 
	pop rcx ;; value
	pop rax ;; index
	mov rbx, 1 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov r8, [rbx]
	;; create bit mask
	mov r9, 1
	shl r9, 8;; size
	sub r9, 1
	and rcx, r9
	not r9
	and r8, r9
	add r8, rcx
	mov [rbx], r8
	push rcx

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- add --
	pop rbx
	pop rax
	add rax, rbx
	push rax

	;; -- assignment --
	mov rax, [basestack + 8 * 1]
	mov rbx, 40 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

	;; -- jump --
	jmp addr_while_condition_8

addr_while_end_8:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- character --
	mov rax, 0x00 
	push rax

	;; -- write at index -- 
	pop rcx ;; value
	pop rax ;; index
	mov rbx, 1 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov r8, [rbx]
	;; create bit mask
	mov r9, 1
	shl r9, 8;; size
	sub r9, 1
	and rcx, r9
	not r9
	and r8, r9
	add r8, rcx
	mov [rbx], r8
	push rcx

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 16 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 16 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_145:
	;; -- function --
	jmp addr_func_end_146 
addr_func_146:
	mov rax, rsp
	add rax, 8 * 1

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_139__2 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_139 
	ret_func_139__2: ;; first number is function id, second number id call id

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_145__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_145 
	ret_func_145__0: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 8 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 8 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_146:
	;; -- function --
	jmp addr_func_end_147 
addr_func_147:
	mov rax, rsp
	add rax, 8 * 1

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- character --
	mov rax, 0x61 
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- less --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pushf
	pushf
	pop rax
	shr rax, 7
	and rax, 1
	pop rbx
	shr rbx, 11
	and rbx, 1
	pop rcx
	shr rcx, 6
	and rcx, 1
	xor rax, rbx
	or rax, rcx
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_and_1

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- character --
	mov rax, 0x7A 
	push rax

	;; -- less --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pushf
	pushf
	pop rax
	shr rax, 7
	and rax, 1
	pop rbx
	shr rbx, 11
	and rbx, 1
	pop rcx
	shr rcx, 6
	and rcx, 1
	xor rax, rbx
	or rax, rcx
	push rax

	;; -- jump --
	jmp addr_end_and_1

addr_and_1:
	;; -- number --
	mov rax, 0  
	push rax

addr_end_and_1:
	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump --
	je addr_or_0

	;; -- character --
	mov rax, 0x41 
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- less --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pushf
	pushf
	pop rax
	shr rax, 7
	and rax, 1
	pop rbx
	shr rbx, 11
	and rbx, 1
	pop rcx
	shr rcx, 6
	and rcx, 1
	xor rax, rbx
	or rax, rcx
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_and_2

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- character --
	mov rax, 0x5A 
	push rax

	;; -- less --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pushf
	pushf
	pop rax
	shr rax, 7
	and rax, 1
	pop rbx
	shr rbx, 11
	and rbx, 1
	pop rcx
	shr rcx, 6
	and rcx, 1
	xor rax, rbx
	or rax, rcx
	push rax

	;; -- jump --
	jmp addr_end_and_2

addr_and_2:
	;; -- number --
	mov rax, 0  
	push rax

addr_end_and_2:
	;; -- jump --
	jmp addr_end_or_0

addr_or_0:
	;; -- number --
	mov rax, 1  
	push rax

addr_end_or_0:
	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 8 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_147:
	;; -- function --
	jmp addr_func_end_148 
addr_func_148:
	mov rax, rsp
	add rax, 8 * 1

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- character --
	mov rax, 0x30 
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- less --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pushf
	pushf
	pop rax
	shr rax, 7
	and rax, 1
	pop rbx
	shr rbx, 11
	and rbx, 1
	pop rcx
	shr rcx, 6
	and rcx, 1
	xor rax, rbx
	or rax, rcx
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_and_3

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- character --
	mov rax, 0x39 
	push rax

	;; -- less --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pushf
	pushf
	pop rax
	shr rax, 7
	and rax, 1
	pop rbx
	shr rbx, 11
	and rbx, 1
	pop rcx
	shr rcx, 6
	and rcx, 1
	xor rax, rbx
	or rax, rcx
	push rax

	;; -- jump --
	jmp addr_end_and_3

addr_and_3:
	;; -- number --
	mov rax, 0  
	push rax

addr_end_and_3:
	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 8 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_148:
	;; -- function --
	jmp addr_func_end_149 
addr_func_149:
	mov rax, rsp
	add rax, 8 * 1

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_147__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_147 
	ret_func_147__0: ;; first number is function id, second number id call id

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump --
	je addr_or_1

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_148__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_148 
	ret_func_148__0: ;; first number is function id, second number id call id

	;; -- jump --
	jmp addr_end_or_1

addr_or_1:
	;; -- number --
	mov rax, 1  
	push rax

addr_end_or_1:
	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 8 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_149:
	;; -- function --
	jmp addr_func_end_150 
addr_func_150:
	mov rax, rsp
	add rax, 8 * 1

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- character --
	mov rax, 0x20 
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump --
	je addr_or_2

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- character --
	mov rax, 0x09 
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- jump --
	jmp addr_end_or_2

addr_or_2:
	;; -- number --
	mov rax, 1  
	push rax

addr_end_or_2:
	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump --
	je addr_or_3

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- character --
	mov rax, 0x0A 
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- jump --
	jmp addr_end_or_3

addr_or_3:
	;; -- number --
	mov rax, 1  
	push rax

addr_end_or_3:
	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 8 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_150:
	;; -- function --
	jmp addr_func_end_151 
addr_func_151:
	mov rax, rsp
	add rax, 8 * 1

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- number --
	mov rax, 22 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_136__3 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_136 
	ret_func_136__3: ;; first number is function id, second number id call id

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- less --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 7
	and rax, 1
	pushf
	pop rbx
	shr rbx, 11
	and rbx, 1
	xor rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_21

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- negative --
	pop rax
	neg rax
	push rax

	;; -- assignment --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- character --
	mov rax, 0x2D 
	push rax

	;; -- write at index -- 
	pop rcx ;; value
	pop rax ;; index
	mov rbx, 1 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov r8, [rbx]
	;; create bit mask
	mov r9, 1
	shl r9, 8;; size
	sub r9, 1
	and rcx, r9
	not r9
	and r8, r9
	add r8, rcx
	mov [rbx], r8
	push rcx

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

addr_if_21:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 1 
	push rax

addr_while_condition_9:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 48 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 10 
	push rax

	;; -- mult --
	pop rbx
	pop rax
	mul rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- less --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pushf
	pushf
	pop rax
	shr rax, 7
	and rax, 1
	pop rbx
	shr rbx, 11
	and rbx, 1
	pop rcx
	shr rcx, 6
	and rcx, 1
	xor rax, rbx
	or rax, rcx
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_while_end_9

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 48 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 10 
	push rax

	;; -- mult --
	pop rbx
	pop rax
	mul rbx
	push rax

	;; -- assignment --
	mov rax, [basestack + 8 * 1]
	mov rbx, 48 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

	;; -- jump --
	jmp addr_while_condition_9

addr_while_end_9:
addr_while_condition_10:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 48 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- greater --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	pushf
	pop rbx
	pushf
	pop rcx
	shr rax, 7
	and rax, 1
	shr rbx, 11
	and rbx, 1
	shr rcx, 6
	and rcx, 1
	xor rax, rbx
	or rax, rcx
	mov rbx, 1
	sub rbx, rax
	push rbx
	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_while_end_10

	;; -- number --
	mov rax, 1 
	push rax

addr_while_condition_11:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 56 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 10 
	push rax

	;; -- mult --
	pop rbx
	pop rax
	mul rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 48 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- less --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 7
	and rax, 1
	pushf
	pop rbx
	shr rbx, 11
	and rbx, 1
	xor rax, rbx
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_while_end_11

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 56 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 10 
	push rax

	;; -- mult --
	pop rbx
	pop rax
	mul rbx
	push rax

	;; -- assignment --
	mov rax, [basestack + 8 * 1]
	mov rbx, 56 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

	;; -- jump --
	jmp addr_while_condition_11

addr_while_end_11:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 56 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- assignment --
	mov rax, [basestack + 8 * 1]
	mov rbx, 48 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 56 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 10 
	push rax

	;; -- mult --
	pop rbx
	pop rax
	mul rbx
	push rax

	;; -- assignment --
	mov rax, [basestack + 8 * 1]
	mov rbx, 56 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- number --
	mov rax, 0 
	push rax

addr_while_condition_12:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 56 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- less --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pushf
	pushf
	pop rax
	shr rax, 7
	and rax, 1
	pop rbx
	shr rbx, 11
	and rbx, 1
	pop rcx
	shr rcx, 6
	and rcx, 1
	xor rax, rbx
	or rax, rcx
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_while_end_12

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 56 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- subtract --
	pop rbx
	pop rax
	sub rax, rbx
	push rax

	;; -- assignment --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 64 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- add --
	pop rbx
	pop rax
	add rax, rbx
	push rax

	;; -- assignment --
	mov rax, [basestack + 8 * 1]
	mov rbx, 64 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

	;; -- jump --
	jmp addr_while_condition_12

addr_while_end_12:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- character --
	mov rax, 0x30 
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 64 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- add --
	pop rbx
	pop rax
	add rax, rbx
	push rax

	;; -- write at index -- 
	pop rcx ;; value
	pop rax ;; index
	mov rbx, 1 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov r8, [rbx]
	;; create bit mask
	mov r9, 1
	shl r9, 8;; size
	sub r9, 1
	and rcx, r9
	not r9
	and r8, r9
	add r8, rcx
	mov [rbx], r8
	push rcx

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- add --
	pop rbx
	pop rax
	add rax, rbx
	push rax

	;; -- assignment --
	mov rax, [basestack + 8 * 1]
	mov rbx, 40 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 16

	;; -- jump --
	jmp addr_while_condition_10

addr_while_end_10:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- character --
	mov rax, 0x30 
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- add --
	pop rbx
	pop rax
	add rax, rbx
	push rax

	;; -- write at index -- 
	pop rcx ;; value
	pop rax ;; index
	mov rbx, 1 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov r8, [rbx]
	;; create bit mask
	mov r9, 1
	shl r9, 8;; size
	sub r9, 1
	and rcx, r9
	not r9
	and r8, r9
	add r8, rcx
	mov [rbx], r8
	push rcx

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- add --
	pop rbx
	pop rax
	add rax, rbx
	push rax

	;; -- character --
	mov rax, 0x00 
	push rax

	;; -- write at index -- 
	pop rcx ;; value
	pop rax ;; index
	mov rbx, 1 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov r8, [rbx]
	;; create bit mask
	mov r9, 1
	shl r9, 8;; size
	sub r9, 1
	and rcx, r9
	not r9
	and r8, r9
	add r8, rcx
	mov [rbx], r8
	push rcx

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 32 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 8 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_151:
	;; -- function --
	jmp addr_func_end_152 
addr_func_152:
	mov rax, rsp
	add rax, 8 * 2

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

addr_while_condition_13:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- less --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 7
	and rax, 1
	pushf
	pop rbx
	shr rbx, 11
	and rbx, 1
	xor rax, rbx
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_while_end_13

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read at index -- 
	pop rax ;; index
	mov rbx, 1 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov rbx, [rbx]
	;; create bit mask
	mov rcx, 1
	shl rcx, 8 ;; size
	sub rcx, 1
	and rbx, rcx
	push rbx

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_148__1 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_148 
	ret_func_148__1: ;; first number is function id, second number id call id

	;; -- number --
	mov rax, 0 
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_22

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 16 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 16 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
	;; -- pop --
	add rsp, 0

addr_if_22:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 10 
	push rax

	;; -- mult --
	pop rbx
	pop rax
	mul rbx
	push rax

	;; -- assignment --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read at index -- 
	pop rax ;; index
	mov rbx, 1 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov rbx, [rbx]
	;; create bit mask
	mov rcx, 1
	shl rcx, 8 ;; size
	sub rcx, 1
	and rbx, rcx
	push rbx

	;; -- add --
	pop rbx
	pop rax
	add rax, rbx
	push rax

	;; -- character --
	mov rax, 0x30 
	push rax

	;; -- subtract --
	pop rbx
	pop rax
	sub rax, rbx
	push rax

	;; -- assignment --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- add --
	pop rbx
	pop rax
	add rax, rbx
	push rax

	;; -- assignment --
	mov rax, [basestack + 8 * 1]
	mov rbx, 40 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

	;; -- jump --
	jmp addr_while_condition_13

addr_while_end_13:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 16 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 16 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_152:
	;; -- function --
	jmp addr_func_end_153 
addr_func_153:
	mov rax, rsp
	add rax, 8 * 1

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- read at index -- 
	pop rax ;; index
	mov rbx, 1 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov rbx, [rbx]
	;; create bit mask
	mov rcx, 1
	shl rcx, 8 ;; size
	sub rcx, 1
	and rbx, rcx
	push rbx

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- character --
	mov rax, 0x5C 
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_23

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- read at index -- 
	pop rax ;; index
	mov rbx, 1 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov rbx, [rbx]
	;; create bit mask
	mov rcx, 1
	shl rcx, 8 ;; size
	sub rcx, 1
	and rbx, rcx
	push rbx

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- character --
	mov rax, 0x61 
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_24

	;; -- character --
	mov rax, 0x07 
	push rax

	;; -- assignment --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

	;; -- jump --
	jmp addr_else_0

addr_if_24:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- character --
	mov rax, 0x62 
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_25

	;; -- character --
	mov rax, 0x08 
	push rax

	;; -- assignment --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

	;; -- jump --
	jmp addr_else_0

addr_if_25:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- character --
	mov rax, 0x65 
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_26

	;; -- character --
	mov rax, 0x1B 
	push rax

	;; -- assignment --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

	;; -- jump --
	jmp addr_else_0

addr_if_26:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- character --
	mov rax, 0x66 
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_27

	;; -- character --
	mov rax, 0x0C 
	push rax

	;; -- assignment --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

	;; -- jump --
	jmp addr_else_0

addr_if_27:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- character --
	mov rax, 0x6E 
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_28

	;; -- character --
	mov rax, 0x0A 
	push rax

	;; -- assignment --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

	;; -- jump --
	jmp addr_else_0

addr_if_28:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- character --
	mov rax, 0x72 
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_29

	;; -- character --
	mov rax, 0x0D 
	push rax

	;; -- assignment --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

	;; -- jump --
	jmp addr_else_0

addr_if_29:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- character --
	mov rax, 0x74 
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_30

	;; -- character --
	mov rax, 0x09 
	push rax

	;; -- assignment --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

	;; -- jump --
	jmp addr_else_0

addr_if_30:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- character --
	mov rax, 0x76 
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_31

	;; -- character --
	mov rax, 0x0B 
	push rax

	;; -- assignment --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

	;; -- jump --
	jmp addr_else_0

addr_if_31:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- character --
	mov rax, 0x5C 
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_32

	;; -- character --
	mov rax, 0x5C 
	push rax

	;; -- assignment --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

	;; -- jump --
	jmp addr_else_0

addr_if_32:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- character --
	mov rax, 0x27 
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_33

	;; -- character --
	mov rax, 0x27 
	push rax

	;; -- assignment --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

	;; -- jump --
	jmp addr_else_0

addr_if_33:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- character --
	mov rax, 0x22 
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_34

	;; -- character --
	mov rax, 0x22 
	push rax

	;; -- assignment --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

	;; -- jump --
	jmp addr_else_0

addr_if_34:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- character --
	mov rax, 0x3F 
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_35

	;; -- character --
	mov rax, 0x3F 
	push rax

	;; -- assignment --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

	;; -- jump --
	jmp addr_else_0

addr_if_35:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- character --
	mov rax, 0x30 
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_36

	;; -- character --
	mov rax, 0x00 
	push rax

	;; -- assignment --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

	;; -- jump --
	jmp addr_else_0

addr_if_36:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- assignment --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

addr_else_0:
	;; -- pop --
	add rsp, 8

addr_if_23:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 8 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 8 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_153:
	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 8 
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- add --
	pop rbx
	pop rax
	add rax, rbx
	push rax

	;; -- mult --
	pop rbx
	pop rax
	mul rbx
	push rax

	;; -- add --
	pop rbx
	pop rax
	add rax, rbx
	push rax

	;; -- function --
	jmp addr_func_end_154 
addr_func_154:
	mov rax, rsp
	add rax, 8 * 1

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_139__3 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_139 
	ret_func_139__3: ;; first number is function id, second number id call id

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1104 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- read at index -- 
	pop rax ;; index
	mov rbx, 8 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov rbx, [rbx]
	;; create bit mask
	mov rcx, 0
	sub rcx, 1
	and rbx, rcx
	push rbx

addr_while_condition_14:
	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1104 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read at index -- 
	pop rax ;; index
	mov rbx, 8 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov rbx, [rbx]
	;; create bit mask
	mov rcx, 0
	sub rcx, 1
	and rbx, rcx
	push rbx

	;; -- number --
	mov rax, 0 
	push rax

	;; -- not equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	mov rbx, 1
	sub rbx, rax
	push rbx

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_while_end_14

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- character --
	mov rax, 0x3D 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_143__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_143 
	ret_func_143__0: ;; first number is function id, second number id call id

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 48 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- subtract --
	pop rbx
	pop rax
	sub rax, rbx
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_and_4

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 48 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- subtract --
	pop rbx
	pop rax
	sub rax, rbx
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_140__1 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_140 
	ret_func_140__1: ;; first number is function id, second number id call id

	;; -- jump --
	jmp addr_end_and_4

addr_and_4:
	;; -- number --
	mov rax, 0  
	push rax

addr_end_and_4:
	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_37

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 48 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- add --
	pop rbx
	pop rax
	add rax, rbx
	push rax

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 32 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 8 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
	;; -- pop --
	add rsp, 0

addr_if_37:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- add --
	pop rbx
	pop rax
	add rax, rbx
	push rax

	;; -- assignment --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1104 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read at index -- 
	pop rax ;; index
	mov rbx, 8 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov rbx, [rbx]
	;; create bit mask
	mov rcx, 0
	sub rcx, 1
	and rbx, rcx
	push rbx

	;; -- assignment --
	mov rax, [basestack + 8 * 1]
	mov rbx, 40 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 8

	;; -- jump --
	jmp addr_while_condition_14

addr_while_end_14:
	;; -- number --
	mov rax, 0 
	push rax

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 24 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 8 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_154:
	;; -- function --
	jmp addr_func_end_155 
addr_func_155:
	mov rax, rsp
	add rax, 8 * 3

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_0__131 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_0 
	ret_func_0__131: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 8 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 24 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_155:
	;; -- function --
	jmp addr_func_end_156 
addr_func_156:
	mov rax, rsp
	add rax, 8 * 2

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_139__4 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_139 
	ret_func_139__4: ;; first number is function id, second number id call id

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_155__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_155 
	ret_func_155__0: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 8 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 16 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_156:
	;; -- number --
	mov rax, 1 
	push rax

	;; -- function --
	jmp addr_func_end_157 
addr_func_157:
	mov rax, rsp
	add rax, 8 * 2

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1112 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_155__1 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_155 
	ret_func_155__1: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 16 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_157:
	;; -- function --
	jmp addr_func_end_158 
addr_func_158:
	mov rax, rsp
	add rax, 8 * 1

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1112 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__0: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 8 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_158:
	;; -- function --
	jmp addr_func_end_159 
addr_func_159:
	mov rax, rsp
	add rax, 8 * 2

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_151__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_151 
	ret_func_151__0: ;; first number is function id, second number id call id

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__1 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__1: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_137__1 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_137 
	ret_func_137__1: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- return --
	;; -- pop local variables --
	add rsp, 8 
	;; -- restore stackframe -- 
	pop rax
 mov [basestack + 8 * 1], rax
	;; -- pop parameters --
	add rsp, 16 
	;; -- return empty --
	push 0
	;; -- jump to return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_159:
	;; -- function --
	jmp addr_func_end_160 
addr_func_160:
	mov rax, rsp
	add rax, 8 * 1

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1112 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_159__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_159 
	ret_func_159__0: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- return --
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rax
 mov [basestack + 8 * 1], rax
	;; -- pop parameters --
	add rsp, 8 
	;; -- return empty --
	push 0
	;; -- jump to return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_160:
	;; -- function --
	jmp addr_func_end_161 
addr_func_161:
	mov rax, rsp
	add rax, 8 * 2

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- string --
	mov rax, string_0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_154__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_154 
	ret_func_154__0: ;; first number is function id, second number id call id

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- character --
	mov rax, 0x3A 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_142__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_142 
	ret_func_142__0: ;; first number is function id, second number id call id

	;; -- number --
	mov rax, 3 
	push rax

	;; -- add --
	pop rbx
	pop rax
	add rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 8 
	push rax

	;; -- mult --
	pop rbx
	pop rax
	mul rbx
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_136__4 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_136 
	ret_func_136__4: ;; first number is function id, second number id call id

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- character --
	mov rax, 0x3A 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_143__1 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_143 
	ret_func_143__1: ;; first number is function id, second number id call id

	;; -- number --
	mov rax, 1 
	push rax

	;; -- number --
	mov rax, 64 
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 72 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_136__5 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_136 
	ret_func_136__5: ;; first number is function id, second number id call id

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 80 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 72 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_79__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_79 
	ret_func_79__0: ;; first number is function id, second number id call id

addr_while_condition_15:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 88 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- less --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 7
	and rax, 1
	pushf
	pop rbx
	shr rbx, 11
	and rbx, 1
	xor rax, rbx
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_while_end_15

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 88 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 34 
	push rax

	;; -- negative --
	pop rax
	neg rax
	push rax

	;; -- not equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	mov rbx, 1
	sub rbx, rax
	push rbx

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_38

	;; -- string --
	mov rax, string_1 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_158__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_158 
	ret_func_158__0: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 88 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- negative --
	pop rax
	neg rax
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_160__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_160 
	ret_func_160__0: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- string --
	mov rax, string_2 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_158__1 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_158 
	ret_func_158__1: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

addr_if_38:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 72 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 2 
	push rax

	;; -- mult --
	pop rbx
	pop rax
	mul rbx
	push rax

	;; -- assignment --
	mov rax, [basestack + 8 * 1]
	mov rbx, 72 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 80 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 72 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_138__1 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_138 
	ret_func_138__1: ;; first number is function id, second number id call id

	;; -- assignment --
	mov rax, [basestack + 8 * 1]
	mov rbx, 80 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 80 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 72 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_79__1 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_79 
	ret_func_79__1: ;; first number is function id, second number id call id

	;; -- assignment --
	mov rax, [basestack + 8 * 1]
	mov rbx, 88 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

	;; -- jump --
	jmp addr_while_condition_15

addr_while_end_15:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 48 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 80 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- write at index -- 
	pop rcx ;; value
	pop rax ;; index
	mov rbx, 8 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov r8, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rcx, r9
	not r9
	and r8, r9
	add r8, rcx
	mov [rbx], r8
	push rcx

	;; -- pop --
	add rsp, 8

addr_while_condition_16:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 56 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- greater --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	pushf
	pop rbx
	pushf
	pop rcx
	shr rax, 7
	and rax, 1
	shr rbx, 11
	and rbx, 1
	shr rcx, 6
	and rcx, 1
	xor rax, rbx
	or rax, rcx
	mov rbx, 1
	sub rbx, rax
	push rbx
	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_while_end_16

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 48 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 64 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 56 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- subtract --
	pop rbx
	pop rax
	sub rax, rbx
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_145__1 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_145 
	ret_func_145__1: ;; first number is function id, second number id call id

	;; -- write at index -- 
	pop rcx ;; value
	pop rax ;; index
	mov rbx, 8 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov r8, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rcx, r9
	not r9
	and r8, r9
	add r8, rcx
	mov [rbx], r8
	push rcx

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 56 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- add --
	pop rbx
	pop rax
	add rax, rbx
	push rax

	;; -- assignment --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- character --
	mov rax, 0x3A 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_143__2 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_143 
	ret_func_143__2: ;; first number is function id, second number id call id

	;; -- assignment --
	mov rax, [basestack + 8 * 1]
	mov rbx, 56 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 64 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- add --
	pop rbx
	pop rax
	add rax, rbx
	push rax

	;; -- assignment --
	mov rax, [basestack + 8 * 1]
	mov rbx, 64 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

	;; -- jump --
	jmp addr_while_condition_16

addr_while_end_16:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 48 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 64 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_146__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_146 
	ret_func_146__0: ;; first number is function id, second number id call id

	;; -- write at index -- 
	pop rcx ;; value
	pop rax ;; index
	mov rbx, 8 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov r8, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rcx, r9
	not r9
	and r8, r9
	add r8, rcx
	mov [rbx], r8
	push rcx

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 48 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- subtract --
	pop rbx
	pop rax
	sub rax, rbx
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- write at index -- 
	pop rcx ;; value
	pop rax ;; index
	mov rbx, 8 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov r8, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rcx, r9
	not r9
	and r8, r9
	add r8, rcx
	mov [rbx], r8
	push rcx

	;; -- pop --
	add rsp, 8

	;; -- number --
	mov rax, 0 
	push rax

	;; -- assignment --
	mov rax, [basestack + 8 * 1]
	mov rbx, 64 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 48 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- read at index -- 
	pop rax ;; index
	mov rbx, 8 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov rbx, [rbx]
	;; create bit mask
	mov rcx, 0
	sub rcx, 1
	and rbx, rcx
	push rbx

addr_while_condition_17:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 96 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- not equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	mov rbx, 1
	sub rbx, rax
	push rbx

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_while_end_17

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 48 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 64 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read at index -- 
	pop rax ;; index
	mov rbx, 8 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov rbx, [rbx]
	;; create bit mask
	mov rcx, 0
	sub rcx, 1
	and rbx, rcx
	push rbx

	;; -- number --
	mov rax, 2162688 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_3__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_3 
	ret_func_3__0: ;; first number is function id, second number id call id

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 104 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- less --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 7
	and rax, 1
	pushf
	pop rbx
	shr rbx, 11
	and rbx, 1
	xor rax, rbx
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_39

	;; -- string --
	mov rax, string_3 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_158__2 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_158 
	ret_func_158__2: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 48 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 64 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read at index -- 
	pop rax ;; index
	mov rbx, 8 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov rbx, [rbx]
	;; create bit mask
	mov rcx, 0
	sub rcx, 1
	and rbx, rcx
	push rbx

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_158__3 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_158 
	ret_func_158__3: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- string --
	mov rax, string_4 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_158__4 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_158 
	ret_func_158__4: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 104 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- negative --
	pop rax
	neg rax
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_160__1 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_160 
	ret_func_160__1: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- string --
	mov rax, string_5 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_158__5 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_158 
	ret_func_158__5: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- number --
	mov rax, 1 
	push rax

	;; -- negative --
	pop rax
	neg rax
	push rax

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 80 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 16 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
	;; -- pop --
	add rsp, 0

addr_if_39:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 104 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 2097152 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_131__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_131 
	ret_func_131__0: ;; first number is function id, second number id call id

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 112 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- greater --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	pushf
	pop rbx
	pushf
	pop rcx
	shr rax, 7
	and rax, 1
	shr rbx, 11
	and rbx, 1
	shr rcx, 6
	and rcx, 1
	xor rax, rbx
	or rax, rcx
	mov rbx, 1
	sub rbx, rax
	push rbx
	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_40

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 96 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_139__5 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_139 
	ret_func_139__5: ;; first number is function id, second number id call id

	;; -- number --
	mov rax, 0 
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 96 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 120 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read at index -- 
	pop rax ;; index
	mov rbx, 1 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov rbx, [rbx]
	;; create bit mask
	mov rcx, 1
	shl rcx, 8 ;; size
	sub rcx, 1
	and rbx, rcx
	push rbx

	;; -- character --
	mov rax, 0x2F 
	push rax

	;; -- not equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	mov rbx, 1
	sub rbx, rax
	push rbx

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_41

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 120 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- add --
	pop rbx
	pop rax
	add rax, rbx
	push rax

	;; -- assignment --
	mov rax, [basestack + 8 * 1]
	mov rbx, 120 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- number --
	mov rax, 1 
	push rax

	;; -- assignment --
	mov rax, [basestack + 8 * 1]
	mov rbx, 128 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

addr_if_41:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 120 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_139__6 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_139 
	ret_func_139__6: ;; first number is function id, second number id call id

	;; -- add --
	pop rbx
	pop rax
	add rax, rbx
	push rax

	;; -- assignment --
	mov rax, [basestack + 8 * 1]
	mov rbx, 120 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 120 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- add --
	pop rbx
	pop rax
	add rax, rbx
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_136__6 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_136 
	ret_func_136__6: ;; first number is function id, second number id call id

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 136 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 96 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 136 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 96 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_139__7 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_139 
	ret_func_139__7: ;; first number is function id, second number id call id

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_144__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_144 
	ret_func_144__0: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 136 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 96 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_139__8 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_139 
	ret_func_139__8: ;; first number is function id, second number id call id

	;; -- add --
	pop rbx
	pop rax
	add rax, rbx
	push rax

	;; -- assignment --
	mov rax, [basestack + 8 * 1]
	mov rbx, 136 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 128 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_42

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 136 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- character --
	mov rax, 0x2F 
	push rax

	;; -- write at index -- 
	pop rcx ;; value
	pop rax ;; index
	mov rbx, 1 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov r8, [rbx]
	;; create bit mask
	mov r9, 1
	shl r9, 8;; size
	sub r9, 1
	and rcx, r9
	not r9
	and r8, r9
	add r8, rcx
	mov [rbx], r8
	push rcx

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 136 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- add --
	pop rbx
	pop rax
	add rax, rbx
	push rax

	;; -- assignment --
	mov rax, [basestack + 8 * 1]
	mov rbx, 136 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

addr_if_42:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 136 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_139__9 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_139 
	ret_func_139__9: ;; first number is function id, second number id call id

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_144__1 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_144 
	ret_func_144__1: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 144 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 120 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- character --
	mov rax, 0x00 
	push rax

	;; -- write at index -- 
	pop rcx ;; value
	pop rax ;; index
	mov rbx, 1 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov r8, [rbx]
	;; create bit mask
	mov r9, 1
	shl r9, 8;; size
	sub r9, 1
	and rcx, r9
	not r9
	and r8, r9
	add r8, rcx
	mov [rbx], r8
	push rcx

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 144 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_59__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_59 
	ret_func_59__0: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 120 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 16 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
	;; -- pop --
	add rsp, 32

addr_if_40:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 64 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- add --
	pop rbx
	pop rax
	add rax, rbx
	push rax

	;; -- assignment --
	mov rax, [basestack + 8 * 1]
	mov rbx, 64 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 48 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 64 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read at index -- 
	pop rax ;; index
	mov rbx, 8 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov rbx, [rbx]
	;; create bit mask
	mov rcx, 0
	sub rcx, 1
	and rbx, rcx
	push rbx

	;; -- assignment --
	mov rax, [basestack + 8 * 1]
	mov rbx, 96 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 16

	;; -- jump --
	jmp addr_while_condition_17

addr_while_end_17:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 80 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_137__2 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_137 
	ret_func_137__2: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- number --
	mov rax, 2 
	push rax

	;; -- negative --
	pop rax
	neg rax
	push rax

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 72 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 16 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_161:
	;; -- function --
	jmp addr_func_end_162 
addr_func_162:
	mov rax, rsp
	add rax, 8 * 1

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 127 
	push rax

	;; -- bit and --
	pop rbx
	pop rax
	and rax, rbx
	push rax
	;; -- number --
	mov rax, 0 
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 8 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_162:
	;; -- function --
	jmp addr_func_end_163 
addr_func_163:
	mov rax, rsp
	add rax, 8 * 1

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- number --
	mov rax, 0 
	push rax

addr_while_condition_18:
	;; -- number --
	mov rax, 256 
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- less --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pushf
	pushf
	pop rax
	shr rax, 7
	and rax, 1
	pop rbx
	shr rbx, 11
	and rbx, 1
	pop rcx
	shr rcx, 6
	and rcx, 1
	xor rax, rbx
	or rax, rcx
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_while_end_18

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- add --
	pop rbx
	pop rax
	add rax, rbx
	push rax

	;; -- assignment --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 256 
	push rax

	;; -- subtract --
	pop rbx
	pop rax
	sub rax, rbx
	push rax

	;; -- assignment --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

	;; -- jump --
	jmp addr_while_condition_18

addr_while_end_18:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 8 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 8 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_163:
	;; -- function --
	jmp addr_func_end_164 
addr_func_164:
	mov rax, rsp
	add rax, 8 * 1

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- read at index -- 
	pop rax ;; index
	mov rbx, 1 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov rbx, [rbx]
	;; create bit mask
	mov rcx, 1
	shl rcx, 8 ;; size
	sub rcx, 1
	and rbx, rcx
	push rbx

	;; -- character --
	mov rax, 0x2E 
	push rax

	;; -- not equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	mov rbx, 1
	sub rbx, rax
	push rbx

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_43

	;; -- number --
	mov rax, 0 
	push rax

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 8 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
	;; -- pop --
	add rsp, 0

addr_if_43:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- read at index -- 
	pop rax ;; index
	mov rbx, 1 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov rbx, [rbx]
	;; create bit mask
	mov rcx, 1
	shl rcx, 8 ;; size
	sub rcx, 1
	and rbx, rcx
	push rbx

	;; -- character --
	mov rax, 0x2E 
	push rax

	;; -- not equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	mov rbx, 1
	sub rbx, rax
	push rbx

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_44

	;; -- number --
	mov rax, 0 
	push rax

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 8 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
	;; -- pop --
	add rsp, 0

addr_if_44:
	;; -- number --
	mov rax, 1 
	push rax

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 8 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_164:
	;; -- function --
	jmp addr_func_end_165 
addr_func_165:
	mov rax, rsp
	add rax, 8 * 1

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- number --
	mov rax, 24 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_136__7 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_136 
	ret_func_136__7: ;; first number is function id, second number id call id

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- character --
	mov rax, 0x2F 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_142__1 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_142 
	ret_func_142__1: ;; first number is function id, second number id call id

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- add --
	pop rbx
	pop rax
	add rax, rbx
	push rax

	;; -- number --
	mov rax, 8 
	push rax

	;; -- mult --
	pop rbx
	pop rax
	mul rbx
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_136__8 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_136 
	ret_func_136__8: ;; first number is function id, second number id call id

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 0 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- character --
	mov rax, 0x2F 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_143__3 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_143 
	ret_func_143__3: ;; first number is function id, second number id call id

	;; -- number --
	mov rax, 0 
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- read at index -- 
	pop rax ;; index
	mov rbx, 1 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov rbx, [rbx]
	;; create bit mask
	mov rcx, 1
	shl rcx, 8 ;; size
	sub rcx, 1
	and rbx, rcx
	push rbx

	;; -- character --
	mov rax, 0x2E 
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_and_5

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_164__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_164 
	ret_func_164__0: ;; first number is function id, second number id call id

	;; -- number --
	mov rax, 0 
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- jump --
	jmp addr_end_and_5

addr_and_5:
	;; -- number --
	mov rax, 0  
	push rax

addr_end_and_5:
	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_45

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- subtract --
	pop rbx
	pop rax
	sub rax, rbx
	push rax

	;; -- assignment --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 48 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- add --
	pop rbx
	pop rax
	add rax, rbx
	push rax

	;; -- assignment --
	mov rax, [basestack + 8 * 1]
	mov rbx, 40 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- character --
	mov rax, 0x2F 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_143__4 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_143 
	ret_func_143__4: ;; first number is function id, second number id call id

	;; -- assignment --
	mov rax, [basestack + 8 * 1]
	mov rbx, 48 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

addr_if_45:
addr_while_condition_19:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 56 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- less --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 7
	and rax, 1
	pushf
	pop rbx
	shr rbx, 11
	and rbx, 1
	xor rax, rbx
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_while_end_19

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_164__1 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_164 
	ret_func_164__1: ;; first number is function id, second number id call id

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_and_6

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 56 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- subtract --
	pop rbx
	pop rax
	sub rax, rbx
	push rax

	;; -- read at index -- 
	pop rax ;; index
	mov rbx, 8 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov rbx, [rbx]
	;; create bit mask
	mov rcx, 0
	sub rcx, 1
	and rbx, rcx
	push rbx

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_164__2 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_164 
	ret_func_164__2: ;; first number is function id, second number id call id

	;; -- number --
	mov rax, 0 
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- jump --
	jmp addr_end_and_6

addr_and_6:
	;; -- number --
	mov rax, 0  
	push rax

addr_end_and_6:
	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_and_7

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 56 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- greater --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	pushf
	pop rbx
	pushf
	pop rcx
	shr rax, 7
	and rax, 1
	shr rbx, 11
	and rbx, 1
	shr rcx, 6
	and rcx, 1
	xor rax, rbx
	or rax, rcx
	mov rbx, 1
	sub rbx, rax
	push rbx
	;; -- jump --
	jmp addr_end_and_7

addr_and_7:
	;; -- number --
	mov rax, 0  
	push rax

addr_end_and_7:
	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_46

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 56 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- subtract --
	pop rbx
	pop rax
	sub rax, rbx
	push rax

	;; -- assignment --
	mov rax, [basestack + 8 * 1]
	mov rbx, 56 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 2 
	push rax

	;; -- subtract --
	pop rbx
	pop rax
	sub rax, rbx
	push rax

	;; -- assignment --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 48 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- add --
	pop rbx
	pop rax
	add rax, rbx
	push rax

	;; -- assignment --
	mov rax, [basestack + 8 * 1]
	mov rbx, 40 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- character --
	mov rax, 0x2F 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_143__5 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_143 
	ret_func_143__5: ;; first number is function id, second number id call id

	;; -- assignment --
	mov rax, [basestack + 8 * 1]
	mov rbx, 48 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

addr_if_46:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 56 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 48 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- subtract --
	pop rbx
	pop rax
	sub rax, rbx
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_145__2 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_145 
	ret_func_145__2: ;; first number is function id, second number id call id

	;; -- write at index -- 
	pop rcx ;; value
	pop rax ;; index
	mov rbx, 8 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov r8, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rcx, r9
	not r9
	and r8, r9
	add r8, rcx
	mov [rbx], r8
	push rcx

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 48 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- add --
	pop rbx
	pop rax
	add rax, rbx
	push rax

	;; -- assignment --
	mov rax, [basestack + 8 * 1]
	mov rbx, 40 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- character --
	mov rax, 0x2F 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_143__6 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_143 
	ret_func_143__6: ;; first number is function id, second number id call id

	;; -- assignment --
	mov rax, [basestack + 8 * 1]
	mov rbx, 48 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 56 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- add --
	pop rbx
	pop rax
	add rax, rbx
	push rax

	;; -- assignment --
	mov rax, [basestack + 8 * 1]
	mov rbx, 56 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

	;; -- jump --
	jmp addr_while_condition_19

addr_while_end_19:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- write at index -- 
	pop rcx ;; value
	pop rax ;; index
	mov rbx, 8 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov r8, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rcx, r9
	not r9
	and r8, r9
	add r8, rcx
	mov [rbx], r8
	push rcx

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- character --
	mov rax, 0x2E 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_143__7 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_143 
	ret_func_143__7: ;; first number is function id, second number id call id

	;; -- assignment --
	mov rax, [basestack + 8 * 1]
	mov rbx, 48 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 48 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- negative --
	pop rax
	neg rax
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_47

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 8 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 16 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

	;; -- jump --
	jmp addr_else_1

addr_if_47:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 48 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- subtract --
	pop rbx
	pop rax
	sub rax, rbx
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_145__3 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_145 
	ret_func_145__3: ;; first number is function id, second number id call id

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 8 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 48 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- add --
	pop rbx
	pop rax
	add rax, rbx
	push rax

	;; -- assignment --
	mov rax, [basestack + 8 * 1]
	mov rbx, 40 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_139__10 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_139 
	ret_func_139__10: ;; first number is function id, second number id call id

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_145__4 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_145 
	ret_func_145__4: ;; first number is function id, second number id call id

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 16 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

addr_else_1:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 40 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 8 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_165:
	;; -- function --
	jmp addr_func_end_166 
addr_func_166:
	mov rax, rsp
	add rax, 8 * 2

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- number --
	mov rax, 24 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_136__9 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_136 
	ret_func_136__9: ;; first number is function id, second number id call id

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- character --
	mov rax, 0x2F 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_142__2 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_142 
	ret_func_142__2: ;; first number is function id, second number id call id

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- character --
	mov rax, 0x2F 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_142__3 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_142 
	ret_func_142__3: ;; first number is function id, second number id call id

	;; -- add --
	pop rbx
	pop rax
	add rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 48 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- add --
	pop rbx
	pop rax
	add rax, rbx
	push rax

	;; -- number --
	mov rax, 8 
	push rax

	;; -- mult --
	pop rbx
	pop rax
	mul rbx
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_136__10 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_136 
	ret_func_136__10: ;; first number is function id, second number id call id

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 0 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- character --
	mov rax, 0x2F 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_143__8 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_143 
	ret_func_143__8: ;; first number is function id, second number id call id

	;; -- number --
	mov rax, 0 
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 56 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- read at index -- 
	pop rax ;; index
	mov rbx, 1 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov rbx, [rbx]
	;; create bit mask
	mov rcx, 1
	shl rcx, 8 ;; size
	sub rcx, 1
	and rbx, rcx
	push rbx

	;; -- character --
	mov rax, 0x2E 
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_and_8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 56 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_164__3 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_164 
	ret_func_164__3: ;; first number is function id, second number id call id

	;; -- number --
	mov rax, 0 
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- jump --
	jmp addr_end_and_8

addr_and_8:
	;; -- number --
	mov rax, 0  
	push rax

addr_end_and_8:
	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_48

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- subtract --
	pop rbx
	pop rax
	sub rax, rbx
	push rax

	;; -- assignment --
	mov rax, [basestack + 8 * 1]
	mov rbx, 40 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 48 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- subtract --
	pop rbx
	pop rax
	sub rax, rbx
	push rax

	;; -- assignment --
	mov rax, [basestack + 8 * 1]
	mov rbx, 48 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 56 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 64 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- add --
	pop rbx
	pop rax
	add rax, rbx
	push rax

	;; -- assignment --
	mov rax, [basestack + 8 * 1]
	mov rbx, 56 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 56 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- character --
	mov rax, 0x2F 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_143__9 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_143 
	ret_func_143__9: ;; first number is function id, second number id call id

	;; -- assignment --
	mov rax, [basestack + 8 * 1]
	mov rbx, 64 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

addr_if_48:
addr_while_condition_20:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 72 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- less --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 7
	and rax, 1
	pushf
	pop rbx
	shr rbx, 11
	and rbx, 1
	xor rax, rbx
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_while_end_20

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 56 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_164__4 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_164 
	ret_func_164__4: ;; first number is function id, second number id call id

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_and_9

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 72 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- subtract --
	pop rbx
	pop rax
	sub rax, rbx
	push rax

	;; -- read at index -- 
	pop rax ;; index
	mov rbx, 8 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov rbx, [rbx]
	;; create bit mask
	mov rcx, 0
	sub rcx, 1
	and rbx, rcx
	push rbx

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_164__5 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_164 
	ret_func_164__5: ;; first number is function id, second number id call id

	;; -- number --
	mov rax, 0 
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- jump --
	jmp addr_end_and_9

addr_and_9:
	;; -- number --
	mov rax, 0  
	push rax

addr_end_and_9:
	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_and_10

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 72 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- greater --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	pushf
	pop rbx
	pushf
	pop rcx
	shr rax, 7
	and rax, 1
	shr rbx, 11
	and rbx, 1
	shr rcx, 6
	and rcx, 1
	xor rax, rbx
	or rax, rcx
	mov rbx, 1
	sub rbx, rax
	push rbx
	;; -- jump --
	jmp addr_end_and_10

addr_and_10:
	;; -- number --
	mov rax, 0  
	push rax

addr_end_and_10:
	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_49

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 72 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- subtract --
	pop rbx
	pop rax
	sub rax, rbx
	push rax

	;; -- assignment --
	mov rax, [basestack + 8 * 1]
	mov rbx, 72 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 2 
	push rax

	;; -- subtract --
	pop rbx
	pop rax
	sub rax, rbx
	push rax

	;; -- assignment --
	mov rax, [basestack + 8 * 1]
	mov rbx, 40 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 48 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 2 
	push rax

	;; -- subtract --
	pop rbx
	pop rax
	sub rax, rbx
	push rax

	;; -- assignment --
	mov rax, [basestack + 8 * 1]
	mov rbx, 48 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 56 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 64 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- add --
	pop rbx
	pop rax
	add rax, rbx
	push rax

	;; -- assignment --
	mov rax, [basestack + 8 * 1]
	mov rbx, 56 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 56 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- character --
	mov rax, 0x2F 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_143__10 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_143 
	ret_func_143__10: ;; first number is function id, second number id call id

	;; -- assignment --
	mov rax, [basestack + 8 * 1]
	mov rbx, 64 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

addr_if_49:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 72 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 56 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 64 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- subtract --
	pop rbx
	pop rax
	sub rax, rbx
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_145__5 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_145 
	ret_func_145__5: ;; first number is function id, second number id call id

	;; -- write at index -- 
	pop rcx ;; value
	pop rax ;; index
	mov rbx, 8 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov r8, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rcx, r9
	not r9
	and r8, r9
	add r8, rcx
	mov [rbx], r8
	push rcx

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 56 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 64 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- add --
	pop rbx
	pop rax
	add rax, rbx
	push rax

	;; -- assignment --
	mov rax, [basestack + 8 * 1]
	mov rbx, 56 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 56 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- character --
	mov rax, 0x2F 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_143__11 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_143 
	ret_func_143__11: ;; first number is function id, second number id call id

	;; -- assignment --
	mov rax, [basestack + 8 * 1]
	mov rbx, 64 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 72 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- add --
	pop rbx
	pop rax
	add rax, rbx
	push rax

	;; -- assignment --
	mov rax, [basestack + 8 * 1]
	mov rbx, 72 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

	;; -- jump --
	jmp addr_while_condition_20

addr_while_end_20:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- assignment --
	mov rax, [basestack + 8 * 1]
	mov rbx, 56 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- character --
	mov rax, 0x2F 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_143__12 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_143 
	ret_func_143__12: ;; first number is function id, second number id call id

	;; -- assignment --
	mov rax, [basestack + 8 * 1]
	mov rbx, 64 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 56 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- read at index -- 
	pop rax ;; index
	mov rbx, 1 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov rbx, [rbx]
	;; create bit mask
	mov rcx, 1
	shl rcx, 8 ;; size
	sub rcx, 1
	and rbx, rcx
	push rbx

	;; -- character --
	mov rax, 0x2E 
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_and_11

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 56 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_164__6 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_164 
	ret_func_164__6: ;; first number is function id, second number id call id

	;; -- number --
	mov rax, 0 
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- jump --
	jmp addr_end_and_11

addr_and_11:
	;; -- number --
	mov rax, 0  
	push rax

addr_end_and_11:
	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_50

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 48 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- subtract --
	pop rbx
	pop rax
	sub rax, rbx
	push rax

	;; -- assignment --
	mov rax, [basestack + 8 * 1]
	mov rbx, 48 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 56 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 64 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- add --
	pop rbx
	pop rax
	add rax, rbx
	push rax

	;; -- assignment --
	mov rax, [basestack + 8 * 1]
	mov rbx, 56 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 56 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- character --
	mov rax, 0x2F 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_143__13 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_143 
	ret_func_143__13: ;; first number is function id, second number id call id

	;; -- assignment --
	mov rax, [basestack + 8 * 1]
	mov rbx, 64 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

addr_if_50:
addr_while_condition_21:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 72 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 48 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- less --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 7
	and rax, 1
	pushf
	pop rbx
	shr rbx, 11
	and rbx, 1
	xor rax, rbx
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_while_end_21

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 56 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_164__7 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_164 
	ret_func_164__7: ;; first number is function id, second number id call id

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_and_12

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 72 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- subtract --
	pop rbx
	pop rax
	sub rax, rbx
	push rax

	;; -- read at index -- 
	pop rax ;; index
	mov rbx, 8 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov rbx, [rbx]
	;; create bit mask
	mov rcx, 0
	sub rcx, 1
	and rbx, rcx
	push rbx

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_164__8 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_164 
	ret_func_164__8: ;; first number is function id, second number id call id

	;; -- number --
	mov rax, 0 
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- jump --
	jmp addr_end_and_12

addr_and_12:
	;; -- number --
	mov rax, 0  
	push rax

addr_end_and_12:
	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_and_13

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 72 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- greater --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	pushf
	pop rbx
	pushf
	pop rcx
	shr rax, 7
	and rax, 1
	shr rbx, 11
	and rbx, 1
	shr rcx, 6
	and rcx, 1
	xor rax, rbx
	or rax, rcx
	mov rbx, 1
	sub rbx, rax
	push rbx
	;; -- jump --
	jmp addr_end_and_13

addr_and_13:
	;; -- number --
	mov rax, 0  
	push rax

addr_end_and_13:
	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_51

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 72 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- subtract --
	pop rbx
	pop rax
	sub rax, rbx
	push rax

	;; -- assignment --
	mov rax, [basestack + 8 * 1]
	mov rbx, 72 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 48 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 2 
	push rax

	;; -- subtract --
	pop rbx
	pop rax
	sub rax, rbx
	push rax

	;; -- assignment --
	mov rax, [basestack + 8 * 1]
	mov rbx, 48 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 56 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 64 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- add --
	pop rbx
	pop rax
	add rax, rbx
	push rax

	;; -- assignment --
	mov rax, [basestack + 8 * 1]
	mov rbx, 56 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 56 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- character --
	mov rax, 0x2F 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_143__14 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_143 
	ret_func_143__14: ;; first number is function id, second number id call id

	;; -- assignment --
	mov rax, [basestack + 8 * 1]
	mov rbx, 64 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

addr_if_51:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 72 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 56 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 64 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- subtract --
	pop rbx
	pop rax
	sub rax, rbx
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_145__6 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_145 
	ret_func_145__6: ;; first number is function id, second number id call id

	;; -- write at index -- 
	pop rcx ;; value
	pop rax ;; index
	mov rbx, 8 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov r8, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rcx, r9
	not r9
	and r8, r9
	add r8, rcx
	mov [rbx], r8
	push rcx

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 56 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 64 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- add --
	pop rbx
	pop rax
	add rax, rbx
	push rax

	;; -- assignment --
	mov rax, [basestack + 8 * 1]
	mov rbx, 56 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 56 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- character --
	mov rax, 0x2F 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_143__15 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_143 
	ret_func_143__15: ;; first number is function id, second number id call id

	;; -- assignment --
	mov rax, [basestack + 8 * 1]
	mov rbx, 64 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 72 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- add --
	pop rbx
	pop rax
	add rax, rbx
	push rax

	;; -- assignment --
	mov rax, [basestack + 8 * 1]
	mov rbx, 72 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

	;; -- jump --
	jmp addr_while_condition_21

addr_while_end_21:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 72 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- write at index -- 
	pop rcx ;; value
	pop rax ;; index
	mov rbx, 8 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov r8, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rcx, r9
	not r9
	and r8, r9
	add r8, rcx
	mov [rbx], r8
	push rcx

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 56 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- character --
	mov rax, 0x2E 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_143__16 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_143 
	ret_func_143__16: ;; first number is function id, second number id call id

	;; -- assignment --
	mov rax, [basestack + 8 * 1]
	mov rbx, 64 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 64 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- negative --
	pop rax
	neg rax
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_52

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 56 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 8 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 16 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

	;; -- jump --
	jmp addr_else_2

addr_if_52:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 56 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 64 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- subtract --
	pop rbx
	pop rax
	sub rax, rbx
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_145__7 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_145 
	ret_func_145__7: ;; first number is function id, second number id call id

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 8 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 56 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 64 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- add --
	pop rbx
	pop rax
	add rax, rbx
	push rax

	;; -- assignment --
	mov rax, [basestack + 8 * 1]
	mov rbx, 56 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 56 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 56 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_139__11 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_139 
	ret_func_139__11: ;; first number is function id, second number id call id

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_145__8 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_145 
	ret_func_145__8: ;; first number is function id, second number id call id

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 16 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

addr_else_2:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 48 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 16 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_166:
	;; -- function --
	jmp addr_func_end_167 
addr_func_167:
	mov rax, rsp
	add rax, 8 * 1

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

addr_while_condition_22:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read at index -- 
	pop rax ;; index
	mov rbx, 8 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov rbx, [rbx]
	;; create bit mask
	mov rcx, 0
	sub rcx, 1
	and rbx, rcx
	push rbx

	;; -- number --
	mov rax, 0 
	push rax

	;; -- not equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	mov rbx, 1
	sub rbx, rax
	push rbx

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_while_end_22

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read at index -- 
	pop rax ;; index
	mov rbx, 8 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov rbx, [rbx]
	;; create bit mask
	mov rcx, 0
	sub rcx, 1
	and rbx, rcx
	push rbx

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_139__12 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_139 
	ret_func_139__12: ;; first number is function id, second number id call id

	;; -- add --
	pop rbx
	pop rax
	add rax, rbx
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- add --
	pop rbx
	pop rax
	add rax, rbx
	push rax

	;; -- assignment --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- add --
	pop rbx
	pop rax
	add rax, rbx
	push rax

	;; -- assignment --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

	;; -- jump --
	jmp addr_while_condition_22

addr_while_end_22:
	;; -- number --
	mov rax, 0 
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_53

	;; -- number --
	mov rax, 1 
	push rax

	;; -- assignment --
	mov rax, [basestack + 8 * 1]
	mov rbx, 40 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- number --
	mov rax, 2 
	push rax

	;; -- assignment --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

addr_if_53:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 8 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- not equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	mov rbx, 1
	sub rbx, rax
	push rbx

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_54

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 8 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_139__13 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_139 
	ret_func_139__13: ;; first number is function id, second number id call id

	;; -- add --
	pop rbx
	pop rax
	add rax, rbx
	push rax

	;; -- assignment --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

addr_if_54:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- not equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	mov rbx, 1
	sub rbx, rax
	push rbx

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_55

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_139__14 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_139 
	ret_func_139__14: ;; first number is function id, second number id call id

	;; -- add --
	pop rbx
	pop rax
	add rax, rbx
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- add --
	pop rbx
	pop rax
	add rax, rbx
	push rax

	;; -- assignment --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

addr_if_55:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- add --
	pop rbx
	pop rax
	add rax, rbx
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_136__11 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_136 
	ret_func_136__11: ;; first number is function id, second number id call id

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 48 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_56

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 56 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- character --
	mov rax, 0x2E 
	push rax

	;; -- write at index -- 
	pop rcx ;; value
	pop rax ;; index
	mov rbx, 1 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov r8, [rbx]
	;; create bit mask
	mov r9, 1
	shl r9, 8;; size
	sub r9, 1
	and rcx, r9
	not r9
	and r8, r9
	add r8, rcx
	mov [rbx], r8
	push rcx

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 56 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- character --
	mov rax, 0x2F 
	push rax

	;; -- write at index -- 
	pop rcx ;; value
	pop rax ;; index
	mov rbx, 1 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov r8, [rbx]
	;; create bit mask
	mov r9, 1
	shl r9, 8;; size
	sub r9, 1
	and rcx, r9
	not r9
	and r8, r9
	add r8, rcx
	mov [rbx], r8
	push rcx

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 56 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 2 
	push rax

	;; -- add --
	pop rbx
	pop rax
	add rax, rbx
	push rax

	;; -- assignment --
	mov rax, [basestack + 8 * 1]
	mov rbx, 56 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

addr_if_56:
	;; -- number --
	mov rax, 0 
	push rax

	;; -- assignment --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

addr_while_condition_23:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read at index -- 
	pop rax ;; index
	mov rbx, 8 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov rbx, [rbx]
	;; create bit mask
	mov rcx, 0
	sub rcx, 1
	and rbx, rcx
	push rbx

	;; -- number --
	mov rax, 0 
	push rax

	;; -- not equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	mov rbx, 1
	sub rbx, rax
	push rbx

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_while_end_23

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read at index -- 
	pop rax ;; index
	mov rbx, 8 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov rbx, [rbx]
	;; create bit mask
	mov rcx, 0
	sub rcx, 1
	and rbx, rcx
	push rbx

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_139__15 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_139 
	ret_func_139__15: ;; first number is function id, second number id call id

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read at index -- 
	pop rax ;; index
	mov rbx, 8 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov rbx, [rbx]
	;; create bit mask
	mov rcx, 0
	sub rcx, 1
	and rbx, rcx
	push rbx

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 56 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 64 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_144__2 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_144 
	ret_func_144__2: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 56 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 64 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- character --
	mov rax, 0x2F 
	push rax

	;; -- write at index -- 
	pop rcx ;; value
	pop rax ;; index
	mov rbx, 1 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov r8, [rbx]
	;; create bit mask
	mov r9, 1
	shl r9, 8;; size
	sub r9, 1
	and rcx, r9
	not r9
	and r8, r9
	add r8, rcx
	mov [rbx], r8
	push rcx

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 56 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 64 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- add --
	pop rbx
	pop rax
	add rax, rbx
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- add --
	pop rbx
	pop rax
	add rax, rbx
	push rax

	;; -- assignment --
	mov rax, [basestack + 8 * 1]
	mov rbx, 56 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- add --
	pop rbx
	pop rax
	add rax, rbx
	push rax

	;; -- assignment --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 8

	;; -- jump --
	jmp addr_while_condition_23

addr_while_end_23:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 8 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- not equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	mov rbx, 1
	sub rbx, rax
	push rbx

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_57

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 8 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_139__16 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_139 
	ret_func_139__16: ;; first number is function id, second number id call id

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 8 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 56 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 64 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_144__3 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_144 
	ret_func_144__3: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 56 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 64 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- add --
	pop rbx
	pop rax
	add rax, rbx
	push rax

	;; -- assignment --
	mov rax, [basestack + 8 * 1]
	mov rbx, 56 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- not equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	mov rbx, 1
	sub rbx, rax
	push rbx

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_58

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 56 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- character --
	mov rax, 0x2E 
	push rax

	;; -- write at index -- 
	pop rcx ;; value
	pop rax ;; index
	mov rbx, 1 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov r8, [rbx]
	;; create bit mask
	mov r9, 1
	shl r9, 8;; size
	sub r9, 1
	and rcx, r9
	not r9
	and r8, r9
	add r8, rcx
	mov [rbx], r8
	push rcx

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 56 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- add --
	pop rbx
	pop rax
	add rax, rbx
	push rax

	;; -- assignment --
	mov rax, [basestack + 8 * 1]
	mov rbx, 56 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_139__17 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_139 
	ret_func_139__17: ;; first number is function id, second number id call id

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 56 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 72 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_144__4 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_144 
	ret_func_144__4: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 56 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 72 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- add --
	pop rbx
	pop rax
	add rax, rbx
	push rax

	;; -- assignment --
	mov rax, [basestack + 8 * 1]
	mov rbx, 56 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 8

addr_if_58:
	;; -- pop --
	add rsp, 8

addr_if_57:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 56 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- character --
	mov rax, 0x00 
	push rax

	;; -- write at index -- 
	pop rcx ;; value
	pop rax ;; index
	mov rbx, 1 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov r8, [rbx]
	;; create bit mask
	mov r9, 1
	shl r9, 8;; size
	sub r9, 1
	and rcx, r9
	not r9
	and r8, r9
	add r8, rcx
	mov [rbx], r8
	push rcx

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 48 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 40 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 8 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_167:
	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- number --
	mov rax, 2 
	push rax

	;; -- number --
	mov rax, 3 
	push rax

	;; -- number --
	mov rax, 4 
	push rax

	;; -- number --
	mov rax, 5 
	push rax

	;; -- number --
	mov rax, 6 
	push rax

	;; -- number --
	mov rax, 7 
	push rax

	;; -- number --
	mov rax, 8 
	push rax

	;; -- number --
	mov rax, 9 
	push rax

	;; -- number --
	mov rax, 10 
	push rax

	;; -- number --
	mov rax, 11 
	push rax

	;; -- number --
	mov rax, 12 
	push rax

	;; -- number --
	mov rax, 13 
	push rax

	;; -- number --
	mov rax, 14 
	push rax

	;; -- number --
	mov rax, 15 
	push rax

	;; -- number --
	mov rax, 16 
	push rax

	;; -- number --
	mov rax, 17 
	push rax

	;; -- number --
	mov rax, 18 
	push rax

	;; -- number --
	mov rax, 19 
	push rax

	;; -- number --
	mov rax, 20 
	push rax

	;; -- number --
	mov rax, 21 
	push rax

	;; -- number --
	mov rax, 22 
	push rax

	;; -- number --
	mov rax, 23 
	push rax

	;; -- number --
	mov rax, 24 
	push rax

	;; -- number --
	mov rax, 25 
	push rax

	;; -- number --
	mov rax, 26 
	push rax

	;; -- number --
	mov rax, 27 
	push rax

	;; -- number --
	mov rax, 28 
	push rax

	;; -- number --
	mov rax, 29 
	push rax

	;; -- number --
	mov rax, 30 
	push rax

	;; -- number --
	mov rax, 31 
	push rax

	;; -- number --
	mov rax, 32 
	push rax

	;; -- number --
	mov rax, 33 
	push rax

	;; -- number --
	mov rax, 34 
	push rax

	;; -- number --
	mov rax, 35 
	push rax

	;; -- number --
	mov rax, 36 
	push rax

	;; -- number --
	mov rax, 37 
	push rax

	;; -- number --
	mov rax, 38 
	push rax

	;; -- number --
	mov rax, 39 
	push rax

	;; -- number --
	mov rax, 40 
	push rax

	;; -- number --
	mov rax, 41 
	push rax

	;; -- number --
	mov rax, 42 
	push rax

	;; -- function --
	jmp addr_func_end_168 
addr_func_168:
	mov rax, rsp
	add rax, 8 * 1

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_3__1 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_3 
	ret_func_3__1: ;; first number is function id, second number id call id

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- less --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 7
	and rax, 1
	pushf
	pop rbx
	shr rbx, 11
	and rbx, 1
	xor rax, rbx
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_59

	;; -- string --
	mov rax, string_6 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_158__6 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_158 
	ret_func_158__6: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_158__7 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_158 
	ret_func_158__7: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- string --
	mov rax, string_7 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_158__8 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_158 
	ret_func_158__8: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- number --
	mov rax, 1 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_60__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_60 
	ret_func_60__0: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

addr_if_59:
	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 2 
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 56 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_9__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_9 
	ret_func_9__0: ;; first number is function id, second number id call id

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 48 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_9__1 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_9 
	ret_func_9__1: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 64 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- add --
	pop rbx
	pop rax
	add rax, rbx
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_136__12 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_136 
	ret_func_136__12: ;; first number is function id, second number id call id

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 72 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 64 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_1__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_1 
	ret_func_1__0: ;; first number is function id, second number id call id

	;; -- assignment --
	mov rax, [basestack + 8 * 1]
	mov rbx, 64 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 64 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- less --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 7
	and rax, 1
	pushf
	pop rbx
	shr rbx, 11
	and rbx, 1
	xor rax, rbx
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_60

	;; -- string --
	mov rax, string_8 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_158__9 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_158 
	ret_func_158__9: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_158__10 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_158 
	ret_func_158__10: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- string --
	mov rax, string_9 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_158__11 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_158 
	ret_func_158__11: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- number --
	mov rax, 1 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_60__1 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_60 
	ret_func_60__1: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

addr_if_60:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 72 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 64 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- character --
	mov rax, 0x00 
	push rax

	;; -- write at index -- 
	pop rcx ;; value
	pop rax ;; index
	mov rbx, 1 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov r8, [rbx]
	;; create bit mask
	mov r9, 1
	shl r9, 8;; size
	sub r9, 1
	and rcx, r9
	not r9
	and r8, r9
	add r8, rcx
	mov [rbx], r8
	push rcx

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 72 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 56 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 8 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_168:
	;; -- function --
	jmp addr_func_end_169 
addr_func_169:
	mov rax, rsp
	add rax, 8 * 2

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- number --
	mov rax, 48 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_136__13 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_136 
	ret_func_136__13: ;; first number is function id, second number id call id

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 40 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 0 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_168__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_168 
	ret_func_168__0: ;; first number is function id, second number id call id

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 8 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 8 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 16 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 24 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 32 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 8 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 16 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_169:
	;; -- function --
	jmp addr_func_end_170 
addr_func_170:
	mov rax, rsp
	add rax, 8 * 1

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 8 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_137__3 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_137 
	ret_func_137__3: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_137__4 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_137 
	ret_func_137__4: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_137__5 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_137 
	ret_func_137__5: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- return --
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rax
 mov [basestack + 8 * 1], rax
	;; -- pop parameters --
	add rsp, 8 
	;; -- return empty --
	push 0
	;; -- jump to return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_170:
	;; -- function --
	jmp addr_func_end_171 
addr_func_171:
	mov rax, rsp
	add rax, 8 * 1

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- add --
	pop rbx
	pop rax
	add rax, rbx
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 16 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 32 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- add --
	pop rbx
	pop rax
	add rax, rbx
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 32 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- read at index -- 
	pop rax ;; index
	mov rbx, 1 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov rbx, [rbx]
	;; create bit mask
	mov rcx, 1
	shl rcx, 8 ;; size
	sub rcx, 1
	and rbx, rcx
	push rbx

	;; -- character --
	mov rax, 0x0A 
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_61

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 32 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 24 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- add --
	pop rbx
	pop rax
	add rax, rbx
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 24 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

addr_if_61:
	;; -- return --
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rax
 mov [basestack + 8 * 1], rax
	;; -- pop parameters --
	add rsp, 8 
	;; -- return empty --
	push 0
	;; -- jump to return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_171:
	;; -- function --
	jmp addr_func_end_172 
addr_func_172:
	mov rax, rsp
	add rax, 8 * 1

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

addr_while_condition_24:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- read at index -- 
	pop rax ;; index
	mov rbx, 1 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov rbx, [rbx]
	;; create bit mask
	mov rcx, 1
	shl rcx, 8 ;; size
	sub rcx, 1
	and rbx, rcx
	push rbx

	;; -- character --
	mov rax, 0x0A 
	push rax

	;; -- not equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	mov rbx, 1
	sub rbx, rax
	push rbx

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_while_end_24

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_171__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_171 
	ret_func_171__0: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

	;; -- jump --
	jmp addr_while_condition_24

addr_while_end_24:
	;; -- return --
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rax
 mov [basestack + 8 * 1], rax
	;; -- pop parameters --
	add rsp, 8 
	;; -- return empty --
	push 0
	;; -- jump to return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_172:
	;; -- function --
	jmp addr_func_end_173 
addr_func_173:
	mov rax, rsp
	add rax, 8 * 2

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_158__12 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_158 
	ret_func_158__12: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- string --
	mov rax, string_10 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_158__13 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_158 
	ret_func_158__13: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 24 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_160__2 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_160 
	ret_func_160__2: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- string --
	mov rax, string_11 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_158__14 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_158 
	ret_func_158__14: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 32 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_160__3 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_160 
	ret_func_160__3: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- string --
	mov rax, string_12 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_158__15 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_158 
	ret_func_158__15: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- number --
	mov rax, 2 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_136__14 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_136 
	ret_func_136__14: ;; first number is function id, second number id call id

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- read at index -- 
	pop rax ;; index
	mov rbx, 1 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov rbx, [rbx]
	;; create bit mask
	mov rcx, 1
	shl rcx, 8 ;; size
	sub rcx, 1
	and rbx, rcx
	push rbx

	;; -- write at index -- 
	pop rcx ;; value
	pop rax ;; index
	mov rbx, 1 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov r8, [rbx]
	;; create bit mask
	mov r9, 1
	shl r9, 8;; size
	sub r9, 1
	and rcx, r9
	not r9
	and r8, r9
	add r8, rcx
	mov [rbx], r8
	push rcx

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- character --
	mov rax, 0x00 
	push rax

	;; -- write at index -- 
	pop rcx ;; value
	pop rax ;; index
	mov rbx, 1 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov r8, [rbx]
	;; create bit mask
	mov r9, 1
	shl r9, 8;; size
	sub r9, 1
	and rcx, r9
	not r9
	and r8, r9
	add r8, rcx
	mov [rbx], r8
	push rcx

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_158__16 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_158 
	ret_func_158__16: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_137__6 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_137 
	ret_func_137__6: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- string --
	mov rax, string_13 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_158__17 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_158 
	ret_func_158__17: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_158__18 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_158 
	ret_func_158__18: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- string --
	mov rax, string_14 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_158__19 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_158 
	ret_func_158__19: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- return --
	;; -- pop local variables --
	add rsp, 8 
	;; -- restore stackframe -- 
	pop rax
 mov [basestack + 8 * 1], rax
	;; -- pop parameters --
	add rsp, 16 
	;; -- return empty --
	push 0
	;; -- jump to return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_173:
	;; -- function --
	jmp addr_func_end_174 
addr_func_174:
	mov rax, rsp
	add rax, 8 * 1

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- number --
	mov rax, 48 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_136__15 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_136 
	ret_func_136__15: ;; first number is function id, second number id call id

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1120 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 40 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 0 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 8 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 24 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 24 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 32 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 32 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

addr_while_condition_25:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- read at index -- 
	pop rax ;; index
	mov rbx, 1 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov rbx, [rbx]
	;; create bit mask
	mov rcx, 1
	shl rcx, 8 ;; size
	sub rcx, 1
	and rbx, rcx
	push rbx

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_148__2 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_148 
	ret_func_148__2: ;; first number is function id, second number id call id

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_while_end_25

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_171__1 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_171 
	ret_func_171__1: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

	;; -- jump --
	jmp addr_while_condition_25

addr_while_end_25:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 8 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- subtract --
	pop rbx
	pop rax
	sub rax, rbx
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 16 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 8 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 8 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_174:
	;; -- function --
	jmp addr_func_end_175 
addr_func_175:
	mov rax, rsp
	add rax, 8 * 2

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1408 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 40 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

addr_while_condition_26:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- read at index -- 
	pop rax ;; index
	mov rbx, 1 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov rbx, [rbx]
	;; create bit mask
	mov rcx, 1
	shl rcx, 8 ;; size
	sub rcx, 1
	and rbx, rcx
	push rbx

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_149__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_149 
	ret_func_149__0: ;; first number is function id, second number id call id

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump --
	je addr_or_4

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- read at index -- 
	pop rax ;; index
	mov rbx, 1 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov rbx, [rbx]
	;; create bit mask
	mov rcx, 1
	shl rcx, 8 ;; size
	sub rcx, 1
	and rbx, rcx
	push rbx

	;; -- character --
	mov rax, 0x5F 
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- jump --
	jmp addr_end_or_4

addr_or_4:
	;; -- number --
	mov rax, 1  
	push rax

addr_end_or_4:
	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_while_end_26

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_171__2 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_171 
	ret_func_171__2: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

	;; -- jump --
	jmp addr_while_condition_26

addr_while_end_26:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 8 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- subtract --
	pop rbx
	pop rax
	sub rax, rbx
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 16 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 16 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_175:
	;; -- function --
	jmp addr_func_end_176 
addr_func_176:
	mov rax, rsp
	add rax, 8 * 1

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- number --
	mov rax, 48 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_136__16 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_136 
	ret_func_136__16: ;; first number is function id, second number id call id

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 8 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 0 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 24 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 24 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 32 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 32 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_15 
	push rax

	;; -- number --
	mov rax, 3 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_140__2 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_140 
	ret_func_140__2: ;; first number is function id, second number id call id

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_62

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1320 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 40 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- number --
	mov rax, 0 
	push rax

addr_while_condition_27:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 3 
	push rax

	;; -- less --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 7
	and rax, 1
	pushf
	pop rbx
	shr rbx, 11
	and rbx, 1
	xor rax, rbx
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_while_end_27

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_171__3 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_171 
	ret_func_171__3: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- add --
	pop rbx
	pop rax
	add rax, rbx
	push rax

	;; -- assignment --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

	;; -- jump --
	jmp addr_while_condition_27

addr_while_end_27:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- read at index -- 
	pop rax ;; index
	mov rbx, 1 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov rbx, [rbx]
	;; create bit mask
	mov rcx, 1
	shl rcx, 8 ;; size
	sub rcx, 1
	and rbx, rcx
	push rbx

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_149__1 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_149 
	ret_func_149__1: ;; first number is function id, second number id call id

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump --
	je addr_or_5

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- read at index -- 
	pop rax ;; index
	mov rbx, 1 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov rbx, [rbx]
	;; create bit mask
	mov rcx, 1
	shl rcx, 8 ;; size
	sub rcx, 1
	and rbx, rcx
	push rbx

	;; -- character --
	mov rax, 0x5F 
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- jump --
	jmp addr_end_or_5

addr_or_5:
	;; -- number --
	mov rax, 1  
	push rax

addr_end_or_5:
	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_63

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_175__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_175 
	ret_func_175__0: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 16 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 8 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
	;; -- pop --
	add rsp, 0

addr_if_63:
	;; -- pop --
	add rsp, 8

	;; -- jump --
	jmp addr_else_3

addr_if_62:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_16 
	push rax

	;; -- number --
	mov rax, 4 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_140__3 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_140 
	ret_func_140__3: ;; first number is function id, second number id call id

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_64

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1352 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 40 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- number --
	mov rax, 0 
	push rax

addr_while_condition_28:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 4 
	push rax

	;; -- less --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 7
	and rax, 1
	pushf
	pop rbx
	shr rbx, 11
	and rbx, 1
	xor rax, rbx
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_while_end_28

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_171__4 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_171 
	ret_func_171__4: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- add --
	pop rbx
	pop rax
	add rax, rbx
	push rax

	;; -- assignment --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

	;; -- jump --
	jmp addr_while_condition_28

addr_while_end_28:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- read at index -- 
	pop rax ;; index
	mov rbx, 1 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov rbx, [rbx]
	;; create bit mask
	mov rcx, 1
	shl rcx, 8 ;; size
	sub rcx, 1
	and rbx, rcx
	push rbx

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_149__2 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_149 
	ret_func_149__2: ;; first number is function id, second number id call id

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump --
	je addr_or_6

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- read at index -- 
	pop rax ;; index
	mov rbx, 1 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov rbx, [rbx]
	;; create bit mask
	mov rcx, 1
	shl rcx, 8 ;; size
	sub rcx, 1
	and rbx, rcx
	push rbx

	;; -- character --
	mov rax, 0x5F 
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- jump --
	jmp addr_end_or_6

addr_or_6:
	;; -- number --
	mov rax, 1  
	push rax

addr_end_or_6:
	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_65

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_175__1 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_175 
	ret_func_175__1: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 16 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 8 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
	;; -- pop --
	add rsp, 0

addr_if_65:
	;; -- pop --
	add rsp, 8

	;; -- jump --
	jmp addr_else_3

addr_if_64:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_17 
	push rax

	;; -- number --
	mov rax, 2 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_140__4 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_140 
	ret_func_140__4: ;; first number is function id, second number id call id

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_66

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1328 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 40 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- number --
	mov rax, 0 
	push rax

addr_while_condition_29:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 2 
	push rax

	;; -- less --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 7
	and rax, 1
	pushf
	pop rbx
	shr rbx, 11
	and rbx, 1
	xor rax, rbx
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_while_end_29

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_171__5 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_171 
	ret_func_171__5: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- add --
	pop rbx
	pop rax
	add rax, rbx
	push rax

	;; -- assignment --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

	;; -- jump --
	jmp addr_while_condition_29

addr_while_end_29:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- read at index -- 
	pop rax ;; index
	mov rbx, 1 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov rbx, [rbx]
	;; create bit mask
	mov rcx, 1
	shl rcx, 8 ;; size
	sub rcx, 1
	and rbx, rcx
	push rbx

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_149__3 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_149 
	ret_func_149__3: ;; first number is function id, second number id call id

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump --
	je addr_or_7

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- read at index -- 
	pop rax ;; index
	mov rbx, 1 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov rbx, [rbx]
	;; create bit mask
	mov rcx, 1
	shl rcx, 8 ;; size
	sub rcx, 1
	and rbx, rcx
	push rbx

	;; -- character --
	mov rax, 0x5F 
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- jump --
	jmp addr_end_or_7

addr_or_7:
	;; -- number --
	mov rax, 1  
	push rax

addr_end_or_7:
	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_67

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_175__2 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_175 
	ret_func_175__2: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 16 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 8 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
	;; -- pop --
	add rsp, 0

addr_if_67:
	;; -- pop --
	add rsp, 8

	;; -- jump --
	jmp addr_else_3

addr_if_66:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_18 
	push rax

	;; -- number --
	mov rax, 4 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_140__5 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_140 
	ret_func_140__5: ;; first number is function id, second number id call id

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_68

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1336 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 40 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- number --
	mov rax, 0 
	push rax

addr_while_condition_30:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 4 
	push rax

	;; -- less --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 7
	and rax, 1
	pushf
	pop rbx
	shr rbx, 11
	and rbx, 1
	xor rax, rbx
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_while_end_30

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_171__6 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_171 
	ret_func_171__6: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- add --
	pop rbx
	pop rax
	add rax, rbx
	push rax

	;; -- assignment --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

	;; -- jump --
	jmp addr_while_condition_30

addr_while_end_30:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- read at index -- 
	pop rax ;; index
	mov rbx, 1 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov rbx, [rbx]
	;; create bit mask
	mov rcx, 1
	shl rcx, 8 ;; size
	sub rcx, 1
	and rbx, rcx
	push rbx

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_149__4 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_149 
	ret_func_149__4: ;; first number is function id, second number id call id

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump --
	je addr_or_8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- read at index -- 
	pop rax ;; index
	mov rbx, 1 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov rbx, [rbx]
	;; create bit mask
	mov rcx, 1
	shl rcx, 8 ;; size
	sub rcx, 1
	and rbx, rcx
	push rbx

	;; -- character --
	mov rax, 0x5F 
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- jump --
	jmp addr_end_or_8

addr_or_8:
	;; -- number --
	mov rax, 1  
	push rax

addr_end_or_8:
	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_69

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_175__3 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_175 
	ret_func_175__3: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 16 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 8 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
	;; -- pop --
	add rsp, 0

addr_if_69:
	;; -- pop --
	add rsp, 8

	;; -- jump --
	jmp addr_else_3

addr_if_68:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_19 
	push rax

	;; -- number --
	mov rax, 4 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_140__6 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_140 
	ret_func_140__6: ;; first number is function id, second number id call id

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_70

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1360 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 40 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- number --
	mov rax, 0 
	push rax

addr_while_condition_31:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 4 
	push rax

	;; -- less --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 7
	and rax, 1
	pushf
	pop rbx
	shr rbx, 11
	and rbx, 1
	xor rax, rbx
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_while_end_31

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_171__7 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_171 
	ret_func_171__7: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- add --
	pop rbx
	pop rax
	add rax, rbx
	push rax

	;; -- assignment --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

	;; -- jump --
	jmp addr_while_condition_31

addr_while_end_31:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- read at index -- 
	pop rax ;; index
	mov rbx, 1 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov rbx, [rbx]
	;; create bit mask
	mov rcx, 1
	shl rcx, 8 ;; size
	sub rcx, 1
	and rbx, rcx
	push rbx

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_149__5 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_149 
	ret_func_149__5: ;; first number is function id, second number id call id

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump --
	je addr_or_9

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- read at index -- 
	pop rax ;; index
	mov rbx, 1 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov rbx, [rbx]
	;; create bit mask
	mov rcx, 1
	shl rcx, 8 ;; size
	sub rcx, 1
	and rbx, rcx
	push rbx

	;; -- character --
	mov rax, 0x5F 
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- jump --
	jmp addr_end_or_9

addr_or_9:
	;; -- number --
	mov rax, 1  
	push rax

addr_end_or_9:
	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_71

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_175__4 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_175 
	ret_func_175__4: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 16 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 8 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
	;; -- pop --
	add rsp, 0

addr_if_71:
	;; -- pop --
	add rsp, 8

	;; -- jump --
	jmp addr_else_3

addr_if_70:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_20 
	push rax

	;; -- number --
	mov rax, 5 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_140__7 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_140 
	ret_func_140__7: ;; first number is function id, second number id call id

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_72

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1344 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 40 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- number --
	mov rax, 0 
	push rax

addr_while_condition_32:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 5 
	push rax

	;; -- less --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 7
	and rax, 1
	pushf
	pop rbx
	shr rbx, 11
	and rbx, 1
	xor rax, rbx
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_while_end_32

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_171__8 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_171 
	ret_func_171__8: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- add --
	pop rbx
	pop rax
	add rax, rbx
	push rax

	;; -- assignment --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

	;; -- jump --
	jmp addr_while_condition_32

addr_while_end_32:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- read at index -- 
	pop rax ;; index
	mov rbx, 1 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov rbx, [rbx]
	;; create bit mask
	mov rcx, 1
	shl rcx, 8 ;; size
	sub rcx, 1
	and rbx, rcx
	push rbx

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_149__6 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_149 
	ret_func_149__6: ;; first number is function id, second number id call id

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump --
	je addr_or_10

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- read at index -- 
	pop rax ;; index
	mov rbx, 1 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov rbx, [rbx]
	;; create bit mask
	mov rcx, 1
	shl rcx, 8 ;; size
	sub rcx, 1
	and rbx, rcx
	push rbx

	;; -- character --
	mov rax, 0x5F 
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- jump --
	jmp addr_end_or_10

addr_or_10:
	;; -- number --
	mov rax, 1  
	push rax

addr_end_or_10:
	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_73

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_175__5 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_175 
	ret_func_175__5: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 16 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 8 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
	;; -- pop --
	add rsp, 0

addr_if_73:
	;; -- pop --
	add rsp, 8

	;; -- jump --
	jmp addr_else_3

addr_if_72:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_21 
	push rax

	;; -- number --
	mov rax, 6 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_140__8 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_140 
	ret_func_140__8: ;; first number is function id, second number id call id

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_74

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1368 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 40 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- number --
	mov rax, 0 
	push rax

addr_while_condition_33:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 6 
	push rax

	;; -- less --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 7
	and rax, 1
	pushf
	pop rbx
	shr rbx, 11
	and rbx, 1
	xor rax, rbx
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_while_end_33

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_171__9 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_171 
	ret_func_171__9: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- add --
	pop rbx
	pop rax
	add rax, rbx
	push rax

	;; -- assignment --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

	;; -- jump --
	jmp addr_while_condition_33

addr_while_end_33:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- read at index -- 
	pop rax ;; index
	mov rbx, 1 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov rbx, [rbx]
	;; create bit mask
	mov rcx, 1
	shl rcx, 8 ;; size
	sub rcx, 1
	and rbx, rcx
	push rbx

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_149__7 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_149 
	ret_func_149__7: ;; first number is function id, second number id call id

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump --
	je addr_or_11

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- read at index -- 
	pop rax ;; index
	mov rbx, 1 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov rbx, [rbx]
	;; create bit mask
	mov rcx, 1
	shl rcx, 8 ;; size
	sub rcx, 1
	and rbx, rcx
	push rbx

	;; -- character --
	mov rax, 0x5F 
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- jump --
	jmp addr_end_or_11

addr_or_11:
	;; -- number --
	mov rax, 1  
	push rax

addr_end_or_11:
	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_75

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_175__6 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_175 
	ret_func_175__6: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 16 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 8 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
	;; -- pop --
	add rsp, 0

addr_if_75:
	;; -- pop --
	add rsp, 8

	;; -- jump --
	jmp addr_else_3

addr_if_74:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_22 
	push rax

	;; -- number --
	mov rax, 6 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_140__9 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_140 
	ret_func_140__9: ;; first number is function id, second number id call id

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_76

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1376 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 40 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- number --
	mov rax, 0 
	push rax

addr_while_condition_34:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 6 
	push rax

	;; -- less --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 7
	and rax, 1
	pushf
	pop rbx
	shr rbx, 11
	and rbx, 1
	xor rax, rbx
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_while_end_34

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_171__10 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_171 
	ret_func_171__10: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- add --
	pop rbx
	pop rax
	add rax, rbx
	push rax

	;; -- assignment --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

	;; -- jump --
	jmp addr_while_condition_34

addr_while_end_34:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- read at index -- 
	pop rax ;; index
	mov rbx, 1 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov rbx, [rbx]
	;; create bit mask
	mov rcx, 1
	shl rcx, 8 ;; size
	sub rcx, 1
	and rbx, rcx
	push rbx

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_149__8 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_149 
	ret_func_149__8: ;; first number is function id, second number id call id

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump --
	je addr_or_12

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- read at index -- 
	pop rax ;; index
	mov rbx, 1 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov rbx, [rbx]
	;; create bit mask
	mov rcx, 1
	shl rcx, 8 ;; size
	sub rcx, 1
	and rbx, rcx
	push rbx

	;; -- character --
	mov rax, 0x5F 
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- jump --
	jmp addr_end_or_12

addr_or_12:
	;; -- number --
	mov rax, 1  
	push rax

addr_end_or_12:
	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_77

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_175__7 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_175 
	ret_func_175__7: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 16 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 8 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
	;; -- pop --
	add rsp, 0

addr_if_77:
	;; -- pop --
	add rsp, 8

	;; -- jump --
	jmp addr_else_3

addr_if_76:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_23 
	push rax

	;; -- number --
	mov rax, 6 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_140__10 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_140 
	ret_func_140__10: ;; first number is function id, second number id call id

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_78

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1384 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 40 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- number --
	mov rax, 0 
	push rax

addr_while_condition_35:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 6 
	push rax

	;; -- less --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 7
	and rax, 1
	pushf
	pop rbx
	shr rbx, 11
	and rbx, 1
	xor rax, rbx
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_while_end_35

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_171__11 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_171 
	ret_func_171__11: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- add --
	pop rbx
	pop rax
	add rax, rbx
	push rax

	;; -- assignment --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

	;; -- jump --
	jmp addr_while_condition_35

addr_while_end_35:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- read at index -- 
	pop rax ;; index
	mov rbx, 1 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov rbx, [rbx]
	;; create bit mask
	mov rcx, 1
	shl rcx, 8 ;; size
	sub rcx, 1
	and rbx, rcx
	push rbx

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_149__9 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_149 
	ret_func_149__9: ;; first number is function id, second number id call id

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump --
	je addr_or_13

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- read at index -- 
	pop rax ;; index
	mov rbx, 1 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov rbx, [rbx]
	;; create bit mask
	mov rcx, 1
	shl rcx, 8 ;; size
	sub rcx, 1
	and rbx, rcx
	push rbx

	;; -- character --
	mov rax, 0x5F 
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- jump --
	jmp addr_end_or_13

addr_or_13:
	;; -- number --
	mov rax, 1  
	push rax

addr_end_or_13:
	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_79

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_175__8 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_175 
	ret_func_175__8: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 16 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 8 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
	;; -- pop --
	add rsp, 0

addr_if_79:
	;; -- pop --
	add rsp, 8

	;; -- jump --
	jmp addr_else_3

addr_if_78:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_24 
	push rax

	;; -- number --
	mov rax, 5 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_140__11 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_140 
	ret_func_140__11: ;; first number is function id, second number id call id

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_80

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1440 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 40 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- number --
	mov rax, 0 
	push rax

addr_while_condition_36:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 5 
	push rax

	;; -- less --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 7
	and rax, 1
	pushf
	pop rbx
	shr rbx, 11
	and rbx, 1
	xor rax, rbx
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_while_end_36

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_171__12 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_171 
	ret_func_171__12: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- add --
	pop rbx
	pop rax
	add rax, rbx
	push rax

	;; -- assignment --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

	;; -- jump --
	jmp addr_while_condition_36

addr_while_end_36:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- read at index -- 
	pop rax ;; index
	mov rbx, 1 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov rbx, [rbx]
	;; create bit mask
	mov rcx, 1
	shl rcx, 8 ;; size
	sub rcx, 1
	and rbx, rcx
	push rbx

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_149__10 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_149 
	ret_func_149__10: ;; first number is function id, second number id call id

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump --
	je addr_or_14

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- read at index -- 
	pop rax ;; index
	mov rbx, 1 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov rbx, [rbx]
	;; create bit mask
	mov rcx, 1
	shl rcx, 8 ;; size
	sub rcx, 1
	and rbx, rcx
	push rbx

	;; -- character --
	mov rax, 0x5F 
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- jump --
	jmp addr_end_or_14

addr_or_14:
	;; -- number --
	mov rax, 1  
	push rax

addr_end_or_14:
	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_81

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_175__9 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_175 
	ret_func_175__9: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 16 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 8 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
	;; -- pop --
	add rsp, 0

addr_if_81:
	;; -- pop --
	add rsp, 8

	;; -- jump --
	jmp addr_else_3

addr_if_80:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_175__10 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_175 
	ret_func_175__10: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 8 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 8 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
	;; -- pop --
	add rsp, 0

addr_else_3:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 8 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- subtract --
	pop rbx
	pop rax
	sub rax, rbx
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 16 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 8 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 8 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_176:
	;; -- function --
	jmp addr_func_end_177 
addr_func_177:
	mov rax, rsp
	add rax, 8 * 1

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- number --
	mov rax, 48 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_136__17 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_136 
	ret_func_136__17: ;; first number is function id, second number id call id

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_171__13 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_171 
	ret_func_171__13: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 0 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 8 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 24 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 24 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 32 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 32 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1296 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 40 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- read at index -- 
	pop rax ;; index
	mov rbx, 1 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov rbx, [rbx]
	;; create bit mask
	mov rcx, 1
	shl rcx, 8 ;; size
	sub rcx, 1
	and rbx, rcx
	push rbx

	;; -- character --
	mov rax, 0x5C 
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_82

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_171__14 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_171 
	ret_func_171__14: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

addr_if_82:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_171__15 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_171 
	ret_func_171__15: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- read at index -- 
	pop rax ;; index
	mov rbx, 1 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov rbx, [rbx]
	;; create bit mask
	mov rcx, 1
	shl rcx, 8 ;; size
	sub rcx, 1
	and rbx, rcx
	push rbx

	;; -- character --
	mov rax, 0x27 
	push rax

	;; -- not equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	mov rbx, 1
	sub rbx, rax
	push rbx

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_83

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- string --
	mov rax, string_25 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_173__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_173 
	ret_func_173__0: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1424 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 40 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

addr_if_83:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_171__16 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_171 
	ret_func_171__16: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 8 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- subtract --
	pop rbx
	pop rax
	sub rax, rbx
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- subtract --
	pop rbx
	pop rax
	sub rax, rbx
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 16 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 8 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 8 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_177:
	;; -- function --
	jmp addr_func_end_178 
addr_func_178:
	mov rax, rsp
	add rax, 8 * 1

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- number --
	mov rax, 48 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_136__18 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_136 
	ret_func_136__18: ;; first number is function id, second number id call id

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_171__17 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_171 
	ret_func_171__17: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 0 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 8 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 24 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 24 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 32 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 32 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1304 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 40 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

addr_while_condition_37:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- read at index -- 
	pop rax ;; index
	mov rbx, 1 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov rbx, [rbx]
	;; create bit mask
	mov rcx, 1
	shl rcx, 8 ;; size
	sub rcx, 1
	and rbx, rcx
	push rbx

	;; -- character --
	mov rax, 0x22 
	push rax

	;; -- not equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	mov rbx, 1
	sub rbx, rax
	push rbx

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_and_14

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- read at index -- 
	pop rax ;; index
	mov rbx, 1 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov rbx, [rbx]
	;; create bit mask
	mov rcx, 1
	shl rcx, 8 ;; size
	sub rcx, 1
	and rbx, rcx
	push rbx

	;; -- character --
	mov rax, 0x00 
	push rax

	;; -- not equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	mov rbx, 1
	sub rbx, rax
	push rbx

	;; -- jump --
	jmp addr_end_and_14

addr_and_14:
	;; -- number --
	mov rax, 0  
	push rax

addr_end_and_14:
	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_while_end_37

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- read at index -- 
	pop rax ;; index
	mov rbx, 1 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov rbx, [rbx]
	;; create bit mask
	mov rcx, 1
	shl rcx, 8 ;; size
	sub rcx, 1
	and rbx, rcx
	push rbx

	;; -- character --
	mov rax, 0x5C 
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_84

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_171__18 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_171 
	ret_func_171__18: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

addr_if_84:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_171__19 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_171 
	ret_func_171__19: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

	;; -- jump --
	jmp addr_while_condition_37

addr_while_end_37:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- read at index -- 
	pop rax ;; index
	mov rbx, 1 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov rbx, [rbx]
	;; create bit mask
	mov rcx, 1
	shl rcx, 8 ;; size
	sub rcx, 1
	and rbx, rcx
	push rbx

	;; -- character --
	mov rax, 0x00 
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_85

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- string --
	mov rax, string_26 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_173__1 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_173 
	ret_func_173__1: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1416 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 40 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

addr_if_85:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_171__20 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_171 
	ret_func_171__20: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 8 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- subtract --
	pop rbx
	pop rax
	sub rax, rbx
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- subtract --
	pop rbx
	pop rax
	sub rax, rbx
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 16 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 8 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 8 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_178:
	;; -- function --
	jmp addr_func_end_179 
addr_func_179:
	mov rax, rsp
	add rax, 8 * 1

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- number --
	mov rax, 48 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_136__19 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_136 
	ret_func_136__19: ;; first number is function id, second number id call id

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 0 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 8 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 24 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 24 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 32 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 32 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- read at index -- 
	pop rax ;; index
	mov rbx, 1 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov rbx, [rbx]
	;; create bit mask
	mov rcx, 1
	shl rcx, 8 ;; size
	sub rcx, 1
	and rbx, rcx
	push rbx

	;; -- character --
	mov rax, 0x2B 
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_86

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1128 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 40 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_171__21 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_171 
	ret_func_171__21: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

	;; -- jump --
	jmp addr_else_4

addr_if_86:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- read at index -- 
	pop rax ;; index
	mov rbx, 1 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov rbx, [rbx]
	;; create bit mask
	mov rcx, 1
	shl rcx, 8 ;; size
	sub rcx, 1
	and rbx, rcx
	push rbx

	;; -- character --
	mov rax, 0x2D 
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_87

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_171__22 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_171 
	ret_func_171__22: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1136 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 40 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- read at index -- 
	pop rax ;; index
	mov rbx, 1 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov rbx, [rbx]
	;; create bit mask
	mov rcx, 1
	shl rcx, 8 ;; size
	sub rcx, 1
	and rbx, rcx
	push rbx

	;; -- character --
	mov rax, 0x3E 
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_88

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_171__23 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_171 
	ret_func_171__23: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1240 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 40 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

addr_if_88:
	;; -- pop --
	add rsp, 0

	;; -- jump --
	jmp addr_else_4

addr_if_87:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- read at index -- 
	pop rax ;; index
	mov rbx, 1 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov rbx, [rbx]
	;; create bit mask
	mov rcx, 1
	shl rcx, 8 ;; size
	sub rcx, 1
	and rbx, rcx
	push rbx

	;; -- character --
	mov rax, 0x2A 
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_89

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_171__24 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_171 
	ret_func_171__24: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1432 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 40 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

	;; -- jump --
	jmp addr_else_4

addr_if_89:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- read at index -- 
	pop rax ;; index
	mov rbx, 1 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov rbx, [rbx]
	;; create bit mask
	mov rcx, 1
	shl rcx, 8 ;; size
	sub rcx, 1
	and rbx, rcx
	push rbx

	;; -- character --
	mov rax, 0x3B 
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_90

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_171__25 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_171 
	ret_func_171__25: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1312 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 40 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

	;; -- jump --
	jmp addr_else_4

addr_if_90:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- read at index -- 
	pop rax ;; index
	mov rbx, 1 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov rbx, [rbx]
	;; create bit mask
	mov rcx, 1
	shl rcx, 8 ;; size
	sub rcx, 1
	and rbx, rcx
	push rbx

	;; -- character --
	mov rax, 0x28 
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_91

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_171__26 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_171 
	ret_func_171__26: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1248 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 40 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

	;; -- jump --
	jmp addr_else_4

addr_if_91:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- read at index -- 
	pop rax ;; index
	mov rbx, 1 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov rbx, [rbx]
	;; create bit mask
	mov rcx, 1
	shl rcx, 8 ;; size
	sub rcx, 1
	and rbx, rcx
	push rbx

	;; -- character --
	mov rax, 0x29 
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_92

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_171__27 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_171 
	ret_func_171__27: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1256 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 40 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

	;; -- jump --
	jmp addr_else_4

addr_if_92:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- read at index -- 
	pop rax ;; index
	mov rbx, 1 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov rbx, [rbx]
	;; create bit mask
	mov rcx, 1
	shl rcx, 8 ;; size
	sub rcx, 1
	and rbx, rcx
	push rbx

	;; -- character --
	mov rax, 0x5B 
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_93

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_171__28 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_171 
	ret_func_171__28: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1264 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 40 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

	;; -- jump --
	jmp addr_else_4

addr_if_93:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- read at index -- 
	pop rax ;; index
	mov rbx, 1 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov rbx, [rbx]
	;; create bit mask
	mov rcx, 1
	shl rcx, 8 ;; size
	sub rcx, 1
	and rbx, rcx
	push rbx

	;; -- character --
	mov rax, 0x5D 
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_94

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_171__29 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_171 
	ret_func_171__29: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1272 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 40 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

	;; -- jump --
	jmp addr_else_4

addr_if_94:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- read at index -- 
	pop rax ;; index
	mov rbx, 1 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov rbx, [rbx]
	;; create bit mask
	mov rcx, 1
	shl rcx, 8 ;; size
	sub rcx, 1
	and rbx, rcx
	push rbx

	;; -- character --
	mov rax, 0x7B 
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_95

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_171__30 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_171 
	ret_func_171__30: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1280 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 40 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

	;; -- jump --
	jmp addr_else_4

addr_if_95:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- read at index -- 
	pop rax ;; index
	mov rbx, 1 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov rbx, [rbx]
	;; create bit mask
	mov rcx, 1
	shl rcx, 8 ;; size
	sub rcx, 1
	and rbx, rcx
	push rbx

	;; -- character --
	mov rax, 0x7D 
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_96

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_171__31 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_171 
	ret_func_171__31: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1288 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 40 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

	;; -- jump --
	jmp addr_else_4

addr_if_96:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- read at index -- 
	pop rax ;; index
	mov rbx, 1 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov rbx, [rbx]
	;; create bit mask
	mov rcx, 1
	shl rcx, 8 ;; size
	sub rcx, 1
	and rbx, rcx
	push rbx

	;; -- character --
	mov rax, 0x26 
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_97

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_171__32 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_171 
	ret_func_171__32: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1152 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 40 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- read at index -- 
	pop rax ;; index
	mov rbx, 1 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov rbx, [rbx]
	;; create bit mask
	mov rcx, 1
	shl rcx, 8 ;; size
	sub rcx, 1
	and rbx, rcx
	push rbx

	;; -- character --
	mov rax, 0x26 
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_98

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_171__33 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_171 
	ret_func_171__33: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1160 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 40 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

addr_if_98:
	;; -- pop --
	add rsp, 0

	;; -- jump --
	jmp addr_else_4

addr_if_97:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- read at index -- 
	pop rax ;; index
	mov rbx, 1 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov rbx, [rbx]
	;; create bit mask
	mov rcx, 1
	shl rcx, 8 ;; size
	sub rcx, 1
	and rbx, rcx
	push rbx

	;; -- character --
	mov rax, 0x7C 
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_99

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_171__34 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_171 
	ret_func_171__34: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1168 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 40 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- read at index -- 
	pop rax ;; index
	mov rbx, 1 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov rbx, [rbx]
	;; create bit mask
	mov rcx, 1
	shl rcx, 8 ;; size
	sub rcx, 1
	and rbx, rcx
	push rbx

	;; -- character --
	mov rax, 0x7C 
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_100

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_171__35 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_171 
	ret_func_171__35: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1176 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 40 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

addr_if_100:
	;; -- pop --
	add rsp, 0

	;; -- jump --
	jmp addr_else_4

addr_if_99:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- read at index -- 
	pop rax ;; index
	mov rbx, 1 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov rbx, [rbx]
	;; create bit mask
	mov rcx, 1
	shl rcx, 8 ;; size
	sub rcx, 1
	and rbx, rcx
	push rbx

	;; -- character --
	mov rax, 0x21 
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_101

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_171__36 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_171 
	ret_func_171__36: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1224 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 40 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- read at index -- 
	pop rax ;; index
	mov rbx, 1 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov rbx, [rbx]
	;; create bit mask
	mov rcx, 1
	shl rcx, 8 ;; size
	sub rcx, 1
	and rbx, rcx
	push rbx

	;; -- character --
	mov rax, 0x3D 
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_102

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_171__37 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_171 
	ret_func_171__37: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1232 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 40 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

addr_if_102:
	;; -- pop --
	add rsp, 0

	;; -- jump --
	jmp addr_else_4

addr_if_101:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- read at index -- 
	pop rax ;; index
	mov rbx, 1 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov rbx, [rbx]
	;; create bit mask
	mov rcx, 1
	shl rcx, 8 ;; size
	sub rcx, 1
	and rbx, rcx
	push rbx

	;; -- character --
	mov rax, 0x3C 
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_103

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_171__38 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_171 
	ret_func_171__38: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1184 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 40 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- read at index -- 
	pop rax ;; index
	mov rbx, 1 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov rbx, [rbx]
	;; create bit mask
	mov rcx, 1
	shl rcx, 8 ;; size
	sub rcx, 1
	and rbx, rcx
	push rbx

	;; -- character --
	mov rax, 0x3D 
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_104

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_171__39 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_171 
	ret_func_171__39: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1200 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 40 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

	;; -- jump --
	jmp addr_else_5

addr_if_104:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- read at index -- 
	pop rax ;; index
	mov rbx, 1 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov rbx, [rbx]
	;; create bit mask
	mov rcx, 1
	shl rcx, 8 ;; size
	sub rcx, 1
	and rbx, rcx
	push rbx

	;; -- character --
	mov rax, 0x3C 
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_105

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_171__40 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_171 
	ret_func_171__40: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1448 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 40 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

addr_if_105:
addr_else_5:
	;; -- pop --
	add rsp, 0

	;; -- jump --
	jmp addr_else_4

addr_if_103:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- read at index -- 
	pop rax ;; index
	mov rbx, 1 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov rbx, [rbx]
	;; create bit mask
	mov rcx, 1
	shl rcx, 8 ;; size
	sub rcx, 1
	and rbx, rcx
	push rbx

	;; -- character --
	mov rax, 0x3E 
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_106

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_171__41 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_171 
	ret_func_171__41: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1192 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 40 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- read at index -- 
	pop rax ;; index
	mov rbx, 1 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov rbx, [rbx]
	;; create bit mask
	mov rcx, 1
	shl rcx, 8 ;; size
	sub rcx, 1
	and rbx, rcx
	push rbx

	;; -- character --
	mov rax, 0x3D 
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_107

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_171__42 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_171 
	ret_func_171__42: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1208 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 40 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

	;; -- jump --
	jmp addr_else_6

addr_if_107:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- read at index -- 
	pop rax ;; index
	mov rbx, 1 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov rbx, [rbx]
	;; create bit mask
	mov rcx, 1
	shl rcx, 8 ;; size
	sub rcx, 1
	and rbx, rcx
	push rbx

	;; -- character --
	mov rax, 0x3E 
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_108

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_171__43 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_171 
	ret_func_171__43: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1456 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 40 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

addr_if_108:
addr_else_6:
	;; -- pop --
	add rsp, 0

	;; -- jump --
	jmp addr_else_4

addr_if_106:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- read at index -- 
	pop rax ;; index
	mov rbx, 1 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov rbx, [rbx]
	;; create bit mask
	mov rcx, 1
	shl rcx, 8 ;; size
	sub rcx, 1
	and rbx, rcx
	push rbx

	;; -- character --
	mov rax, 0x3D 
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_109

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_171__44 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_171 
	ret_func_171__44: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1144 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 40 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- read at index -- 
	pop rax ;; index
	mov rbx, 1 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov rbx, [rbx]
	;; create bit mask
	mov rcx, 1
	shl rcx, 8 ;; size
	sub rcx, 1
	and rbx, rcx
	push rbx

	;; -- character --
	mov rax, 0x3D 
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_110

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_171__45 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_171 
	ret_func_171__45: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1216 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 40 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

addr_if_110:
	;; -- pop --
	add rsp, 0

	;; -- jump --
	jmp addr_else_4

addr_if_109:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- read at index -- 
	pop rax ;; index
	mov rbx, 1 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov rbx, [rbx]
	;; create bit mask
	mov rcx, 1
	shl rcx, 8 ;; size
	sub rcx, 1
	and rbx, rcx
	push rbx

	;; -- character --
	mov rax, 0x2C 
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_111

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_171__46 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_171 
	ret_func_171__46: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1392 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 40 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

	;; -- jump --
	jmp addr_else_4

addr_if_111:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- read at index -- 
	pop rax ;; index
	mov rbx, 1 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov rbx, [rbx]
	;; create bit mask
	mov rcx, 1
	shl rcx, 8 ;; size
	sub rcx, 1
	and rbx, rcx
	push rbx

	;; -- character --
	mov rax, 0x2E 
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_112

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_171__47 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_171 
	ret_func_171__47: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1400 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 40 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

	;; -- jump --
	jmp addr_else_4

addr_if_112:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- read at index -- 
	pop rax ;; index
	mov rbx, 1 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov rbx, [rbx]
	;; create bit mask
	mov rcx, 1
	shl rcx, 8 ;; size
	sub rcx, 1
	and rbx, rcx
	push rbx

	;; -- character --
	mov rax, 0x00 
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_113

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1416 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 40 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

	;; -- jump --
	jmp addr_else_4

addr_if_113:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- string --
	mov rax, string_27 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_173__2 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_173 
	ret_func_173__2: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1424 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 40 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

addr_else_4:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 8 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- subtract --
	pop rbx
	pop rax
	sub rax, rbx
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 16 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 8 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 8 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_179:
	;; -- function --
	jmp addr_func_end_180 
addr_func_180:
	mov rax, rsp
	add rax, 8 * 1

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

addr_while_condition_38:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- read at index -- 
	pop rax ;; index
	mov rbx, 1 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov rbx, [rbx]
	;; create bit mask
	mov rcx, 1
	shl rcx, 8 ;; size
	sub rcx, 1
	and rbx, rcx
	push rbx

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_150__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_150 
	ret_func_150__0: ;; first number is function id, second number id call id

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_while_end_38

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_171__48 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_171 
	ret_func_171__48: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- read at index -- 
	pop rax ;; index
	mov rbx, 1 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov rbx, [rbx]
	;; create bit mask
	mov rcx, 1
	shl rcx, 8 ;; size
	sub rcx, 1
	and rbx, rcx
	push rbx

	;; -- character --
	mov rax, 0x2F 
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_and_15

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- read at index -- 
	pop rax ;; index
	mov rbx, 1 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov rbx, [rbx]
	;; create bit mask
	mov rcx, 1
	shl rcx, 8 ;; size
	sub rcx, 1
	and rbx, rcx
	push rbx

	;; -- character --
	mov rax, 0x2F 
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- jump --
	jmp addr_end_and_15

addr_and_15:
	;; -- number --
	mov rax, 0  
	push rax

addr_end_and_15:
	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_114

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_171__49 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_171 
	ret_func_171__49: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_171__50 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_171 
	ret_func_171__50: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_172__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_172 
	ret_func_172__0: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

addr_if_114:
	;; -- pop --
	add rsp, 0

	;; -- jump --
	jmp addr_while_condition_38

addr_while_end_38:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- read at index -- 
	pop rax ;; index
	mov rbx, 1 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov rbx, [rbx]
	;; create bit mask
	mov rcx, 1
	shl rcx, 8 ;; size
	sub rcx, 1
	and rbx, rcx
	push rbx

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_148__3 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_148 
	ret_func_148__3: ;; first number is function id, second number id call id

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_115

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_174__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_174 
	ret_func_174__0: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 8 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
	;; -- pop --
	add rsp, 0

addr_if_115:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- read at index -- 
	pop rax ;; index
	mov rbx, 1 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov rbx, [rbx]
	;; create bit mask
	mov rcx, 1
	shl rcx, 8 ;; size
	sub rcx, 1
	and rbx, rcx
	push rbx

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_147__1 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_147 
	ret_func_147__1: ;; first number is function id, second number id call id

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump --
	je addr_or_15

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- read at index -- 
	pop rax ;; index
	mov rbx, 1 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov rbx, [rbx]
	;; create bit mask
	mov rcx, 1
	shl rcx, 8 ;; size
	sub rcx, 1
	and rbx, rcx
	push rbx

	;; -- character --
	mov rax, 0x5F 
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- jump --
	jmp addr_end_or_15

addr_or_15:
	;; -- number --
	mov rax, 1  
	push rax

addr_end_or_15:
	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_116

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_176__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_176 
	ret_func_176__0: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 8 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
	;; -- pop --
	add rsp, 0

addr_if_116:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- read at index -- 
	pop rax ;; index
	mov rbx, 1 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov rbx, [rbx]
	;; create bit mask
	mov rcx, 1
	shl rcx, 8 ;; size
	sub rcx, 1
	and rbx, rcx
	push rbx

	;; -- character --
	mov rax, 0x27 
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_117

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_177__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_177 
	ret_func_177__0: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 8 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
	;; -- pop --
	add rsp, 0

addr_if_117:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- read at index -- 
	pop rax ;; index
	mov rbx, 1 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov rbx, [rbx]
	;; create bit mask
	mov rcx, 1
	shl rcx, 8 ;; size
	sub rcx, 1
	and rbx, rcx
	push rbx

	;; -- character --
	mov rax, 0x22 
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_118

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_178__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_178 
	ret_func_178__0: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 8 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
	;; -- pop --
	add rsp, 0

addr_if_118:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_179__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_179 
	ret_func_179__0: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 8 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_180:
	;; -- function --
	jmp addr_func_end_181 
addr_func_181:
	mov rax, rsp
	add rax, 8 * 6

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- number --
	mov rax, 41 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_136__20 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_136 
	ret_func_136__20: ;; first number is function id, second number id call id

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 64 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 0 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 64 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 8 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 64 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 16 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 64 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 24 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 64 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 32 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 1
	shl r9, 8 ;; size
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 64 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 48 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 33 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 64 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 8 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 48 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_181:
	;; -- function --
	jmp addr_func_end_182 
addr_func_182:
	mov rax, rsp
	add rax, 8 * 0

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- number --
	mov rax, 24 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_136__21 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_136 
	ret_func_136__21: ;; first number is function id, second number id call id

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 0 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 8 
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 8 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 8 
	push rax

	;; -- number --
	mov rax, 8 
	push rax

	;; -- mult --
	pop rbx
	pop rax
	mul rbx
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_136__22 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_136 
	ret_func_136__22: ;; first number is function id, second number id call id

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 16 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 8 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 0 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_182:
	;; -- function --
	jmp addr_func_end_183 
addr_func_183:
	mov rax, rsp
	add rax, 8 * 2

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- write at index -- 
	pop rcx ;; value
	pop rax ;; index
	mov rbx, 8 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov r8, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rcx, r9
	not r9
	and r8, r9
	add r8, rcx
	mov [rbx], r8
	push rcx

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- add --
	pop rbx
	pop rax
	add rax, rbx
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 0 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 8 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_119

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 8 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 2 
	push rax

	;; -- mult --
	pop rbx
	pop rax
	mul rbx
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 8 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 8 
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 8 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- mult --
	pop rbx
	pop rax
	mul rbx
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_138__2 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_138 
	ret_func_138__2: ;; first number is function id, second number id call id

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 16 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

addr_if_119:
	;; -- return --
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rax
 mov [basestack + 8 * 1], rax
	;; -- pop parameters --
	add rsp, 16 
	;; -- return empty --
	push 0
	;; -- jump to return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_183:
	;; -- function --
	jmp addr_func_end_184 
addr_func_184:
	mov rax, rsp
	add rax, 8 * 0

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- number --
	mov rax, 32 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_136__23 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_136 
	ret_func_136__23: ;; first number is function id, second number id call id

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 0 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 8 
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 8 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 16 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 8 
	push rax

	;; -- number --
	mov rax, 8 
	push rax

	;; -- mult --
	pop rbx
	pop rax
	mul rbx
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_136__24 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_136 
	ret_func_136__24: ;; first number is function id, second number id call id

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 24 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 8 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 0 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_184:
	;; -- function --
	jmp addr_func_end_185 
addr_func_185:
	mov rax, rsp
	add rax, 8 * 1

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_137__7 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_137 
	ret_func_137__7: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_137__8 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_137 
	ret_func_137__8: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- return --
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rax
 mov [basestack + 8 * 1], rax
	;; -- pop parameters --
	add rsp, 8 
	;; -- return empty --
	push 0
	;; -- jump to return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_185:
	;; -- function --
	jmp addr_func_end_186 
addr_func_186:
	mov rax, rsp
	add rax, 8 * 1

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- number --
	mov rax, 0 
	push rax

addr_while_condition_39:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- less --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 7
	and rax, 1
	pushf
	pop rbx
	shr rbx, 11
	and rbx, 1
	xor rax, rbx
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_while_end_39

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 24 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read at index -- 
	pop rax ;; index
	mov rbx, 8 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov rbx, [rbx]
	;; create bit mask
	mov rcx, 0
	sub rcx, 1
	and rbx, rcx
	push rbx

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_185__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_185 
	ret_func_185__0: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- add --
	pop rbx
	pop rax
	add rax, rbx
	push rax

	;; -- assignment --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

	;; -- jump --
	jmp addr_while_condition_39

addr_while_end_39:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 24 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_137__9 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_137 
	ret_func_137__9: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_137__10 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_137 
	ret_func_137__10: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- return --
	;; -- pop local variables --
	add rsp, 8 
	;; -- restore stackframe -- 
	pop rax
 mov [basestack + 8 * 1], rax
	;; -- pop parameters --
	add rsp, 8 
	;; -- return empty --
	push 0
	;; -- jump to return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_186:
	;; -- function --
	jmp addr_func_end_187 
addr_func_187:
	mov rax, rsp
	add rax, 8 * 3

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- number --
	mov rax, 24 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_136__25 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_136 
	ret_func_136__25: ;; first number is function id, second number id call id

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 0 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 8 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 16 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 8 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 24 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_187:
	;; -- function --
	jmp addr_func_end_188 
addr_func_188:
	mov rax, rsp
	add rax, 8 * 4

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 24 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_187__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_187 
	ret_func_187__0: ;; first number is function id, second number id call id

	;; -- write at index -- 
	pop rcx ;; value
	pop rax ;; index
	mov rbx, 8 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov r8, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rcx, r9
	not r9
	and r8, r9
	add r8, rcx
	mov [rbx], r8
	push rcx

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- add --
	pop rbx
	pop rax
	add rax, rbx
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 0 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- add --
	pop rbx
	pop rax
	add rax, rbx
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 16 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 8 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_120

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 8 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 2 
	push rax

	;; -- mult --
	pop rbx
	pop rax
	mul rbx
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 8 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 24 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 8 
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 8 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- mult --
	pop rbx
	pop rax
	mul rbx
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_138__3 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_138 
	ret_func_138__3: ;; first number is function id, second number id call id

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 24 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

addr_if_120:
	;; -- return --
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rax
 mov [basestack + 8 * 1], rax
	;; -- pop parameters --
	add rsp, 32 
	;; -- return empty --
	push 0
	;; -- jump to return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_188:
	;; -- function --
	jmp addr_func_end_189 
addr_func_189:
	mov rax, rsp
	add rax, 8 * 3

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- number --
	mov rax, 0 
	push rax

addr_while_condition_40:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- less --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 7
	and rax, 1
	pushf
	pop rbx
	shr rbx, 11
	and rbx, 1
	xor rax, rbx
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_while_end_40

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 24 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read at index -- 
	pop rax ;; index
	mov rbx, 8 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov rbx, [rbx]
	;; create bit mask
	mov rcx, 0
	sub rcx, 1
	and rbx, rcx
	push rbx

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- add --
	pop rbx
	pop rax
	add rax, rbx
	push rax

	;; -- assignment --
	mov rax, [basestack + 8 * 1]
	mov rbx, 40 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 48 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_139__18 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_139 
	ret_func_139__18: ;; first number is function id, second number id call id

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_and_16

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 48 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_140__12 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_140 
	ret_func_140__12: ;; first number is function id, second number id call id

	;; -- jump --
	jmp addr_end_and_16

addr_and_16:
	;; -- number --
	mov rax, 0  
	push rax

addr_end_and_16:
	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_121

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 48 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 16 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 24 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
	;; -- pop --
	add rsp, 0

addr_if_121:
	;; -- pop --
	add rsp, 8

	;; -- jump --
	jmp addr_while_condition_40

addr_while_end_40:
	;; -- number --
	mov rax, 0 
	push rax

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 8 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 24 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_189:
	;; -- function --
	jmp addr_func_end_190 
addr_func_190:
	mov rax, rsp
	add rax, 8 * 1

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_137__11 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_137 
	ret_func_137__11: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- not equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	mov rbx, 1
	sub rbx, rax
	push rbx

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_122

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_186__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_186 
	ret_func_186__0: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

addr_if_122:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 24 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- not equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	mov rbx, 1
	sub rbx, rax
	push rbx

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_123

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 24 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_137__12 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_137 
	ret_func_137__12: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

addr_if_123:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_137__13 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_137 
	ret_func_137__13: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- return --
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rax
 mov [basestack + 8 * 1], rax
	;; -- pop parameters --
	add rsp, 8 
	;; -- return empty --
	push 0
	;; -- jump to return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_190:
	;; -- function --
	jmp addr_func_end_191 
addr_func_191:
	mov rax, rsp
	add rax, 8 * 1

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- number --
	mov rax, 0 
	push rax

addr_while_condition_41:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- less --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 7
	and rax, 1
	pushf
	pop rbx
	shr rbx, 11
	and rbx, 1
	xor rax, rbx
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_while_end_41

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read at index -- 
	pop rax ;; index
	mov rbx, 8 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov rbx, [rbx]
	;; create bit mask
	mov rcx, 0
	sub rcx, 1
	and rbx, rcx
	push rbx

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_190__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_190 
	ret_func_190__0: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- add --
	pop rbx
	pop rax
	add rax, rbx
	push rax

	;; -- assignment --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

	;; -- jump --
	jmp addr_while_condition_41

addr_while_end_41:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_137__14 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_137 
	ret_func_137__14: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_137__15 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_137 
	ret_func_137__15: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- return --
	;; -- pop local variables --
	add rsp, 8 
	;; -- restore stackframe -- 
	pop rax
 mov [basestack + 8 * 1], rax
	;; -- pop parameters --
	add rsp, 8 
	;; -- return empty --
	push 0
	;; -- jump to return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_191:
	;; -- function --
	jmp addr_func_end_192 
addr_func_192:
	mov rax, rsp
	add rax, 8 * 4

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- number --
	mov rax, 32 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_136__26 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_136 
	ret_func_136__26: ;; first number is function id, second number id call id

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 48 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 0 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 48 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 8 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 48 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 16 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 48 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 24 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 48 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 8 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 32 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_192:
	;; -- function --
	jmp addr_func_end_193 
addr_func_193:
	mov rax, rsp
	add rax, 8 * 1

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_137__16 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_137 
	ret_func_137__16: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_137__17 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_137 
	ret_func_137__17: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- return --
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rax
 mov [basestack + 8 * 1], rax
	;; -- pop parameters --
	add rsp, 8 
	;; -- return empty --
	push 0
	;; -- jump to return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_193:
	;; -- function --
	jmp addr_func_end_194 
addr_func_194:
	mov rax, rsp
	add rax, 8 * 0

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- number --
	mov rax, 24 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_136__27 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_136 
	ret_func_136__27: ;; first number is function id, second number id call id

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 0 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 8 
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 8 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 8 
	push rax

	;; -- number --
	mov rax, 8 
	push rax

	;; -- mult --
	pop rbx
	pop rax
	mul rbx
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_136__28 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_136 
	ret_func_136__28: ;; first number is function id, second number id call id

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 16 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 8 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 0 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_194:
	;; -- function --
	jmp addr_func_end_195 
addr_func_195:
	mov rax, rsp
	add rax, 8 * 1

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- number --
	mov rax, 0 
	push rax

addr_while_condition_42:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- less --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 7
	and rax, 1
	pushf
	pop rbx
	shr rbx, 11
	and rbx, 1
	xor rax, rbx
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_while_end_42

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read at index -- 
	pop rax ;; index
	mov rbx, 8 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov rbx, [rbx]
	;; create bit mask
	mov rcx, 0
	sub rcx, 1
	and rbx, rcx
	push rbx

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_193__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_193 
	ret_func_193__0: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- add --
	pop rbx
	pop rax
	add rax, rbx
	push rax

	;; -- assignment --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

	;; -- jump --
	jmp addr_while_condition_42

addr_while_end_42:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_137__18 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_137 
	ret_func_137__18: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_137__19 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_137 
	ret_func_137__19: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- return --
	;; -- pop local variables --
	add rsp, 8 
	;; -- restore stackframe -- 
	pop rax
 mov [basestack + 8 * 1], rax
	;; -- pop parameters --
	add rsp, 8 
	;; -- return empty --
	push 0
	;; -- jump to return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_195:
	;; -- function --
	jmp addr_func_end_196 
addr_func_196:
	mov rax, rsp
	add rax, 8 * 5

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_192__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_192 
	ret_func_192__0: ;; first number is function id, second number id call id

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 56 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- write at index -- 
	pop rcx ;; value
	pop rax ;; index
	mov rbx, 8 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov r8, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rcx, r9
	not r9
	and r8, r9
	add r8, rcx
	mov [rbx], r8
	push rcx

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- add --
	pop rbx
	pop rax
	add rax, rbx
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 0 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 8 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_124

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 8 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 2 
	push rax

	;; -- mult --
	pop rbx
	pop rax
	mul rbx
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 8 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 8 
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 8 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- mult --
	pop rbx
	pop rax
	mul rbx
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_138__4 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_138 
	ret_func_138__4: ;; first number is function id, second number id call id

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 16 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

addr_if_124:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 56 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 8 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 40 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_196:
	;; -- function --
	jmp addr_func_end_197 
addr_func_197:
	mov rax, rsp
	add rax, 8 * 3

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- number --
	mov rax, 24 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_136__29 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_136 
	ret_func_136__29: ;; first number is function id, second number id call id

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 0 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 8 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 16 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 8 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 24 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_197:
	;; -- function --
	jmp addr_func_end_198 
addr_func_198:
	mov rax, rsp
	add rax, 8 * 1

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_137__20 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_137 
	ret_func_137__20: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_137__21 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_137 
	ret_func_137__21: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- return --
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rax
 mov [basestack + 8 * 1], rax
	;; -- pop parameters --
	add rsp, 8 
	;; -- return empty --
	push 0
	;; -- jump to return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_198:
	;; -- function --
	jmp addr_func_end_199 
addr_func_199:
	mov rax, rsp
	add rax, 8 * 0

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- number --
	mov rax, 24 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_136__30 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_136 
	ret_func_136__30: ;; first number is function id, second number id call id

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 0 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 8 
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 8 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 8 
	push rax

	;; -- number --
	mov rax, 8 
	push rax

	;; -- mult --
	pop rbx
	pop rax
	mul rbx
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_136__31 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_136 
	ret_func_136__31: ;; first number is function id, second number id call id

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 16 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 8 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 0 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_199:
	;; -- function --
	jmp addr_func_end_200 
addr_func_200:
	mov rax, rsp
	add rax, 8 * 1

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- number --
	mov rax, 0 
	push rax

addr_while_condition_43:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- less --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 7
	and rax, 1
	pushf
	pop rbx
	shr rbx, 11
	and rbx, 1
	xor rax, rbx
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_while_end_43

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read at index -- 
	pop rax ;; index
	mov rbx, 8 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov rbx, [rbx]
	;; create bit mask
	mov rcx, 0
	sub rcx, 1
	and rbx, rcx
	push rbx

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_198__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_198 
	ret_func_198__0: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- add --
	pop rbx
	pop rax
	add rax, rbx
	push rax

	;; -- assignment --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

	;; -- jump --
	jmp addr_while_condition_43

addr_while_end_43:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_137__22 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_137 
	ret_func_137__22: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_137__23 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_137 
	ret_func_137__23: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- return --
	;; -- pop local variables --
	add rsp, 8 
	;; -- restore stackframe -- 
	pop rax
 mov [basestack + 8 * 1], rax
	;; -- pop parameters --
	add rsp, 8 
	;; -- return empty --
	push 0
	;; -- jump to return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_200:
	;; -- function --
	jmp addr_func_end_201 
addr_func_201:
	mov rax, rsp
	add rax, 8 * 4

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_197__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_197 
	ret_func_197__0: ;; first number is function id, second number id call id

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 48 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- write at index -- 
	pop rcx ;; value
	pop rax ;; index
	mov rbx, 8 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov r8, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rcx, r9
	not r9
	and r8, r9
	add r8, rcx
	mov [rbx], r8
	push rcx

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- add --
	pop rbx
	pop rax
	add rax, rbx
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 0 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 8 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_125

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 8 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 2 
	push rax

	;; -- mult --
	pop rbx
	pop rax
	mul rbx
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 8 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 8 
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 8 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- mult --
	pop rbx
	pop rax
	mul rbx
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_138__5 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_138 
	ret_func_138__5: ;; first number is function id, second number id call id

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 16 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

addr_if_125:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 48 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 8 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 32 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_201:
	;; -- function --
	jmp addr_func_end_202 
addr_func_202:
	mov rax, rsp
	add rax, 8 * 4

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- number --
	mov rax, 40 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_136__32 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_136 
	ret_func_136__32: ;; first number is function id, second number id call id

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 48 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 0 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 48 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 24 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 48 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 32 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 48 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 8 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 48 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 16 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 48 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 8 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 32 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_202:
	;; -- function --
	jmp addr_func_end_203 
addr_func_203:
	mov rax, rsp
	add rax, 8 * 1

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_137__24 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_137 
	ret_func_137__24: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_195__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_195 
	ret_func_195__0: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_137__25 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_137 
	ret_func_137__25: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- return --
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rax
 mov [basestack + 8 * 1], rax
	;; -- pop parameters --
	add rsp, 8 
	;; -- return empty --
	push 0
	;; -- jump to return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_203:
	;; -- function --
	jmp addr_func_end_204 
addr_func_204:
	mov rax, rsp
	add rax, 8 * 0

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- number --
	mov rax, 24 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_136__33 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_136 
	ret_func_136__33: ;; first number is function id, second number id call id

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 0 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 8 
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 8 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 8 
	push rax

	;; -- number --
	mov rax, 8 
	push rax

	;; -- mult --
	pop rbx
	pop rax
	mul rbx
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_136__34 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_136 
	ret_func_136__34: ;; first number is function id, second number id call id

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 16 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 8 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 0 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_204:
	;; -- function --
	jmp addr_func_end_205 
addr_func_205:
	mov rax, rsp
	add rax, 8 * 1

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- number --
	mov rax, 0 
	push rax

addr_while_condition_44:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- less --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 7
	and rax, 1
	pushf
	pop rbx
	shr rbx, 11
	and rbx, 1
	xor rax, rbx
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_while_end_44

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read at index -- 
	pop rax ;; index
	mov rbx, 8 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov rbx, [rbx]
	;; create bit mask
	mov rcx, 0
	sub rcx, 1
	and rbx, rcx
	push rbx

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_203__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_203 
	ret_func_203__0: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- add --
	pop rbx
	pop rax
	add rax, rbx
	push rax

	;; -- assignment --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

	;; -- jump --
	jmp addr_while_condition_44

addr_while_end_44:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_137__26 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_137 
	ret_func_137__26: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_137__27 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_137 
	ret_func_137__27: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- return --
	;; -- pop local variables --
	add rsp, 8 
	;; -- restore stackframe -- 
	pop rax
 mov [basestack + 8 * 1], rax
	;; -- pop parameters --
	add rsp, 8 
	;; -- return empty --
	push 0
	;; -- jump to return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_205:
	;; -- function --
	jmp addr_func_end_206 
addr_func_206:
	mov rax, rsp
	add rax, 8 * 5

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_202__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_202 
	ret_func_202__0: ;; first number is function id, second number id call id

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 56 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- write at index -- 
	pop rcx ;; value
	pop rax ;; index
	mov rbx, 8 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov r8, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rcx, r9
	not r9
	and r8, r9
	add r8, rcx
	mov [rbx], r8
	push rcx

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- add --
	pop rbx
	pop rax
	add rax, rbx
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 0 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 8 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_126

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 8 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 2 
	push rax

	;; -- mult --
	pop rbx
	pop rax
	mul rbx
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 8 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 8 
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 8 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- mult --
	pop rbx
	pop rax
	mul rbx
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_138__6 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_138 
	ret_func_138__6: ;; first number is function id, second number id call id

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 16 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

addr_if_126:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 56 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 8 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 40 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_206:
	;; -- function --
	jmp addr_func_end_207 
addr_func_207:
	mov rax, rsp
	add rax, 8 * 0

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- number --
	mov rax, 24 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_136__35 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_136 
	ret_func_136__35: ;; first number is function id, second number id call id

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 0 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 8 
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 8 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 8 
	push rax

	;; -- number --
	mov rax, 8 
	push rax

	;; -- mult --
	pop rbx
	pop rax
	mul rbx
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_136__36 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_136 
	ret_func_136__36: ;; first number is function id, second number id call id

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 16 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 8 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 0 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_207:
	;; -- function --
	jmp addr_func_end_208 
addr_func_208:
	mov rax, rsp
	add rax, 8 * 1

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- number --
	mov rax, 0 
	push rax

addr_while_condition_45:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- less --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 7
	and rax, 1
	pushf
	pop rbx
	shr rbx, 11
	and rbx, 1
	xor rax, rbx
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_while_end_45

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read at index -- 
	pop rax ;; index
	mov rbx, 8 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov rbx, [rbx]
	;; create bit mask
	mov rcx, 0
	sub rcx, 1
	and rbx, rcx
	push rbx

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_137__28 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_137 
	ret_func_137__28: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- add --
	pop rbx
	pop rax
	add rax, rbx
	push rax

	;; -- assignment --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

	;; -- jump --
	jmp addr_while_condition_45

addr_while_end_45:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_137__29 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_137 
	ret_func_137__29: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_137__30 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_137 
	ret_func_137__30: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- return --
	;; -- pop local variables --
	add rsp, 8 
	;; -- restore stackframe -- 
	pop rax
 mov [basestack + 8 * 1], rax
	;; -- pop parameters --
	add rsp, 8 
	;; -- return empty --
	push 0
	;; -- jump to return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_208:
	;; -- function --
	jmp addr_func_end_209 
addr_func_209:
	mov rax, rsp
	add rax, 8 * 2

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- write at index -- 
	pop rcx ;; value
	pop rax ;; index
	mov rbx, 8 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov r8, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rcx, r9
	not r9
	and r8, r9
	add r8, rcx
	mov [rbx], r8
	push rcx

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- add --
	pop rbx
	pop rax
	add rax, rbx
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 0 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 8 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_127

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 8 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 2 
	push rax

	;; -- mult --
	pop rbx
	pop rax
	mul rbx
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 8 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 8 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 8 
	push rax

	;; -- mult --
	pop rbx
	pop rax
	mul rbx
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_138__7 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_138 
	ret_func_138__7: ;; first number is function id, second number id call id

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 16 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

addr_if_127:
	;; -- return --
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rax
 mov [basestack + 8 * 1], rax
	;; -- pop parameters --
	add rsp, 16 
	;; -- return empty --
	push 0
	;; -- jump to return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_209:
	;; -- number --
	mov rax, 2048 
	push rax

	;; -- function --
	jmp addr_func_end_210 
addr_func_210:
	mov rax, rsp
	add rax, 8 * 2

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- number --
	mov rax, 73 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_136__37 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_136 
	ret_func_136__37: ;; first number is function id, second number id call id

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 0 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 8 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_194__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_194 
	ret_func_194__0: ;; first number is function id, second number id call id

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 16 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_199__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_199 
	ret_func_199__0: ;; first number is function id, second number id call id

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 24 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_204__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_204 
	ret_func_204__0: ;; first number is function id, second number id call id

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 32 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_182__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_182 
	ret_func_182__0: ;; first number is function id, second number id call id

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 40 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 56 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 1
	shl r9, 8 ;; size
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 65 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- not equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	mov rbx, 1
	sub rbx, rax
	push rbx

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_128

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 48 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 48 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 57 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 57 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

	;; -- jump --
	jmp addr_else_7

addr_if_128:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 48 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 57 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

addr_else_7:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 8 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 16 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_210:
	;; -- function --
	jmp addr_func_end_211 
addr_func_211:
	mov rax, rsp
	add rax, 8 * 1

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_195__1 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_195 
	ret_func_195__1: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 24 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_200__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_200 
	ret_func_200__0: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 32 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_205__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_205 
	ret_func_205__0: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_191__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_191 
	ret_func_191__0: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_137__31 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_137 
	ret_func_137__31: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- return --
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rax
 mov [basestack + 8 * 1], rax
	;; -- pop parameters --
	add rsp, 8 
	;; -- return empty --
	push 0
	;; -- jump to return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_211:
	;; -- function --
	jmp addr_func_end_212 
addr_func_212:
	mov rax, rsp
	add rax, 8 * 4

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_145__9 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_145 
	ret_func_145__9: ;; first number is function id, second number id call id

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 8 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 65 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

addr_while_condition_46:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 64 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- not equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	mov rbx, 1
	sub rbx, rax
	push rbx

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_while_end_46

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 64 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 48 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 48 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- not equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	mov rbx, 1
	sub rbx, rax
	push rbx

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_129

	;; -- number --
	mov rax, 0 
	push rax

	;; -- assignment --
	mov rax, [basestack + 8 * 1]
	mov rbx, 64 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

	;; -- jump --
	jmp addr_else_8

addr_if_129:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 56 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 64 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 8 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- add --
	pop rbx
	pop rax
	add rax, rbx
	push rax

	;; -- assignment --
	mov rax, [basestack + 8 * 1]
	mov rbx, 56 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 64 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 65 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- assignment --
	mov rax, [basestack + 8 * 1]
	mov rbx, 64 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

addr_else_8:
	;; -- pop --
	add rsp, 0

	;; -- jump --
	jmp addr_while_condition_46

addr_while_end_46:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 48 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 56 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 57 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_196__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_196 
	ret_func_196__0: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 24 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 32 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_212:
	;; -- function --
	jmp addr_func_end_213 
addr_func_213:
	mov rax, rsp
	add rax, 8 * 4

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 0 
	push rax

addr_while_condition_47:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 56 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 48 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- less --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 7
	and rax, 1
	pushf
	pop rbx
	shr rbx, 11
	and rbx, 1
	xor rax, rbx
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_while_end_47

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 48 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 56 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read at index -- 
	pop rax ;; index
	mov rbx, 8 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov rbx, [rbx]
	;; create bit mask
	mov rcx, 0
	sub rcx, 1
	and rbx, rcx
	push rbx

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 64 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_139__19 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_139 
	ret_func_139__19: ;; first number is function id, second number id call id

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_and_17

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 64 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_140__13 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_140 
	ret_func_140__13: ;; first number is function id, second number id call id

	;; -- jump --
	jmp addr_end_and_17

addr_and_17:
	;; -- number --
	mov rax, 0  
	push rax

addr_end_and_17:
	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_130

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 64 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 24 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 32 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
	;; -- pop --
	add rsp, 0

addr_if_130:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 56 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- add --
	pop rbx
	pop rax
	add rax, rbx
	push rax

	;; -- assignment --
	mov rax, [basestack + 8 * 1]
	mov rbx, 56 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 8

	;; -- jump --
	jmp addr_while_condition_47

addr_while_end_47:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 65 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump --
	je addr_or_16

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- jump --
	jmp addr_end_or_16

addr_or_16:
	;; -- number --
	mov rax, 1  
	push rax

addr_end_or_16:
	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_131

	;; -- number --
	mov rax, 0 
	push rax

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 16 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 32 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
	;; -- pop --
	add rsp, 0

addr_if_131:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 65 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_213__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_213 
	ret_func_213__0: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 16 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 32 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_213:
	;; -- function --
	jmp addr_func_end_214 
addr_func_214:
	mov rax, rsp
	add rax, 8 * 5

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_145__10 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_145 
	ret_func_145__10: ;; first number is function id, second number id call id

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 24 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 56 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_201__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_201 
	ret_func_201__0: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 8 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 40 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_214:
	;; -- function --
	jmp addr_func_end_215 
addr_func_215:
	mov rax, rsp
	add rax, 8 * 4

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 24 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 0 
	push rax

addr_while_condition_48:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 56 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 48 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- less --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 7
	and rax, 1
	pushf
	pop rbx
	shr rbx, 11
	and rbx, 1
	xor rax, rbx
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_while_end_48

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 48 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 56 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read at index -- 
	pop rax ;; index
	mov rbx, 8 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov rbx, [rbx]
	;; create bit mask
	mov rcx, 0
	sub rcx, 1
	and rbx, rcx
	push rbx

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 64 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_139__20 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_139 
	ret_func_139__20: ;; first number is function id, second number id call id

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_and_18

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 64 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_140__14 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_140 
	ret_func_140__14: ;; first number is function id, second number id call id

	;; -- jump --
	jmp addr_end_and_18

addr_and_18:
	;; -- number --
	mov rax, 0  
	push rax

addr_end_and_18:
	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_132

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 64 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 24 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 32 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
	;; -- pop --
	add rsp, 0

addr_if_132:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 56 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- add --
	pop rbx
	pop rax
	add rax, rbx
	push rax

	;; -- assignment --
	mov rax, [basestack + 8 * 1]
	mov rbx, 56 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 8

	;; -- jump --
	jmp addr_while_condition_48

addr_while_end_48:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 65 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump --
	je addr_or_17

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- jump --
	jmp addr_end_or_17

addr_or_17:
	;; -- number --
	mov rax, 1  
	push rax

addr_end_or_17:
	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_133

	;; -- number --
	mov rax, 0 
	push rax

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 16 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 32 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
	;; -- pop --
	add rsp, 0

addr_if_133:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 65 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_215__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_215 
	ret_func_215__0: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 16 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 32 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_215:
	;; -- function --
	jmp addr_func_end_216 
addr_func_216:
	mov rax, rsp
	add rax, 8 * 8

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_145__11 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_145 
	ret_func_145__11: ;; first number is function id, second number id call id

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 80 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 48 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 56 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 64 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_181__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_181 
	ret_func_181__0: ;; first number is function id, second number id call id

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 88 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_183__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_183 
	ret_func_183__0: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 88 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 16 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 64 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_216:
	;; -- function --
	jmp addr_func_end_217 
addr_func_217:
	mov rax, rsp
	add rax, 8 * 4

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 0 
	push rax

addr_while_condition_49:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 56 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 48 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- less --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 7
	and rax, 1
	pushf
	pop rbx
	shr rbx, 11
	and rbx, 1
	xor rax, rbx
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_while_end_49

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 48 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 56 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read at index -- 
	pop rax ;; index
	mov rbx, 8 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov rbx, [rbx]
	;; create bit mask
	mov rcx, 0
	sub rcx, 1
	and rbx, rcx
	push rbx

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 64 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_139__21 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_139 
	ret_func_139__21: ;; first number is function id, second number id call id

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_and_19

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 64 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_140__15 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_140 
	ret_func_140__15: ;; first number is function id, second number id call id

	;; -- jump --
	jmp addr_end_and_19

addr_and_19:
	;; -- number --
	mov rax, 0  
	push rax

addr_end_and_19:
	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_134

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 64 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 24 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 32 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
	;; -- pop --
	add rsp, 0

addr_if_134:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 56 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- add --
	pop rbx
	pop rax
	add rax, rbx
	push rax

	;; -- assignment --
	mov rax, [basestack + 8 * 1]
	mov rbx, 56 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 8

	;; -- jump --
	jmp addr_while_condition_49

addr_while_end_49:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 65 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump --
	je addr_or_18

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- jump --
	jmp addr_end_or_18

addr_or_18:
	;; -- number --
	mov rax, 1  
	push rax

addr_end_or_18:
	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_135

	;; -- number --
	mov rax, 0 
	push rax

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 16 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 32 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
	;; -- pop --
	add rsp, 0

addr_if_135:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 65 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_217__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_217 
	ret_func_217__0: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 16 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 32 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_217:
	;; -- function --
	jmp addr_func_end_218 
addr_func_218:
	mov rax, rsp
	add rax, 8 * 2

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

addr_while_condition_50:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 48 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- less --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 7
	and rax, 1
	pushf
	pop rbx
	shr rbx, 11
	and rbx, 1
	xor rax, rbx
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_while_end_50

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 48 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read at index -- 
	pop rax ;; index
	mov rbx, 8 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov rbx, [rbx]
	;; create bit mask
	mov rcx, 0
	sub rcx, 1
	and rbx, rcx
	push rbx

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 32 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 1
	shl rbx, 8 ;; size
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_and_20

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 48 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read at index -- 
	pop rax ;; index
	mov rbx, 8 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov rbx, [rbx]
	;; create bit mask
	mov rcx, 0
	sub rcx, 1
	and rbx, rcx
	push rbx

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 33 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- jump --
	jmp addr_end_and_20

addr_and_20:
	;; -- number --
	mov rax, 0  
	push rax

addr_end_and_20:
	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_136

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 48 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read at index -- 
	pop rax ;; index
	mov rbx, 8 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov rbx, [rbx]
	;; create bit mask
	mov rcx, 0
	sub rcx, 1
	and rbx, rcx
	push rbx

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 24 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 16 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
	;; -- pop --
	add rsp, 0

addr_if_136:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 48 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read at index -- 
	pop rax ;; index
	mov rbx, 8 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov rbx, [rbx]
	;; create bit mask
	mov rcx, 0
	sub rcx, 1
	and rbx, rcx
	push rbx

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_137

	;; -- number --
	mov rax, 1 
	push rax

	;; -- assignment --
	mov rax, [basestack + 8 * 1]
	mov rbx, 40 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

addr_if_137:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 48 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- add --
	pop rbx
	pop rax
	add rax, rbx
	push rax

	;; -- assignment --
	mov rax, [basestack + 8 * 1]
	mov rbx, 48 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

	;; -- jump --
	jmp addr_while_condition_50

addr_while_end_50:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_138

	;; -- string --
	mov rax, string_28 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_146__1 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_146 
	ret_func_146__1: ;; first number is function id, second number id call id

	;; -- number --
	mov rax, 8 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_181__1 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_181 
	ret_func_181__1: ;; first number is function id, second number id call id

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 56 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_183__1 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_183 
	ret_func_183__1: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 56 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 32 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 16 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
	;; -- pop --
	add rsp, 8

addr_if_138:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 65 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_139

	;; -- number --
	mov rax, 0 
	push rax

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 24 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 16 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
	;; -- pop --
	add rsp, 0

addr_if_139:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 65 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_218__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_218 
	ret_func_218__0: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 24 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 16 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_218:
	;; -- function --
	jmp addr_func_end_219 
addr_func_219:
	mov rax, rsp
	add rax, 8 * 6

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_145__12 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_145 
	ret_func_145__12: ;; first number is function id, second number id call id

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 32 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 64 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 48 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_206__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_206 
	ret_func_206__0: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 8 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 48 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_219:
	;; -- function --
	jmp addr_func_end_220 
addr_func_220:
	mov rax, rsp
	add rax, 8 * 4

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 32 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 0 
	push rax

addr_while_condition_51:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 56 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 48 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- less --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 7
	and rax, 1
	pushf
	pop rbx
	shr rbx, 11
	and rbx, 1
	xor rax, rbx
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_while_end_51

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 48 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 56 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read at index -- 
	pop rax ;; index
	mov rbx, 8 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov rbx, [rbx]
	;; create bit mask
	mov rcx, 0
	sub rcx, 1
	and rbx, rcx
	push rbx

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 64 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_139__22 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_139 
	ret_func_139__22: ;; first number is function id, second number id call id

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_and_21

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 64 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_140__16 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_140 
	ret_func_140__16: ;; first number is function id, second number id call id

	;; -- jump --
	jmp addr_end_and_21

addr_and_21:
	;; -- number --
	mov rax, 0  
	push rax

addr_end_and_21:
	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_140

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 64 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 24 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 32 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
	;; -- pop --
	add rsp, 0

addr_if_140:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 56 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- add --
	pop rbx
	pop rax
	add rax, rbx
	push rax

	;; -- assignment --
	mov rax, [basestack + 8 * 1]
	mov rbx, 56 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 8

	;; -- jump --
	jmp addr_while_condition_51

addr_while_end_51:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 65 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump --
	je addr_or_19

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- jump --
	jmp addr_end_or_19

addr_or_19:
	;; -- number --
	mov rax, 1  
	push rax

addr_end_or_19:
	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_141

	;; -- number --
	mov rax, 0 
	push rax

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 16 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 32 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
	;; -- pop --
	add rsp, 0

addr_if_141:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 65 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_220__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_220 
	ret_func_220__0: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 16 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 32 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_220:
	;; -- function --
	jmp addr_func_end_221 
addr_func_221:
	mov rax, rsp
	add rax, 8 * 2

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- read at index -- 
	pop rax ;; index
	mov rbx, 1 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov rbx, [rbx]
	;; create bit mask
	mov rcx, 1
	shl rcx, 8 ;; size
	sub rcx, 1
	and rbx, rcx
	push rbx

	;; -- character --
	mov rax, 0x5C 
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_142

	;; -- number --
	mov rax, 2 
	push rax

	;; -- assignment --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

addr_if_142:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_153__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_153 
	ret_func_153__0: ;; first number is function id, second number id call id

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

addr_while_condition_52:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 48 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 16 
	push rax

	;; -- greater --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	pushf
	pop rbx
	pushf
	pop rcx
	shr rax, 7
	and rax, 1
	shr rbx, 11
	and rbx, 1
	xor rax, rbx
	mov rbx, 1
	sub rbx, rax
	push rbx
	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_while_end_52

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 56 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- add --
	pop rbx
	pop rax
	add rax, rbx
	push rax

	;; -- assignment --
	mov rax, [basestack + 8 * 1]
	mov rbx, 56 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 48 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 16 
	push rax

	;; -- subtract --
	pop rbx
	pop rax
	sub rax, rbx
	push rax

	;; -- assignment --
	mov rax, [basestack + 8 * 1]
	mov rbx, 48 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

	;; -- jump --
	jmp addr_while_condition_52

addr_while_end_52:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 56 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 16 
	push rax

	;; -- greater --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	pushf
	pop rbx
	pushf
	pop rcx
	shr rax, 7
	and rax, 1
	shr rbx, 11
	and rbx, 1
	xor rax, rbx
	mov rbx, 1
	sub rbx, rax
	push rbx
	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_143

	;; -- number --
	mov rax, 1 
	push rax

	;; -- negative --
	pop rax
	neg rax
	push rax

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 32 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 16 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
	;; -- pop --
	add rsp, 0

addr_if_143:
	;; -- number --
	mov rax, 5 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_136__38 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_136 
	ret_func_136__38: ;; first number is function id, second number id call id

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 64 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- character --
	mov rax, 0x30 
	push rax

	;; -- write at index -- 
	pop rcx ;; value
	pop rax ;; index
	mov rbx, 1 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov r8, [rbx]
	;; create bit mask
	mov r9, 1
	shl r9, 8;; size
	sub r9, 1
	and rcx, r9
	not r9
	and r8, r9
	add r8, rcx
	mov [rbx], r8
	push rcx

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 64 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- character --
	mov rax, 0x78 
	push rax

	;; -- write at index -- 
	pop rcx ;; value
	pop rax ;; index
	mov rbx, 1 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov r8, [rbx]
	;; create bit mask
	mov r9, 1
	shl r9, 8;; size
	sub r9, 1
	and rcx, r9
	not r9
	and r8, r9
	add r8, rcx
	mov [rbx], r8
	push rcx

	;; -- pop --
	add rsp, 8

	;; -- number --
	mov rax, 0 
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 56 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- less --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pushf
	pushf
	pop rax
	shr rax, 7
	and rax, 1
	pop rbx
	shr rbx, 11
	and rbx, 1
	pop rcx
	shr rcx, 6
	and rcx, 1
	xor rax, rbx
	or rax, rcx
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_and_22

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 56 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 9 
	push rax

	;; -- less --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pushf
	pushf
	pop rax
	shr rax, 7
	and rax, 1
	pop rbx
	shr rbx, 11
	and rbx, 1
	pop rcx
	shr rcx, 6
	and rcx, 1
	xor rax, rbx
	or rax, rcx
	push rax

	;; -- jump --
	jmp addr_end_and_22

addr_and_22:
	;; -- number --
	mov rax, 0  
	push rax

addr_end_and_22:
	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_144

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 64 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 2 
	push rax

	;; -- character --
	mov rax, 0x30 
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 56 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- add --
	pop rbx
	pop rax
	add rax, rbx
	push rax

	;; -- write at index -- 
	pop rcx ;; value
	pop rax ;; index
	mov rbx, 1 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov r8, [rbx]
	;; create bit mask
	mov r9, 1
	shl r9, 8;; size
	sub r9, 1
	and rcx, r9
	not r9
	and r8, r9
	add r8, rcx
	mov [rbx], r8
	push rcx

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

	;; -- jump --
	jmp addr_else_9

addr_if_144:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 64 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 2 
	push rax

	;; -- character --
	mov rax, 0x41 
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 56 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 10 
	push rax

	;; -- subtract --
	pop rbx
	pop rax
	sub rax, rbx
	push rax

	;; -- add --
	pop rbx
	pop rax
	add rax, rbx
	push rax

	;; -- write at index -- 
	pop rcx ;; value
	pop rax ;; index
	mov rbx, 1 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov r8, [rbx]
	;; create bit mask
	mov r9, 1
	shl r9, 8;; size
	sub r9, 1
	and rcx, r9
	not r9
	and r8, r9
	add r8, rcx
	mov [rbx], r8
	push rcx

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

addr_else_9:
	;; -- number --
	mov rax, 0 
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 48 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- less --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pushf
	pushf
	pop rax
	shr rax, 7
	and rax, 1
	pop rbx
	shr rbx, 11
	and rbx, 1
	pop rcx
	shr rcx, 6
	and rcx, 1
	xor rax, rbx
	or rax, rcx
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_and_23

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 48 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 9 
	push rax

	;; -- less --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pushf
	pushf
	pop rax
	shr rax, 7
	and rax, 1
	pop rbx
	shr rbx, 11
	and rbx, 1
	pop rcx
	shr rcx, 6
	and rcx, 1
	xor rax, rbx
	or rax, rcx
	push rax

	;; -- jump --
	jmp addr_end_and_23

addr_and_23:
	;; -- number --
	mov rax, 0  
	push rax

addr_end_and_23:
	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_145

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 64 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 3 
	push rax

	;; -- character --
	mov rax, 0x30 
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 48 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- add --
	pop rbx
	pop rax
	add rax, rbx
	push rax

	;; -- write at index -- 
	pop rcx ;; value
	pop rax ;; index
	mov rbx, 1 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov r8, [rbx]
	;; create bit mask
	mov r9, 1
	shl r9, 8;; size
	sub r9, 1
	and rcx, r9
	not r9
	and r8, r9
	add r8, rcx
	mov [rbx], r8
	push rcx

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

	;; -- jump --
	jmp addr_else_10

addr_if_145:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 64 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 3 
	push rax

	;; -- character --
	mov rax, 0x41 
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 48 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 10 
	push rax

	;; -- subtract --
	pop rbx
	pop rax
	sub rax, rbx
	push rax

	;; -- add --
	pop rbx
	pop rax
	add rax, rbx
	push rax

	;; -- write at index -- 
	pop rcx ;; value
	pop rax ;; index
	mov rbx, 1 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov r8, [rbx]
	;; create bit mask
	mov r9, 1
	shl r9, 8;; size
	sub r9, 1
	and rcx, r9
	not r9
	and r8, r9
	add r8, rcx
	mov [rbx], r8
	push rcx

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

addr_else_10:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 64 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 4 
	push rax

	;; -- character --
	mov rax, 0x00 
	push rax

	;; -- write at index -- 
	pop rcx ;; value
	pop rax ;; index
	mov rbx, 1 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov r8, [rbx]
	;; create bit mask
	mov r9, 1
	shl r9, 8;; size
	sub r9, 1
	and rcx, r9
	not r9
	and r8, r9
	add r8, rcx
	mov [rbx], r8
	push rcx

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 64 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__2 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__2: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 64 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_137__32 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_137 
	ret_func_137__32: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 40 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 16 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_221:
	;; -- function --
	jmp addr_func_end_222 
addr_func_222:
	mov rax, rsp
	add rax, 8 * 1

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_29 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__3 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__3: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_30 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__4 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__4: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_31 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__5 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__5: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_32 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__6 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__6: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_33 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__7 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__7: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1464 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_159__1 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_159 
	ret_func_159__1: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_34 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__8 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__8: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_35 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__9 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__9: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_36 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__10 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__10: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_37 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__11 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__11: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_38 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__12 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__12: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_39 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__13 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__13: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_40 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__14 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__14: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_41 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__15 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__15: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_42 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__16 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__16: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_43 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__17 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__17: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_44 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__18 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__18: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_45 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__19 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__19: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_46 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__20 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__20: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_47 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__21 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__21: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_48 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__22 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__22: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_49 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__23 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__23: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_50 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__24 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__24: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_51 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__25 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__25: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_52 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__26 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__26: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_53 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__27 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__27: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_54 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__28 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__28: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_55 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__29 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__29: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_56 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__30 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__30: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_57 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__31 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__31: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_58 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__32 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__32: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_59 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__33 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__33: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_60 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__34 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__34: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- return --
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rax
 mov [basestack + 8 * 1], rax
	;; -- pop parameters --
	add rsp, 8 
	;; -- return empty --
	push 0
	;; -- jump to return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_222:
	;; -- function --
	jmp addr_func_end_223 
addr_func_223:
	mov rax, rsp
	add rax, 8 * 2

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_61 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__35 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__35: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_62 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__36 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__36: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 8 
	push rax

	;; -- mult --
	pop rbx
	pop rax
	mul rbx
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_159__2 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_159 
	ret_func_159__2: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_63 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__37 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__37: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 8 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- subtract --
	pop rbx
	pop rax
	sub rax, rbx
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 8 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- return --
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rax
 mov [basestack + 8 * 1], rax
	;; -- pop parameters --
	add rsp, 16 
	;; -- return empty --
	push 0
	;; -- jump to return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_223:
	;; -- function --
	jmp addr_func_end_224 
addr_func_224:
	mov rax, rsp
	add rax, 8 * 3

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__38 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__38: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_159__3 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_159 
	ret_func_159__3: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_64 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__39 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__39: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- return --
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rax
 mov [basestack + 8 * 1], rax
	;; -- pop parameters --
	add rsp, 24 
	;; -- return empty --
	push 0
	;; -- jump to return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_224:
	;; -- function --
	jmp addr_func_end_225 
addr_func_225:
	mov rax, rsp
	add rax, 8 * 3

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_65 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__40 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__40: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_66 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__41 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__41: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_159__4 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_159 
	ret_func_159__4: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_67 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__42 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__42: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_68 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__43 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__43: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_159__5 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_159 
	ret_func_159__5: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_69 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__44 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__44: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_70 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__45 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__45: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_71 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__46 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__46: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_159__6 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_159 
	ret_func_159__6: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_72 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__47 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__47: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_73 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__48 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__48: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_74 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__49 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__49: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 57 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- add --
	pop rbx
	pop rax
	add rax, rbx
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_159__7 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_159 
	ret_func_159__7: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_75 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__50 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__50: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_76 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__51 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__51: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_77 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__52 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__52: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_78 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__53 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__53: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 57 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- add --
	pop rbx
	pop rax
	add rax, rbx
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_159__8 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_159 
	ret_func_159__8: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_79 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__54 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__54: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- return --
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rax
 mov [basestack + 8 * 1], rax
	;; -- pop parameters --
	add rsp, 24 
	;; -- return empty --
	push 0
	;; -- jump to return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_225:
	;; -- function --
	jmp addr_func_end_226 
addr_func_226:
	mov rax, rsp
	add rax, 8 * 4

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_80 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__55 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__55: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_81 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__56 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__56: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_82 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__57 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__57: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_159__9 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_159 
	ret_func_159__9: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_83 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__58 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__58: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_159__10 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_159 
	ret_func_159__10: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_84 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__59 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__59: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_85 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__60 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__60: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_86 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__61 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__61: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_87 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__62 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__62: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_88 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__63 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__63: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_89 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__64 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__64: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_90 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__65 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__65: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_159__11 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_159 
	ret_func_159__11: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_91 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__66 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__66: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_92 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__67 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__67: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_159__12 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_159 
	ret_func_159__12: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_93 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__68 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__68: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_159__13 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_159 
	ret_func_159__13: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_94 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__69 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__69: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 8 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- subtract --
	pop rbx
	pop rax
	sub rax, rbx
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- add --
	pop rbx
	pop rax
	add rax, rbx
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 8 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- return --
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rax
 mov [basestack + 8 * 1], rax
	;; -- pop parameters --
	add rsp, 32 
	;; -- return empty --
	push 0
	;; -- jump to return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_226:
	;; -- function --
	jmp addr_func_end_227 
addr_func_227:
	mov rax, rsp
	add rax, 8 * 3

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_95 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__70 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__70: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_96 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__71 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__71: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_97 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__72 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__72: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 8 
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- mult --
	pop rbx
	pop rax
	mul rbx
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_159__14 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_159 
	ret_func_159__14: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_98 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__73 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__73: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_99 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__74 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__74: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_100 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__75 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__75: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_101 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__76 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__76: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 57 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_159__15 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_159 
	ret_func_159__15: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_102 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__77 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__77: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_103 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__78 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__78: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_104 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__79 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__79: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 8 
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- mult --
	pop rbx
	pop rax
	mul rbx
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_159__16 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_159 
	ret_func_159__16: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_105 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__80 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__80: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_106 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__81 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__81: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_107 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__82 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__82: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_108 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__83 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__83: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_109 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__84 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__84: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_110 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__85 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__85: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_111 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__86 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__86: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_112 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__87 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__87: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_113 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__88 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__88: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- return --
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rax
 mov [basestack + 8 * 1], rax
	;; -- pop parameters --
	add rsp, 24 
	;; -- return empty --
	push 0
	;; -- jump to return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_227:
	;; -- function --
	jmp addr_func_end_228 
addr_func_228:
	mov rax, rsp
	add rax, 8 * 3

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_114 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__89 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__89: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_115 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__90 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__90: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_116 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__91 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__91: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_117 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__92 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__92: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_118 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__93 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__93: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 8 
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- mult --
	pop rbx
	pop rax
	mul rbx
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_159__17 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_159 
	ret_func_159__17: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_119 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__94 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__94: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_120 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__95 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__95: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_121 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__96 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__96: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_122 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__97 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__97: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 57 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_159__18 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_159 
	ret_func_159__18: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_123 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__98 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__98: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_124 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__99 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__99: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_125 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__100 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__100: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 8 
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- mult --
	pop rbx
	pop rax
	mul rbx
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_159__19 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_159 
	ret_func_159__19: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_126 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__101 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__101: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_127 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__102 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__102: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_128 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__103 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__103: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_129 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__104 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__104: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_130 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__105 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__105: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_131 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__106 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__106: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_132 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__107 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__107: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_133 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__108 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__108: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_134 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__109 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__109: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- return --
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rax
 mov [basestack + 8 * 1], rax
	;; -- pop parameters --
	add rsp, 24 
	;; -- return empty --
	push 0
	;; -- jump to return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_228:
	;; -- function --
	jmp addr_func_end_229 
addr_func_229:
	mov rax, rsp
	add rax, 8 * 1

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_135 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__110 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__110: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_136 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__111 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__111: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_137 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__112 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__112: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_138 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__113 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__113: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 8 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 2 
	push rax

	;; -- subtract --
	pop rbx
	pop rax
	sub rax, rbx
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 8 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- return --
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rax
 mov [basestack + 8 * 1], rax
	;; -- pop parameters --
	add rsp, 8 
	;; -- return empty --
	push 0
	;; -- jump to return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_229:
	;; -- function --
	jmp addr_func_end_230 
addr_func_230:
	mov rax, rsp
	add rax, 8 * 1

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_139 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__114 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__114: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_140 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__115 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__115: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_141 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__116 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__116: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_142 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__117 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__117: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_143 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__118 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__118: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 8 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- subtract --
	pop rbx
	pop rax
	sub rax, rbx
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 8 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- return --
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rax
 mov [basestack + 8 * 1], rax
	;; -- pop parameters --
	add rsp, 8 
	;; -- return empty --
	push 0
	;; -- jump to return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_230:
	;; -- function --
	jmp addr_func_end_231 
addr_func_231:
	mov rax, rsp
	add rax, 8 * 1

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_144 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__119 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__119: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_145 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__120 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__120: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_146 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__121 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__121: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_147 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__122 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__122: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_148 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__123 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__123: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 8 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- subtract --
	pop rbx
	pop rax
	sub rax, rbx
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 8 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- return --
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rax
 mov [basestack + 8 * 1], rax
	;; -- pop parameters --
	add rsp, 8 
	;; -- return empty --
	push 0
	;; -- jump to return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_231:
	;; -- function --
	jmp addr_func_end_232 
addr_func_232:
	mov rax, rsp
	add rax, 8 * 1

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_149 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__124 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__124: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_150 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__125 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__125: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_151 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__126 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__126: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_152 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__127 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__127: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- return --
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rax
 mov [basestack + 8 * 1], rax
	;; -- pop parameters --
	add rsp, 8 
	;; -- return empty --
	push 0
	;; -- jump to return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_232:
	;; -- function --
	jmp addr_func_end_233 
addr_func_233:
	mov rax, rsp
	add rax, 8 * 1

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_153 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__128 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__128: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_154 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__129 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__129: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_155 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__130 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__130: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_156 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__131 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__131: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_157 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__132 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__132: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- return --
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rax
 mov [basestack + 8 * 1], rax
	;; -- pop parameters --
	add rsp, 8 
	;; -- return empty --
	push 0
	;; -- jump to return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_233:
	;; -- function --
	jmp addr_func_end_234 
addr_func_234:
	mov rax, rsp
	add rax, 8 * 1

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_158 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__133 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__133: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_159 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__134 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__134: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_160 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__135 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__135: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_161 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__136 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__136: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_162 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__137 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__137: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- return --
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rax
 mov [basestack + 8 * 1], rax
	;; -- pop parameters --
	add rsp, 8 
	;; -- return empty --
	push 0
	;; -- jump to return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_234:
	;; -- function --
	jmp addr_func_end_235 
addr_func_235:
	mov rax, rsp
	add rax, 8 * 1

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_163 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__138 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__138: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_164 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__139 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__139: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_165 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__140 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__140: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_166 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__141 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__141: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_167 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__142 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__142: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_168 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__143 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__143: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_169 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__144 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__144: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_170 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__145 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__145: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_171 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__146 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__146: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_172 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__147 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__147: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_173 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__148 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__148: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_174 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__149 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__149: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_175 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__150 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__150: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_176 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__151 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__151: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 8 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- subtract --
	pop rbx
	pop rax
	sub rax, rbx
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 8 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- return --
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rax
 mov [basestack + 8 * 1], rax
	;; -- pop parameters --
	add rsp, 8 
	;; -- return empty --
	push 0
	;; -- jump to return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_235:
	;; -- function --
	jmp addr_func_end_236 
addr_func_236:
	mov rax, rsp
	add rax, 8 * 1

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_177 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__152 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__152: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_178 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__153 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__153: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_179 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__154 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__154: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_180 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__155 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__155: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_181 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__156 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__156: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_182 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__157 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__157: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_183 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__158 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__158: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_184 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__159 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__159: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_185 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__160 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__160: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_186 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__161 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__161: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_187 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__162 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__162: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_188 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__163 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__163: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_189 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__164 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__164: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_190 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__165 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__165: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_191 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__166 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__166: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_192 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__167 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__167: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_193 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__168 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__168: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_194 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__169 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__169: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_195 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__170 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__170: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 8 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- subtract --
	pop rbx
	pop rax
	sub rax, rbx
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 8 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- return --
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rax
 mov [basestack + 8 * 1], rax
	;; -- pop parameters --
	add rsp, 8 
	;; -- return empty --
	push 0
	;; -- jump to return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_236:
	;; -- function --
	jmp addr_func_end_237 
addr_func_237:
	mov rax, rsp
	add rax, 8 * 1

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_196 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__171 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__171: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_197 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__172 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__172: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_198 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__173 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__173: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_199 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__174 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__174: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_200 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__175 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__175: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_201 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__176 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__176: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_202 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__177 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__177: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_203 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__178 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__178: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_204 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__179 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__179: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_205 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__180 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__180: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_206 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__181 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__181: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_207 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__182 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__182: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_208 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__183 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__183: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_209 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__184 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__184: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_210 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__185 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__185: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_211 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__186 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__186: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_212 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__187 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__187: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_213 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__188 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__188: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_214 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__189 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__189: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_215 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__190 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__190: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_216 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__191 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__191: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 8 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- subtract --
	pop rbx
	pop rax
	sub rax, rbx
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 8 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- return --
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rax
 mov [basestack + 8 * 1], rax
	;; -- pop parameters --
	add rsp, 8 
	;; -- return empty --
	push 0
	;; -- jump to return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_237:
	;; -- function --
	jmp addr_func_end_238 
addr_func_238:
	mov rax, rsp
	add rax, 8 * 1

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_217 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__192 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__192: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_218 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__193 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__193: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_219 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__194 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__194: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_220 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__195 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__195: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_221 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__196 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__196: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_222 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__197 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__197: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_223 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__198 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__198: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_224 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__199 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__199: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_225 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__200 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__200: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_226 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__201 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__201: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_227 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__202 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__202: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_228 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__203 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__203: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_229 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__204 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__204: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_230 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__205 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__205: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_231 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__206 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__206: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_232 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__207 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__207: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_233 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__208 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__208: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_234 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__209 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__209: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 8 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- subtract --
	pop rbx
	pop rax
	sub rax, rbx
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 8 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- return --
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rax
 mov [basestack + 8 * 1], rax
	;; -- pop parameters --
	add rsp, 8 
	;; -- return empty --
	push 0
	;; -- jump to return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_238:
	;; -- function --
	jmp addr_func_end_239 
addr_func_239:
	mov rax, rsp
	add rax, 8 * 1

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_235 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__210 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__210: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_236 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__211 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__211: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_237 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__212 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__212: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_238 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__213 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__213: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_239 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__214 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__214: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_240 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__215 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__215: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_241 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__216 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__216: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_242 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__217 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__217: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_243 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__218 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__218: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 8 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- subtract --
	pop rbx
	pop rax
	sub rax, rbx
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 8 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- return --
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rax
 mov [basestack + 8 * 1], rax
	;; -- pop parameters --
	add rsp, 8 
	;; -- return empty --
	push 0
	;; -- jump to return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_239:
	;; -- function --
	jmp addr_func_end_240 
addr_func_240:
	mov rax, rsp
	add rax, 8 * 1

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_244 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__219 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__219: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_245 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__220 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__220: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_246 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__221 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__221: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_247 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__222 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__222: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_248 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__223 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__223: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_249 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__224 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__224: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_250 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__225 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__225: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_251 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__226 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__226: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_252 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__227 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__227: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_253 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__228 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__228: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_254 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__229 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__229: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 8 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- subtract --
	pop rbx
	pop rax
	sub rax, rbx
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 8 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- return --
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rax
 mov [basestack + 8 * 1], rax
	;; -- pop parameters --
	add rsp, 8 
	;; -- return empty --
	push 0
	;; -- jump to return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_240:
	;; -- function --
	jmp addr_func_end_241 
addr_func_241:
	mov rax, rsp
	add rax, 8 * 1

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_255 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__230 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__230: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_256 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__231 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__231: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_257 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__232 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__232: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 8 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- subtract --
	pop rbx
	pop rax
	sub rax, rbx
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 8 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- return --
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rax
 mov [basestack + 8 * 1], rax
	;; -- pop parameters --
	add rsp, 8 
	;; -- return empty --
	push 0
	;; -- jump to return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_241:
	;; -- function --
	jmp addr_func_end_242 
addr_func_242:
	mov rax, rsp
	add rax, 8 * 3

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_258 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__233 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__233: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_259 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__234 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__234: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__235 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__235: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_159__20 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_159 
	ret_func_159__20: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_260 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__236 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__236: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- return --
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rax
 mov [basestack + 8 * 1], rax
	;; -- pop parameters --
	add rsp, 24 
	;; -- return empty --
	push 0
	;; -- jump to return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_242:
	;; -- function --
	jmp addr_func_end_243 
addr_func_243:
	mov rax, rsp
	add rax, 8 * 3

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_261 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__237 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__237: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_262 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__238 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__238: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__239 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__239: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_159__21 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_159 
	ret_func_159__21: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_263 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__240 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__240: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- return --
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rax
 mov [basestack + 8 * 1], rax
	;; -- pop parameters --
	add rsp, 24 
	;; -- return empty --
	push 0
	;; -- jump to return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_243:
	;; -- function --
	jmp addr_func_end_244 
addr_func_244:
	mov rax, rsp
	add rax, 8 * 3

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_264 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__241 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__241: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_265 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__242 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__242: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__243 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__243: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_159__22 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_159 
	ret_func_159__22: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_266 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__244 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__244: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- return --
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rax
 mov [basestack + 8 * 1], rax
	;; -- pop parameters --
	add rsp, 24 
	;; -- return empty --
	push 0
	;; -- jump to return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_244:
	;; -- function --
	jmp addr_func_end_245 
addr_func_245:
	mov rax, rsp
	add rax, 8 * 2

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_267 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__245 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__245: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_268 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__246 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__246: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__247 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__247: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_269 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__248 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__248: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_270 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__249 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__249: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 8 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- add --
	pop rbx
	pop rax
	add rax, rbx
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 8 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- return --
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rax
 mov [basestack + 8 * 1], rax
	;; -- pop parameters --
	add rsp, 16 
	;; -- return empty --
	push 0
	;; -- jump to return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_245:
	;; -- function --
	jmp addr_func_end_246 
addr_func_246:
	mov rax, rsp
	add rax, 8 * 2

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_271 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__250 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__250: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_272 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__251 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__251: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_221__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_221 
	ret_func_221__0: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_273 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__252 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__252: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_274 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__253 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__253: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 8 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- add --
	pop rbx
	pop rax
	add rax, rbx
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 8 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- return --
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rax
 mov [basestack + 8 * 1], rax
	;; -- pop parameters --
	add rsp, 16 
	;; -- return empty --
	push 0
	;; -- jump to return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_246:
	;; -- function --
	jmp addr_func_end_247 
addr_func_247:
	mov rax, rsp
	add rax, 8 * 2

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_275 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__254 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__254: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_276 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__255 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__255: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_159__23 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_159 
	ret_func_159__23: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_277 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__256 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__256: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_278 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__257 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__257: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 8 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- add --
	pop rbx
	pop rax
	add rax, rbx
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 8 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- return --
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rax
 mov [basestack + 8 * 1], rax
	;; -- pop parameters --
	add rsp, 16 
	;; -- return empty --
	push 0
	;; -- jump to return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_247:
	;; -- function --
	jmp addr_func_end_248 
addr_func_248:
	mov rax, rsp
	add rax, 8 * 2

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_279 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__258 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__258: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_280 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__259 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__259: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_281 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__260 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__260: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_159__24 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_159 
	ret_func_159__24: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_282 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__261 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__261: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_283 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__262 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__262: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_284 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__263 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__263: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_285 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__264 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__264: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_286 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__265 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__265: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_287 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__266 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__266: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 8 
	push rax

	;; -- less --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 7
	and rax, 1
	pushf
	pop rbx
	shr rbx, 11
	and rbx, 1
	xor rax, rbx
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_146

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_288 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__267 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__267: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_289 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__268 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__268: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 8 
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- mult --
	pop rbx
	pop rax
	mul rbx
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_159__25 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_159 
	ret_func_159__25: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_290 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__269 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__269: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

	;; -- jump --
	jmp addr_else_11

addr_if_146:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_291 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__270 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__270: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

addr_else_11:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_292 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__271 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__271: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_293 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__272 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__272: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_294 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__273 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__273: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 8 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- subtract --
	pop rbx
	pop rax
	sub rax, rbx
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 8 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- return --
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rax
 mov [basestack + 8 * 1], rax
	;; -- pop parameters --
	add rsp, 16 
	;; -- return empty --
	push 0
	;; -- jump to return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_248:
	;; -- function --
	jmp addr_func_end_249 
addr_func_249:
	mov rax, rsp
	add rax, 8 * 2

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_295 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__274 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__274: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_296 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__275 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__275: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_297 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__276 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__276: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_298 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__277 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__277: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_159__26 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_159 
	ret_func_159__26: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_299 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__278 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__278: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_300 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__279 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__279: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_301 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__280 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__280: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_302 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__281 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__281: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_303 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__282 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__282: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_304 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__283 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__283: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 8 
	push rax

	;; -- less --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 7
	and rax, 1
	pushf
	pop rbx
	shr rbx, 11
	and rbx, 1
	xor rax, rbx
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_147

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_305 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__284 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__284: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_306 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__285 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__285: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 8 
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- mult --
	pop rbx
	pop rax
	mul rbx
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_159__27 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_159 
	ret_func_159__27: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_307 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__286 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__286: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

	;; -- jump --
	jmp addr_else_12

addr_if_147:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_308 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__287 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__287: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

addr_else_12:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_309 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__288 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__288: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_310 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__289 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__289: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_311 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__290 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__290: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_312 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__291 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__291: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_313 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__292 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__292: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_314 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__293 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__293: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_315 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__294 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__294: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 8 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 2 
	push rax

	;; -- subtract --
	pop rbx
	pop rax
	sub rax, rbx
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 8 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- return --
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rax
 mov [basestack + 8 * 1], rax
	;; -- pop parameters --
	add rsp, 16 
	;; -- return empty --
	push 0
	;; -- jump to return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_249:
	;; -- function --
	jmp addr_func_end_250 
addr_func_250:
	mov rax, rsp
	add rax, 8 * 3

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_316 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__295 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__295: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_317 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__296 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__296: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_318 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__297 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__297: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_159__28 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_159 
	ret_func_159__28: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_319 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__298 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__298: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_320 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__299 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__299: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_321 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__300 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__300: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 8 
	push rax

	;; -- less --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 7
	and rax, 1
	pushf
	pop rbx
	shr rbx, 11
	and rbx, 1
	xor rax, rbx
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_148

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_322 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__301 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__301: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_323 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__302 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__302: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 8 
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- mult --
	pop rbx
	pop rax
	mul rbx
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_159__29 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_159 
	ret_func_159__29: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_324 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__303 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__303: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

	;; -- jump --
	jmp addr_else_13

addr_if_148:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_325 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__304 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__304: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

addr_else_13:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_326 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__305 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__305: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_327 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__306 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__306: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_328 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__307 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__307: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- return --
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rax
 mov [basestack + 8 * 1], rax
	;; -- pop parameters --
	add rsp, 24 
	;; -- return empty --
	push 0
	;; -- jump to return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_250:
	;; -- function --
	jmp addr_func_end_251 
addr_func_251:
	mov rax, rsp
	add rax, 8 * 3

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_329 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__308 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__308: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_330 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__309 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__309: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_331 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__310 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__310: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_332 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__311 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__311: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_159__30 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_159 
	ret_func_159__30: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_333 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__312 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__312: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_334 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__313 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__313: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_335 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__314 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__314: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 8 
	push rax

	;; -- less --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 7
	and rax, 1
	pushf
	pop rbx
	shr rbx, 11
	and rbx, 1
	xor rax, rbx
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_149

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_336 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__315 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__315: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_337 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__316 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__316: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 8 
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- mult --
	pop rbx
	pop rax
	mul rbx
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_159__31 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_159 
	ret_func_159__31: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_338 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__317 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__317: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

	;; -- jump --
	jmp addr_else_14

addr_if_149:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_339 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__318 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__318: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

addr_else_14:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_340 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__319 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__319: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_341 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__320 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__320: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_342 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__321 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__321: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_343 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__322 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__322: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_344 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__323 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__323: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_345 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__324 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__324: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_346 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__325 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__325: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 8 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- subtract --
	pop rbx
	pop rax
	sub rax, rbx
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 8 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- return --
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rax
 mov [basestack + 8 * 1], rax
	;; -- pop parameters --
	add rsp, 24 
	;; -- return empty --
	push 0
	;; -- jump to return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_251:
	;; -- function --
	jmp addr_func_end_252 
addr_func_252:
	mov rax, rsp
	add rax, 8 * 3

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_347 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__326 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__326: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_348 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__327 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__327: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_159__32 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_159 
	ret_func_159__32: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_349 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__328 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__328: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_350 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__329 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__329: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 8 
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- mult --
	pop rbx
	pop rax
	mul rbx
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_159__33 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_159 
	ret_func_159__33: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_351 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__330 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__330: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_352 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__331 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__331: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_353 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__332 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__332: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_354 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__333 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__333: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 8 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- add --
	pop rbx
	pop rax
	add rax, rbx
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 8 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- return --
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rax
 mov [basestack + 8 * 1], rax
	;; -- pop parameters --
	add rsp, 24 
	;; -- return empty --
	push 0
	;; -- jump to return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_252:
	;; -- function --
	jmp addr_func_end_253 
addr_func_253:
	mov rax, rsp
	add rax, 8 * 3

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_355 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__334 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__334: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_356 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__335 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__335: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_159__34 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_159 
	ret_func_159__34: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_357 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__336 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__336: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_358 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__337 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__337: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 8 
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- mult --
	pop rbx
	pop rax
	mul rbx
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_159__35 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_159 
	ret_func_159__35: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_359 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__338 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__338: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_360 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__339 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__339: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_361 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__340 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__340: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_362 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__341 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__341: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- return --
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rax
 mov [basestack + 8 * 1], rax
	;; -- pop parameters --
	add rsp, 24 
	;; -- return empty --
	push 0
	;; -- jump to return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_253:
	;; -- function --
	jmp addr_func_end_254 
addr_func_254:
	mov rax, rsp
	add rax, 8 * 1

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_363 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__342 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__342: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_364 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__343 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__343: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_365 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__344 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__344: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_366 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__345 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__345: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_367 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__346 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__346: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 8 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- subtract --
	pop rbx
	pop rax
	sub rax, rbx
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 8 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- return --
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rax
 mov [basestack + 8 * 1], rax
	;; -- pop parameters --
	add rsp, 8 
	;; -- return empty --
	push 0
	;; -- jump to return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_254:
	;; -- function --
	jmp addr_func_end_255 
addr_func_255:
	mov rax, rsp
	add rax, 8 * 1

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_368 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__347 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__347: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_369 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__348 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__348: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_370 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__349 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__349: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_371 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__350 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__350: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_372 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__351 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__351: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 8 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- subtract --
	pop rbx
	pop rax
	sub rax, rbx
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 8 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- return --
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rax
 mov [basestack + 8 * 1], rax
	;; -- pop parameters --
	add rsp, 8 
	;; -- return empty --
	push 0
	;; -- jump to return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_255:
	;; -- function --
	jmp addr_func_end_256 
addr_func_256:
	mov rax, rsp
	add rax, 8 * 1

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_373 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__352 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__352: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_374 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__353 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__353: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_375 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__354 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__354: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_376 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__355 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__355: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- return --
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rax
 mov [basestack + 8 * 1], rax
	;; -- pop parameters --
	add rsp, 8 
	;; -- return empty --
	push 0
	;; -- jump to return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_256:
	;; -- function --
	jmp addr_func_end_257 
addr_func_257:
	mov rax, rsp
	add rax, 8 * 1

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_377 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__356 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__356: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_378 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__357 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__357: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_379 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__358 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__358: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_380 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__359 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__359: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_381 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__360 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__360: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 8 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- subtract --
	pop rbx
	pop rax
	sub rax, rbx
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 8 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- return --
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rax
 mov [basestack + 8 * 1], rax
	;; -- pop parameters --
	add rsp, 8 
	;; -- return empty --
	push 0
	;; -- jump to return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_257:
	;; -- function --
	jmp addr_func_end_258 
addr_func_258:
	mov rax, rsp
	add rax, 8 * 2

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_382 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__361 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__361: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_383 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__362 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__362: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_384 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__363 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__363: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_385 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__364 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__364: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_386 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__365 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__365: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1464 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_159__36 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_159 
	ret_func_159__36: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_387 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__366 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__366: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_388 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__367 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__367: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_389 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__368 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__368: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1464 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_159__37 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_159 
	ret_func_159__37: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_390 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__369 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__369: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_391 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__370 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__370: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- number --
	mov rax, 0 
	push rax

addr_while_condition_53:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- less --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 7
	and rax, 1
	pushf
	pop rbx
	shr rbx, 11
	and rbx, 1
	xor rax, rbx
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_while_end_53

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_392 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__371 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__371: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_159__38 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_159 
	ret_func_159__38: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_393 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__372 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__372: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- number --
	mov rax, 0 
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read at index -- 
	pop rax ;; index
	mov rbx, 8 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov rbx, [rbx]
	;; create bit mask
	mov rcx, 0
	sub rcx, 1
	and rbx, rcx
	push rbx

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 48 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_139__23 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_139 
	ret_func_139__23: ;; first number is function id, second number id call id

addr_while_condition_54:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 56 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- less --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 7
	and rax, 1
	pushf
	pop rbx
	shr rbx, 11
	and rbx, 1
	xor rax, rbx
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_while_end_54

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 48 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- add --
	pop rbx
	pop rax
	add rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 64 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_221__1 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_221 
	ret_func_221__1: ;; first number is function id, second number id call id

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 72 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- add --
	pop rbx
	pop rax
	add rax, rbx
	push rax

	;; -- assignment --
	mov rax, [basestack + 8 * 1]
	mov rbx, 40 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_394 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__373 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__373: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 72 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- negative --
	pop rax
	neg rax
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_150

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 56 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- assignment --
	mov rax, [basestack + 8 * 1]
	mov rbx, 40 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

addr_if_150:
	;; -- pop --
	add rsp, 16

	;; -- jump --
	jmp addr_while_condition_54

addr_while_end_54:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_395 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_156__374 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_156 
	ret_func_156__374: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- add --
	pop rbx
	pop rax
	add rax, rbx
	push rax

	;; -- assignment --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 24

	;; -- jump --
	jmp addr_while_condition_53

addr_while_end_53:
	;; -- return --
	;; -- pop local variables --
	add rsp, 8 
	;; -- restore stackframe -- 
	pop rax
 mov [basestack + 8 * 1], rax
	;; -- pop parameters --
	add rsp, 16 
	;; -- return empty --
	push 0
	;; -- jump to return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_258:
	;; -- function --
	jmp addr_func_end_259 
addr_func_259:
	mov rax, rsp
	add rax, 8 * 3

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- number --
	mov rax, 114 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_136__39 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_136 
	ret_func_136__39: ;; first number is function id, second number id call id

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_169__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_169 
	ret_func_169__0: ;; first number is function id, second number id call id

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 0 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 8 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_180__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_180 
	ret_func_180__0: ;; first number is function id, second number id call id

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 16 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_207__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_207 
	ret_func_207__0: ;; first number is function id, second number id call id

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 24 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_151

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- string --
	mov rax, string_396 
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_3__2 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_3 
	ret_func_3__2: ;; first number is function id, second number id call id

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 48 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

	;; -- jump --
	jmp addr_else_15

addr_if_151:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 577 
	push rax

	;; -- number --
	mov rax, 511 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_3__3 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_3 
	ret_func_3__3: ;; first number is function id, second number id call id

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 48 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

addr_else_15:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 48 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- less --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 7
	and rax, 1
	pushf
	pop rbx
	shr rbx, 11
	and rbx, 1
	xor rax, rbx
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_152

	;; -- string --
	mov rax, string_397 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_158__20 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_158 
	ret_func_158__20: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_158__21 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_158 
	ret_func_158__21: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- string --
	mov rax, string_398 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_158__22 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_158 
	ret_func_158__22: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- string --
	mov rax, string_399 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_158__23 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_158 
	ret_func_158__23: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 48 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_160__4 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_160 
	ret_func_160__4: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- string --
	mov rax, string_400 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_158__24 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_158 
	ret_func_158__24: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- number --
	mov rax, 1 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_60__2 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_60 
	ret_func_60__2: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

addr_if_152:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 48 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_210__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_210 
	ret_func_210__0: ;; first number is function id, second number id call id

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 40 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 56 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 64 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 72 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 80 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 88 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_401 
	push rax

	;; -- number --
	mov rax, 3 
	push rax

	;; -- number --
	mov rax, 8 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_216__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_216 
	ret_func_216__0: ;; first number is function id, second number id call id

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_402 
	push rax

	;; -- number --
	mov rax, 3 
	push rax

	;; -- number --
	mov rax, 8 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_216__1 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_216 
	ret_func_216__1: ;; first number is function id, second number id call id

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_403 
	push rax

	;; -- number --
	mov rax, 3 
	push rax

	;; -- number --
	mov rax, 8 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_216__2 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_216 
	ret_func_216__2: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_404 
	push rax

	;; -- number --
	mov rax, 4 
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_216__3 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_216 
	ret_func_216__3: ;; first number is function id, second number id call id

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_405 
	push rax

	;; -- number --
	mov rax, 3 
	push rax

	;; -- number --
	mov rax, 8 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 64 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_216__4 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_216 
	ret_func_216__4: ;; first number is function id, second number id call id

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_406 
	push rax

	;; -- number --
	mov rax, 4 
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_216__5 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_216 
	ret_func_216__5: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_407 
	push rax

	;; -- number --
	mov rax, 4 
	push rax

	;; -- number --
	mov rax, 8 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_216__6 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_216 
	ret_func_216__6: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- string --
	mov rax, string_408 
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 80 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_139__24 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_139 
	ret_func_139__24: ;; first number is function id, second number id call id

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_194__1 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_194 
	ret_func_194__1: ;; first number is function id, second number id call id

	;; -- number --
	mov rax, 0 
	push rax

addr_while_condition_55:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 112 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 7 
	push rax

	;; -- less --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 7
	and rax, 1
	pushf
	pop rbx
	shr rbx, 11
	and rbx, 1
	xor rax, rbx
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_while_end_55

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 104 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- string --
	mov rax, string_409 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_146__2 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_146 
	ret_func_146__2: ;; first number is function id, second number id call id

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 112 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 48 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_196__1 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_196 
	ret_func_196__1: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 112 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- add --
	pop rbx
	pop rax
	add rax, rbx
	push rax

	;; -- assignment --
	mov rax, [basestack + 8 * 1]
	mov rbx, 112 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

	;; -- jump --
	jmp addr_while_condition_55

addr_while_end_55:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 8 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- add --
	pop rbx
	pop rax
	add rax, rbx
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 8 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_410 
	push rax

	;; -- number --
	mov rax, 4 
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 56 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_212__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_212 
	ret_func_212__0: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 8 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- add --
	pop rbx
	pop rax
	add rax, rbx
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 8 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_411 
	push rax

	;; -- number --
	mov rax, 4 
	push rax

	;; -- string --
	mov rax, string_412 
	push rax

	;; -- number --
	mov rax, 8 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 72 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_181__2 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_181 
	ret_func_181__2: ;; first number is function id, second number id call id

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_212__1 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_212 
	ret_func_212__1: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 80 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 88 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 48 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 104 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_219__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_219 
	ret_func_219__0: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 96 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_207__1 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_207 
	ret_func_207__1: ;; first number is function id, second number id call id

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 104 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 112 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 1
	shl r9, 8 ;; size
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 113 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 1
	shl r9, 8 ;; size
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 80 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 24 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_259:
	;; -- function --
	jmp addr_func_end_260 
addr_func_260:
	mov rax, rsp
	add rax, 8 * 1

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_170__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_170 
	ret_func_170__0: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 8 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- not equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	mov rbx, 1
	sub rbx, rax
	push rbx

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_153

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 8 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_137__33 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_137 
	ret_func_137__33: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

addr_if_153:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- not equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	mov rbx, 1
	sub rbx, rax
	push rbx

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_154

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_137__34 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_137 
	ret_func_137__34: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

addr_if_154:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 24 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_208__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_208 
	ret_func_208__0: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 104 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_208__1 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_208 
	ret_func_208__1: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 48 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_4__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_4 
	ret_func_4__0: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_211__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_211 
	ret_func_211__0: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_137__35 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_137 
	ret_func_137__35: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- return --
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rax
 mov [basestack + 8 * 1], rax
	;; -- pop parameters --
	add rsp, 8 
	;; -- return empty --
	push 0
	;; -- jump to return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_260:
	;; -- function --
	jmp addr_func_end_261 
addr_func_261:
	mov rax, rsp
	add rax, 8 * 1

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 8 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- not equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	mov rbx, 1
	sub rbx, rax
	push rbx

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_155

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 8 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_137__36 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_137 
	ret_func_137__36: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

addr_if_155:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 8 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_180__1 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_180 
	ret_func_180__1: ;; first number is function id, second number id call id

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 16 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

addr_while_condition_56:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1416 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_and_24

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- not equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	mov rbx, 1
	sub rbx, rax
	push rbx

	;; -- jump --
	jmp addr_end_and_24

addr_and_24:
	;; -- number --
	mov rax, 0  
	push rax

addr_end_and_24:
	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_while_end_56

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 0 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_170__1 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_170 
	ret_func_170__1: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_137__37 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_137 
	ret_func_137__37: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_180__2 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_180 
	ret_func_180__2: ;; first number is function id, second number id call id

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 16 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 8

	;; -- jump --
	jmp addr_while_condition_56

addr_while_end_56:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 8 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_261:
	;; -- function --
	jmp addr_func_end_262 
addr_func_262:
	mov rax, rsp
	add rax, 8 * 3

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 112 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 1
	shl r9, 8 ;; size
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_158__25 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_158 
	ret_func_158__25: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- string --
	mov rax, string_413 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_158__26 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_158 
	ret_func_158__26: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 24 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_160__5 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_160 
	ret_func_160__5: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- string --
	mov rax, string_414 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_158__27 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_158 
	ret_func_158__27: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 32 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_160__6 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_160 
	ret_func_160__6: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- string --
	mov rax, string_415 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_158__28 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_158 
	ret_func_158__28: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 8 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_157__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_157 
	ret_func_157__0: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- string --
	mov rax, string_416 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_158__29 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_158 
	ret_func_158__29: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_158__30 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_158 
	ret_func_158__30: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- string --
	mov rax, string_417 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_158__31 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_158 
	ret_func_158__31: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

addr_while_condition_57:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1312 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- not equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	mov rbx, 1
	sub rbx, rax
	push rbx

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_and_25

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1392 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- not equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	mov rbx, 1
	sub rbx, rax
	push rbx

	;; -- jump --
	jmp addr_end_and_25

addr_and_25:
	;; -- number --
	mov rax, 0  
	push rax

addr_end_and_25:
	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_and_26

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1288 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- not equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	mov rbx, 1
	sub rbx, rax
	push rbx

	;; -- jump --
	jmp addr_end_and_26

addr_and_26:
	;; -- number --
	mov rax, 0  
	push rax

addr_end_and_26:
	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_and_27

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1416 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- not equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	mov rbx, 1
	sub rbx, rax
	push rbx

	;; -- jump --
	jmp addr_end_and_27

addr_and_27:
	;; -- number --
	mov rax, 0  
	push rax

addr_end_and_27:
	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_while_end_57

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_261__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_261 
	ret_func_261__0: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

	;; -- jump --
	jmp addr_while_condition_57

addr_while_end_57:
	;; -- return --
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rax
 mov [basestack + 8 * 1], rax
	;; -- pop parameters --
	add rsp, 24 
	;; -- return empty --
	push 0
	;; -- jump to return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_262:
	;; -- function --
	jmp addr_func_end_263 
addr_func_263:
	mov rax, rsp
	add rax, 8 * 3

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_261__1 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_261 
	ret_func_261__1: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- not equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	mov rbx, 1
	sub rbx, rax
	push rbx

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_156

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_262__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_262 
	ret_func_262__0: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1416 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- not equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	mov rbx, 1
	sub rbx, rax
	push rbx

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_157

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1424 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 40 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

addr_if_157:
	;; -- pop --
	add rsp, 0

addr_if_156:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 8 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 24 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_263:
	;; -- function --
	jmp addr_func_end_264 
addr_func_264:
	mov rax, rsp
	add rax, 8 * 2

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1408 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_263__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_263 
	ret_func_263__0: ;; first number is function id, second number id call id

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1424 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_158

	;; -- number --
	mov rax, 0 
	push rax

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 8 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 16 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
	;; -- pop --
	add rsp, 0

addr_if_158:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 8 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_217__1 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_217 
	ret_func_217__1: ;; first number is function id, second number id call id

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_159

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- string --
	mov rax, string_418 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_262__1 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_262 
	ret_func_262__1: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

addr_if_159:
addr_while_condition_58:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1264 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_while_end_58

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_261__2 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_261 
	ret_func_261__2: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1272 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- string --
	mov rax, string_419 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_263__1 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_263 
	ret_func_263__1: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_218__1 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_218 
	ret_func_218__1: ;; first number is function id, second number id call id

	;; -- assignment --
	mov rax, [basestack + 8 * 1]
	mov rbx, 40 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

	;; -- jump --
	jmp addr_while_condition_58

addr_while_end_58:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 16 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 16 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_264:
	;; -- function --
	jmp addr_func_end_265 
addr_func_265:
	mov rax, rsp
	add rax, 8 * 2

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- function --
	jmp addr_func_end_266 
addr_func_266:
	mov rax, rsp
	add rax, 8 * 2

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 2]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 2], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_261__3 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_261 
	ret_func_261__3: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1144 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_160

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_261__4 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_261 
	ret_func_261__4: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_265__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_265 
	ret_func_265__0: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 32 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 24 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- not equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	mov rbx, 1
	sub rbx, rax
	push rbx

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_161

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_420 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_262__2 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_262 
	ret_func_262__2: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

addr_if_161:
	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 8 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_253__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_253 
	ret_func_253__0: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

	;; -- jump --
	jmp addr_else_16

addr_if_160:
	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 8 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_252__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_252 
	ret_func_252__0: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

addr_else_16:
	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 24 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 32 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- return --
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rax
 mov [basestack + 8 * 2], rax
	;; -- pop parameters --
	add rsp, 16 
	;; -- return empty --
	push 0
	;; -- jump to return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_266:
	;; -- function --
	jmp addr_func_end_267 
addr_func_267:
	mov rax, rsp
	add rax, 8 * 2

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 2]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 2], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_261__5 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_261 
	ret_func_261__5: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1248 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- string --
	mov rax, string_421 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_263__2 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_263 
	ret_func_263__2: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_162

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1256 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- string --
	mov rax, string_422 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_263__3 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_263 
	ret_func_263__3: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

	;; -- jump --
	jmp addr_else_17

addr_if_162:
	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_265__1 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_265 
	ret_func_265__1: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- read at index -- 
	pop rax ;; index
	mov rbx, 8 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov rbx, [rbx]
	;; create bit mask
	mov rcx, 0
	sub rcx, 1
	and rbx, rcx
	push rbx

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 24 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 32 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- not equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	mov rbx, 1
	sub rbx, rax
	push rbx

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_and_28

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- read at index -- 
	pop rax ;; index
	mov rbx, 8 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov rbx, [rbx]
	;; create bit mask
	mov rcx, 0
	sub rcx, 1
	and rbx, rcx
	push rbx

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 24 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_423 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_141__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_141 
	ret_func_141__0: ;; first number is function id, second number id call id

	;; -- number --
	mov rax, 0 
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- jump --
	jmp addr_end_and_28

addr_and_28:
	;; -- number --
	mov rax, 0  
	push rax

addr_end_and_28:
	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_163

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_424 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_262__3 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_262 
	ret_func_262__3: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

addr_if_163:
	;; -- number --
	mov rax, 1 
	push rax

addr_while_condition_59:
	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- less --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 7
	and rax, 1
	pushf
	pop rbx
	shr rbx, 11
	and rbx, 1
	xor rax, rbx
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_while_end_59

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1392 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- string --
	mov rax, string_425 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_263__4 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_263 
	ret_func_263__4: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_265__2 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_265 
	ret_func_265__2: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read at index -- 
	pop rax ;; index
	mov rbx, 8 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov rbx, [rbx]
	;; create bit mask
	mov rcx, 0
	sub rcx, 1
	and rbx, rcx
	push rbx

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 24 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 32 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- not equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	mov rbx, 1
	sub rbx, rax
	push rbx

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_and_29

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read at index -- 
	pop rax ;; index
	mov rbx, 8 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov rbx, [rbx]
	;; create bit mask
	mov rcx, 0
	sub rcx, 1
	and rbx, rcx
	push rbx

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 24 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_426 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_141__1 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_141 
	ret_func_141__1: ;; first number is function id, second number id call id

	;; -- number --
	mov rax, 0 
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- jump --
	jmp addr_end_and_29

addr_and_29:
	;; -- number --
	mov rax, 0  
	push rax

addr_end_and_29:
	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_164

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_427 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_262__4 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_262 
	ret_func_262__4: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

addr_if_164:
	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- add --
	pop rbx
	pop rax
	add rax, rbx
	push rax

	;; -- assignment --
	mov rax, [basestack + 8 * 2]
	mov rbx, 40 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

	;; -- jump --
	jmp addr_while_condition_59

addr_while_end_59:
	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1256 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- string --
	mov rax, string_428 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_263__5 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_263 
	ret_func_263__5: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 16

addr_else_17:
	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 24 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 32 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_226__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_226 
	ret_func_226__0: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 32 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- add --
	pop rbx
	pop rax
	add rax, rbx
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 32 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 8 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 32 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- return --
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rax
 mov [basestack + 8 * 2], rax
	;; -- pop parameters --
	add rsp, 16 
	;; -- return empty --
	push 0
	;; -- jump to return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_267:
	;; -- function --
	jmp addr_func_end_268 
addr_func_268:
	mov rax, rsp
	add rax, 8 * 2

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 2]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 2], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 8 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_215__1 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_215 
	ret_func_215__1: ;; first number is function id, second number id call id

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- not equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	mov rbx, 1
	sub rbx, rax
	push rbx

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_165

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_166

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 8 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 16 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 2], rbx
	;; -- pop parameters --
	add rsp, 16 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
	;; -- pop --
	add rsp, 0

addr_if_166:
	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_429 
	push rax

	;; -- number --
	mov rax, 3 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_217__2 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_217 
	ret_func_217__2: ;; first number is function id, second number id call id

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_167

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 8 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_151__1 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_151 
	ret_func_151__1: ;; first number is function id, second number id call id

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 48 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_245__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_245 
	ret_func_245__0: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 48 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_137__38 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_137 
	ret_func_137__38: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 8

	;; -- jump --
	jmp addr_else_18

addr_if_167:
	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_430 
	push rax

	;; -- number --
	mov rax, 4 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_217__3 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_217 
	ret_func_217__3: ;; first number is function id, second number id call id

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_168

	;; -- number --
	mov rax, 2 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_136__40 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_136 
	ret_func_136__40: ;; first number is function id, second number id call id

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 48 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 8 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- write at index -- 
	pop rcx ;; value
	pop rax ;; index
	mov rbx, 1 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov r8, [rbx]
	;; create bit mask
	mov r9, 1
	shl r9, 8;; size
	sub r9, 1
	and rcx, r9
	not r9
	and r8, r9
	add r8, rcx
	mov [rbx], r8
	push rcx

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 48 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- character --
	mov rax, 0x00 
	push rax

	;; -- write at index -- 
	pop rcx ;; value
	pop rax ;; index
	mov rbx, 1 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov r8, [rbx]
	;; create bit mask
	mov r9, 1
	shl r9, 8;; size
	sub r9, 1
	and rcx, r9
	not r9
	and r8, r9
	add r8, rcx
	mov [rbx], r8
	push rcx

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 48 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_246__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_246 
	ret_func_246__0: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 48 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_137__39 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_137 
	ret_func_137__39: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 8

	;; -- jump --
	jmp addr_else_18

addr_if_168:
	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_431 
	push rax

	;; -- number --
	mov rax, 3 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_217__4 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_217 
	ret_func_217__4: ;; first number is function id, second number id call id

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_169

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 8 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_247__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_247 
	ret_func_247__0: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

	;; -- jump --
	jmp addr_else_18

addr_if_169:
	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_432 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_262__5 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_262 
	ret_func_262__5: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- string --
	mov rax, string_433 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_158__32 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_158 
	ret_func_158__32: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_158__33 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_158 
	ret_func_158__33: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- string --
	mov rax, string_434 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_158__34 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_158 
	ret_func_158__34: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

addr_else_18:
	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_261__6 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_261 
	ret_func_261__6: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- number --
	mov rax, 0 
	push rax

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 16 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 2], rbx
	;; -- pop parameters --
	add rsp, 16 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
	;; -- pop --
	add rsp, 0

addr_if_165:
	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 8 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_213__1 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_213 
	ret_func_213__1: ;; first number is function id, second number id call id

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 48 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- not equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	mov rbx, 1
	sub rbx, rax
	push rbx

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_170

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 48 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_266__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_266 
	ret_func_266__0: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- number --
	mov rax, 0 
	push rax

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 24 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 2], rbx
	;; -- pop parameters --
	add rsp, 16 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
	;; -- pop --
	add rsp, 0

addr_if_170:
	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 8 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_220__1 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_220 
	ret_func_220__1: ;; first number is function id, second number id call id

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 56 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- not equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	mov rbx, 1
	sub rbx, rax
	push rbx

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_171

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 56 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_267__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_267 
	ret_func_267__0: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- number --
	mov rax, 0 
	push rax

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 32 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 2], rbx
	;; -- pop parameters --
	add rsp, 16 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
	;; -- pop --
	add rsp, 0

addr_if_171:
	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- string --
	mov rax, string_435 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_262__6 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_262 
	ret_func_262__6: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- number --
	mov rax, 0 
	push rax

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 32 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 2], rbx
	;; -- pop parameters --
	add rsp, 16 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_268:
	;; -- function --
	jmp addr_func_end_269 
addr_func_269:
	mov rax, rsp
	add rax, 8 * 2

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 2]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 2], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 8 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_145__13 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_145 
	ret_func_145__13: ;; first number is function id, second number id call id

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_261__7 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_261 
	ret_func_261__7: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_436 
	push rax

	;; -- number --
	mov rax, 3 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_217__5 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_217 
	ret_func_217__5: ;; first number is function id, second number id call id

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 32 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_172

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_152__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_152 
	ret_func_152__0: ;; first number is function id, second number id call id

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_137__40 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_137 
	ret_func_137__40: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 48 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 24 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 2], rbx
	;; -- pop parameters --
	add rsp, 16 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
	;; -- pop --
	add rsp, 8

addr_if_172:
	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_245__1 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_245 
	ret_func_245__1: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_137__41 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_137 
	ret_func_137__41: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- number --
	mov rax, 0 
	push rax

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 16 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 2], rbx
	;; -- pop parameters --
	add rsp, 16 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_269:
	;; -- function --
	jmp addr_func_end_270 
addr_func_270:
	mov rax, rsp
	add rax, 8 * 2

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 2]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 2], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 8 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_261__8 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_261 
	ret_func_261__8: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_437 
	push rax

	;; -- number --
	mov rax, 4 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_217__6 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_217 
	ret_func_217__6: ;; first number is function id, second number id call id

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 32 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_173

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_153__1 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_153 
	ret_func_153__1: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 8 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 2], rbx
	;; -- pop parameters --
	add rsp, 16 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
	;; -- pop --
	add rsp, 0

	;; -- jump --
	jmp addr_else_19

addr_if_173:
	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_246__1 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_246 
	ret_func_246__1: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

addr_else_19:
	;; -- number --
	mov rax, 0 
	push rax

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 8 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 2], rbx
	;; -- pop parameters --
	add rsp, 16 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_270:
	;; -- function --
	jmp addr_func_end_271 
addr_func_271:
	mov rax, rsp
	add rax, 8 * 2

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 2]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 2], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 104 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 104 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 8 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_145__14 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_145 
	ret_func_145__14: ;; first number is function id, second number id call id

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_209__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_209 
	ret_func_209__0: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_261__9 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_261 
	ret_func_261__9: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_438 
	push rax

	;; -- number --
	mov rax, 3 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_217__7 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_217 
	ret_func_217__7: ;; first number is function id, second number id call id

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 32 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_174

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 8 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 2], rbx
	;; -- pop parameters --
	add rsp, 16 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
	;; -- pop --
	add rsp, 0

addr_if_174:
	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_247__1 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_247 
	ret_func_247__1: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- number --
	mov rax, 0 
	push rax

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 8 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 2], rbx
	;; -- pop parameters --
	add rsp, 16 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_271:
	;; -- function --
	jmp addr_func_end_272 
addr_func_272:
	mov rax, rsp
	add rax, 8 * 2

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 2]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 2], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_261__10 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_261 
	ret_func_261__10: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1248 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- string --
	mov rax, string_439 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_263__6 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_263 
	ret_func_263__6: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- string --
	mov rax, string_440 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_264__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_264 
	ret_func_264__0: ;; first number is function id, second number id call id

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_175

	;; -- number --
	mov rax, 0 
	push rax

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 8 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 2], rbx
	;; -- pop parameters --
	add rsp, 16 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
	;; -- pop --
	add rsp, 0

addr_if_175:
	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1256 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- string --
	mov rax, string_441 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_263__7 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_263 
	ret_func_263__7: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- number --
	mov rax, 0 
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_176

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 8 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- assignment --
	mov rax, [basestack + 8 * 2]
	mov rbx, 40 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

	;; -- jump --
	jmp addr_else_20

addr_if_176:
	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- assignment --
	mov rax, [basestack + 8 * 2]
	mov rbx, 40 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

addr_else_20:
	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_442 
	push rax

	;; -- number --
	mov rax, 3 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_217__8 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_217 
	ret_func_217__8: ;; first number is function id, second number id call id

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 32 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_177

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 16 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 2], rbx
	;; -- pop parameters --
	add rsp, 16 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
	;; -- pop --
	add rsp, 0

addr_if_177:
	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_151__2 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_151 
	ret_func_151__2: ;; first number is function id, second number id call id

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 48 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_245__2 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_245 
	ret_func_245__2: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 48 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_137__42 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_137 
	ret_func_137__42: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- number --
	mov rax, 0 
	push rax

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 24 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 2], rbx
	;; -- pop parameters --
	add rsp, 16 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_272:
	;; -- function --
	jmp addr_func_end_273 
addr_func_273:
	mov rax, rsp
	add rax, 8 * 2

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 2]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 2], rax

	;; -- function --
	jmp addr_func_end_274 
addr_func_274:
	mov rax, rsp
	add rax, 8 * 2

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 3]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 3], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 3]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 3]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1408 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_178

	;; -- identifier --
	mov rax, [basestack + 8 * 3]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 3]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_268__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_268 
	ret_func_268__0: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 8 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 3], rbx
	;; -- pop parameters --
	add rsp, 16 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
	;; -- pop --
	add rsp, 0

	;; -- jump --
	jmp addr_else_21

addr_if_178:
	;; -- identifier --
	mov rax, [basestack + 8 * 3]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1120 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_179

	;; -- identifier --
	mov rax, [basestack + 8 * 3]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 3]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_269__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_269 
	ret_func_269__0: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 8 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 3], rbx
	;; -- pop parameters --
	add rsp, 16 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
	;; -- pop --
	add rsp, 0

	;; -- jump --
	jmp addr_else_21

addr_if_179:
	;; -- identifier --
	mov rax, [basestack + 8 * 3]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1296 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_180

	;; -- identifier --
	mov rax, [basestack + 8 * 3]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 3]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_270__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_270 
	ret_func_270__0: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 8 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 3], rbx
	;; -- pop parameters --
	add rsp, 16 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
	;; -- pop --
	add rsp, 0

	;; -- jump --
	jmp addr_else_21

addr_if_180:
	;; -- identifier --
	mov rax, [basestack + 8 * 3]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1304 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_181

	;; -- identifier --
	mov rax, [basestack + 8 * 3]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 3]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_271__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_271 
	ret_func_271__0: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 8 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 3], rbx
	;; -- pop parameters --
	add rsp, 16 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
	;; -- pop --
	add rsp, 0

	;; -- jump --
	jmp addr_else_21

addr_if_181:
	;; -- identifier --
	mov rax, [basestack + 8 * 3]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1136 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_182

	;; -- identifier --
	mov rax, [basestack + 8 * 3]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_261__11 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_261 
	ret_func_261__11: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 3]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 3]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_274__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_274 
	ret_func_274__0: ;; first number is function id, second number id call id

	;; -- identifier --
	mov rax, [basestack + 8 * 3]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_183

	;; -- identifier --
	mov rax, [basestack + 8 * 3]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- negative --
	pop rax
	neg rax
	push rax

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 16 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 3], rbx
	;; -- pop parameters --
	add rsp, 16 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
	;; -- pop --
	add rsp, 0

	;; -- jump --
	jmp addr_else_22

addr_if_183:
	;; -- identifier --
	mov rax, [basestack + 8 * 3]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_256__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_256 
	ret_func_256__0: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

addr_else_22:
	;; -- pop --
	add rsp, 8

	;; -- jump --
	jmp addr_else_21

addr_if_182:
	;; -- identifier --
	mov rax, [basestack + 8 * 3]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1248 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_184

	;; -- identifier --
	mov rax, [basestack + 8 * 3]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_261__12 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_261 
	ret_func_261__12: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 3]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 3]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1408 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_185

	;; -- identifier --
	mov rax, [basestack + 8 * 3]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 3]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 8 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 3]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_217__9 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_217 
	ret_func_217__9: ;; first number is function id, second number id call id

	;; -- identifier --
	mov rax, [basestack + 8 * 3]
	mov rbx, 48 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- not equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	mov rbx, 1
	sub rbx, rax
	push rbx

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_186

	;; -- identifier --
	mov rax, [basestack + 8 * 3]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- string --
	mov rax, string_443 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_264__1 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_264 
	ret_func_264__1: ;; first number is function id, second number id call id

	;; -- assignment --
	mov rax, [basestack + 8 * 3]
	mov rbx, 48 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 3]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1256 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- string --
	mov rax, string_444 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_263__8 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_263 
	ret_func_263__8: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 3]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 3]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_273__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_273 
	ret_func_273__0: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 3]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 3]
	mov rbx, 48 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 32 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- number --
	mov rax, 0 
	push rax

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 24 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 3], rbx
	;; -- pop parameters --
	add rsp, 16 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
	;; -- pop --
	add rsp, 0

addr_if_186:
	;; -- pop --
	add rsp, 8

addr_if_185:
	;; -- identifier --
	mov rax, [basestack + 8 * 3]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 3]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_265__3 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_265 
	ret_func_265__3: ;; first number is function id, second number id call id

	;; -- identifier --
	mov rax, [basestack + 8 * 3]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1256 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- string --
	mov rax, string_445 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_263__9 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_263 
	ret_func_263__9: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 3]
	mov rbx, 48 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 24 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 3], rbx
	;; -- pop parameters --
	add rsp, 16 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
	;; -- pop --
	add rsp, 16

	;; -- jump --
	jmp addr_else_21

addr_if_184:
	;; -- identifier --
	mov rax, [basestack + 8 * 3]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1384 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_187

	;; -- identifier --
	mov rax, [basestack + 8 * 3]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 3]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_272__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_272 
	ret_func_272__0: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

	;; -- jump --
	jmp addr_else_21

addr_if_187:
	;; -- identifier --
	mov rax, [basestack + 8 * 3]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 3]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_446 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_262__7 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_262 
	ret_func_262__7: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

addr_else_21:
	;; -- number --
	mov rax, 0 
	push rax

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 8 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 3], rbx
	;; -- pop parameters --
	add rsp, 16 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_274:
	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_274__1 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_274 
	ret_func_274__1: ;; first number is function id, second number id call id

	;; -- function --
	jmp addr_func_end_275 
addr_func_275:
	mov rax, rsp
	add rax, 8 * 1

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 3]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 3], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 3]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 32 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 32 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 1
	shl rbx, 8 ;; size
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_188

	;; -- identifier --
	mov rax, [basestack + 8 * 3]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 3]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_447 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_262__8 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_262 
	ret_func_262__8: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- return --
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rax
 mov [basestack + 8 * 3], rax
	;; -- pop parameters --
	add rsp, 8 
	;; -- return empty --
	push 0
	;; -- jump to return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
	;; -- pop --
	add rsp, 0

addr_if_188:
	;; -- identifier --
	mov rax, [basestack + 8 * 3]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 32 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 33 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 3]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_261__13 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_261 
	ret_func_261__13: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 3]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_265__4 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_265 
	ret_func_265__4: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 3]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 32 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 3]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_448 
	push rax

	;; -- number --
	mov rax, 3 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_217__10 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_217 
	ret_func_217__10: ;; first number is function id, second number id call id

	;; -- not equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	mov rbx, 1
	sub rbx, rax
	push rbx

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_189

	;; -- identifier --
	mov rax, [basestack + 8 * 3]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 3]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_449 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_262__9 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_262 
	ret_func_262__9: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- return --
	;; -- pop local variables --
	add rsp, 8 
	;; -- restore stackframe -- 
	pop rax
 mov [basestack + 8 * 3], rax
	;; -- pop parameters --
	add rsp, 8 
	;; -- return empty --
	push 0
	;; -- jump to return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
	;; -- pop --
	add rsp, 0

addr_if_189:
	;; -- identifier --
	mov rax, [basestack + 8 * 3]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1272 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- string --
	mov rax, string_450 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_263__10 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_263 
	ret_func_263__10: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 3]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1144 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_190

	;; -- identifier --
	mov rax, [basestack + 8 * 3]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_261__14 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_261 
	ret_func_261__14: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 3]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_265__5 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_265 
	ret_func_265__5: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 3]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 3]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 32 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- not equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	mov rbx, 1
	sub rbx, rax
	push rbx

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_191

	;; -- identifier --
	mov rax, [basestack + 8 * 3]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 3]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_451 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_262__10 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_262 
	ret_func_262__10: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

addr_if_191:
	;; -- identifier --
	mov rax, [basestack + 8 * 3]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 3]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 8 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_249__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_249 
	ret_func_249__0: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

	;; -- jump --
	jmp addr_else_23

addr_if_190:
	;; -- identifier --
	mov rax, [basestack + 8 * 3]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 3]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 8 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_248__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_248 
	ret_func_248__0: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

addr_else_23:
	;; -- identifier --
	mov rax, [basestack + 8 * 3]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 3]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 32 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- return --
	;; -- pop local variables --
	add rsp, 8 
	;; -- restore stackframe -- 
	pop rax
 mov [basestack + 8 * 3], rax
	;; -- pop parameters --
	add rsp, 8 
	;; -- return empty --
	push 0
	;; -- jump to return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_275:
	;; -- function --
	jmp addr_func_end_276 
addr_func_276:
	mov rax, rsp
	add rax, 8 * 1

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 3]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 3], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 3]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_261__15 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_261 
	ret_func_261__15: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 3]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 32 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 3]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1408 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- string --
	mov rax, string_452 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_263__11 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_263 
	ret_func_263__11: ;; first number is function id, second number id call id

	;; -- identifier --
	mov rax, [basestack + 8 * 3]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_192

	;; -- identifier --
	mov rax, [basestack + 8 * 3]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 3]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- string --
	mov rax, string_453 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_262__11 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_262 
	ret_func_262__11: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- return --
	;; -- pop local variables --
	add rsp, 16 
	;; -- restore stackframe -- 
	pop rax
 mov [basestack + 8 * 3], rax
	;; -- pop parameters --
	add rsp, 8 
	;; -- return empty --
	push 0
	;; -- jump to return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
	;; -- pop --
	add rsp, 0

addr_if_192:
	;; -- identifier --
	mov rax, [basestack + 8 * 3]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 3]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 8 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 3]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_189__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_189 
	ret_func_189__0: ;; first number is function id, second number id call id

	;; -- identifier --
	mov rax, [basestack + 8 * 3]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_193

	;; -- identifier --
	mov rax, [basestack + 8 * 3]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 3]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- string --
	mov rax, string_454 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_262__12 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_262 
	ret_func_262__12: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- return --
	;; -- pop local variables --
	add rsp, 24 
	;; -- restore stackframe -- 
	pop rax
 mov [basestack + 8 * 3], rax
	;; -- pop parameters --
	add rsp, 8 
	;; -- return empty --
	push 0
	;; -- jump to return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
	;; -- pop --
	add rsp, 0

addr_if_193:
	;; -- identifier --
	mov rax, [basestack + 8 * 3]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 24 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 3]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 8 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- read at index -- 
	pop rax ;; index
	mov rbx, 8 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov rbx, [rbx]
	;; create bit mask
	mov rcx, 0
	sub rcx, 1
	and rbx, rcx
	push rbx

	;; -- identifier --
	mov rax, [basestack + 8 * 3]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1144 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_194

	;; -- identifier --
	mov rax, [basestack + 8 * 3]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_261__16 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_261 
	ret_func_261__16: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 3]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_265__6 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_265 
	ret_func_265__6: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 3]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 32 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 3]
	mov rbx, 48 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- not equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	mov rbx, 1
	sub rbx, rax
	push rbx

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_195

	;; -- identifier --
	mov rax, [basestack + 8 * 3]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 3]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_455 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_262__13 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_262 
	ret_func_262__13: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

addr_if_195:
	;; -- identifier --
	mov rax, [basestack + 8 * 3]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 3]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 3]
	mov rbx, 48 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 8 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_251__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_251 
	ret_func_251__0: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

	;; -- jump --
	jmp addr_else_24

addr_if_194:
	;; -- identifier --
	mov rax, [basestack + 8 * 3]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 3]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 3]
	mov rbx, 48 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 8 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_250__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_250 
	ret_func_250__0: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

addr_else_24:
	;; -- identifier --
	mov rax, [basestack + 8 * 3]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 3]
	mov rbx, 48 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 32 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- return --
	;; -- pop local variables --
	add rsp, 32 
	;; -- restore stackframe -- 
	pop rax
 mov [basestack + 8 * 3], rax
	;; -- pop parameters --
	add rsp, 8 
	;; -- return empty --
	push 0
	;; -- jump to return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_276:
addr_while_condition_60:
	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1264 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump --
	je addr_or_20

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1400 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- jump --
	jmp addr_end_or_20

addr_or_20:
	;; -- number --
	mov rax, 1  
	push rax

addr_end_or_20:
	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_while_end_60

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_196

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_456 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_262__14 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_262 
	ret_func_262__14: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- number --
	mov rax, 0 
	push rax

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 8 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 2], rbx
	;; -- pop parameters --
	add rsp, 16 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
	;; -- pop --
	add rsp, 0

addr_if_196:
	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1264 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_197

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_275__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_275 
	ret_func_275__0: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

addr_if_197:
	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1400 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_198

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_276__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_276 
	ret_func_276__0: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

addr_if_198:
	;; -- pop --
	add rsp, 0

	;; -- jump --
	jmp addr_while_condition_60

addr_while_end_60:
	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 8 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 2], rbx
	;; -- pop parameters --
	add rsp, 16 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_273:
	;; -- function --
	jmp addr_func_end_277 
addr_func_277:
	mov rax, rsp
	add rax, 8 * 2

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 2]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 2], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_273__1 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_273 
	ret_func_273__1: ;; first number is function id, second number id call id

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 32 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_457 
	push rax

	;; -- number --
	mov rax, 3 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_217__11 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_217 
	ret_func_217__11: ;; first number is function id, second number id call id

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

addr_while_condition_61:
	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 56 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1152 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump --
	je addr_or_21

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 56 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1168 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- jump --
	jmp addr_end_or_21

addr_or_21:
	;; -- number --
	mov rax, 1  
	push rax

addr_end_or_21:
	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_while_end_61

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_261__17 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_261 
	ret_func_261__17: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_273__2 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_273 
	ret_func_273__2: ;; first number is function id, second number id call id

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 48 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- not equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	mov rbx, 1
	sub rbx, rax
	push rbx

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump --
	je addr_or_22

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 32 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 48 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- not equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	mov rbx, 1
	sub rbx, rax
	push rbx

	;; -- jump --
	jmp addr_end_or_22

addr_or_22:
	;; -- number --
	mov rax, 1  
	push rax

addr_end_or_22:
	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_199

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_458 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_262__15 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_262 
	ret_func_262__15: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- number --
	mov rax, 0 
	push rax

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 40 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 2], rbx
	;; -- pop parameters --
	add rsp, 16 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
	;; -- pop --
	add rsp, 0

addr_if_199:
	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 56 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1152 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_200

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_201

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 64 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- bit and --
	pop rbx
	pop rax
	and rax, rbx
	push rax
	;; -- assignment --
	mov rax, [basestack + 8 * 2]
	mov rbx, 32 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

	;; -- jump --
	jmp addr_else_25

addr_if_201:
	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_230__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_230 
	ret_func_230__0: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

addr_else_25:
	;; -- pop --
	add rsp, 0

addr_if_200:
	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 56 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1168 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_202

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_203

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 64 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- bit or --
	pop rbx
	pop rax
	or rax, rbx
	push rax
	;; -- assignment --
	mov rax, [basestack + 8 * 2]
	mov rbx, 32 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

	;; -- jump --
	jmp addr_else_26

addr_if_203:
	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_231__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_231 
	ret_func_231__0: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

addr_else_26:
	;; -- pop --
	add rsp, 0

addr_if_202:
	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- assignment --
	mov rax, [basestack + 8 * 2]
	mov rbx, 56 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 8

	;; -- jump --
	jmp addr_while_condition_61

addr_while_end_61:
	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 32 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 2], rbx
	;; -- pop parameters --
	add rsp, 16 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_277:
	;; -- function --
	jmp addr_func_end_278 
addr_func_278:
	mov rax, rsp
	add rax, 8 * 2

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 2]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 2], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_277__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_277 
	ret_func_277__0: ;; first number is function id, second number id call id

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

addr_while_condition_62:
	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1432 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_while_end_62

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_261__18 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_261 
	ret_func_261__18: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_277__1 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_277 
	ret_func_277__1: ;; first number is function id, second number id call id

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_204

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 48 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- mult --
	pop rbx
	pop rax
	mul rbx
	push rax

	;; -- assignment --
	mov rax, [basestack + 8 * 2]
	mov rbx, 32 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

	;; -- jump --
	jmp addr_else_27

addr_if_204:
	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_257__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_257 
	ret_func_257__0: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

addr_else_27:
	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- assignment --
	mov rax, [basestack + 8 * 2]
	mov rbx, 40 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 8

	;; -- jump --
	jmp addr_while_condition_62

addr_while_end_62:
	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 16 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 2], rbx
	;; -- pop parameters --
	add rsp, 16 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_278:
	;; -- function --
	jmp addr_func_end_279 
addr_func_279:
	mov rax, rsp
	add rax, 8 * 2

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 2]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 2], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_278__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_278 
	ret_func_278__0: ;; first number is function id, second number id call id

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 32 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_459 
	push rax

	;; -- number --
	mov rax, 3 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_217__12 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_217 
	ret_func_217__12: ;; first number is function id, second number id call id

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_460 
	push rax

	;; -- number --
	mov rax, 4 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_217__13 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_217 
	ret_func_217__13: ;; first number is function id, second number id call id

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

addr_while_condition_63:
	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 64 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1128 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump --
	je addr_or_23

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 64 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1136 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- jump --
	jmp addr_end_or_23

addr_or_23:
	;; -- number --
	mov rax, 1  
	push rax

addr_end_or_23:
	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_while_end_63

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_261__19 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_261 
	ret_func_261__19: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_278__1 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_278 
	ret_func_278__1: ;; first number is function id, second number id call id

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 64 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1128 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_205

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 48 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_206

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 32 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 48 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- not equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	mov rbx, 1
	sub rbx, rax
	push rbx

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_and_30

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 32 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 56 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- not equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	mov rbx, 1
	sub rbx, rax
	push rbx

	;; -- jump --
	jmp addr_end_and_30

addr_and_30:
	;; -- number --
	mov rax, 0  
	push rax

addr_end_and_30:
	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_207

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_461 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_262__16 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_262 
	ret_func_262__16: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

addr_if_207:
	;; -- pop --
	add rsp, 0

	;; -- jump --
	jmp addr_else_28

addr_if_206:
	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 56 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_208

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 32 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 48 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_209

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 56 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 32 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

	;; -- jump --
	jmp addr_else_29

addr_if_209:
	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 32 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 56 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_210

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_462 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_262__17 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_262 
	ret_func_262__17: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

	;; -- jump --
	jmp addr_else_29

addr_if_210:
	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_463 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_262__18 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_262 
	ret_func_262__18: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

addr_else_29:
	;; -- pop --
	add rsp, 0

	;; -- jump --
	jmp addr_else_28

addr_if_208:
	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_464 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_262__19 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_262 
	ret_func_262__19: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

addr_else_28:
	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_211

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 72 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- add --
	pop rbx
	pop rax
	add rax, rbx
	push rax

	;; -- assignment --
	mov rax, [basestack + 8 * 2]
	mov rbx, 32 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

	;; -- jump --
	jmp addr_else_30

addr_if_211:
	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_254__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_254 
	ret_func_254__0: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

addr_else_30:
	;; -- pop --
	add rsp, 0

addr_if_205:
	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 64 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1136 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_212

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 48 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_213

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 32 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 48 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- not equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	mov rbx, 1
	sub rbx, rax
	push rbx

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_214

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 32 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 56 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- not equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	mov rbx, 1
	sub rbx, rax
	push rbx

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_215

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_465 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_262__20 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_262 
	ret_func_262__20: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

	;; -- jump --
	jmp addr_else_31

addr_if_215:
	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_466 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_262__21 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_262 
	ret_func_262__21: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

addr_else_31:
	;; -- pop --
	add rsp, 0

addr_if_214:
	;; -- pop --
	add rsp, 0

	;; -- jump --
	jmp addr_else_32

addr_if_213:
	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 56 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_216

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 32 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 56 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_217

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 48 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 32 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

	;; -- jump --
	jmp addr_else_33

addr_if_217:
	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 32 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 48 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_218

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 56 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 32 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

	;; -- jump --
	jmp addr_else_33

addr_if_218:
	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_467 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_262__22 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_262 
	ret_func_262__22: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

addr_else_33:
	;; -- pop --
	add rsp, 0

	;; -- jump --
	jmp addr_else_32

addr_if_216:
	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_468 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_262__23 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_262 
	ret_func_262__23: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

addr_else_32:
	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_219

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 72 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- subtract --
	pop rbx
	pop rax
	sub rax, rbx
	push rax

	;; -- assignment --
	mov rax, [basestack + 8 * 2]
	mov rbx, 32 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

	;; -- jump --
	jmp addr_else_34

addr_if_219:
	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_255__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_255 
	ret_func_255__0: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

addr_else_34:
	;; -- pop --
	add rsp, 0

addr_if_212:
	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- assignment --
	mov rax, [basestack + 8 * 2]
	mov rbx, 64 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 32 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- assignment --
	mov rax, [basestack + 8 * 2]
	mov rbx, 40 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 8

	;; -- jump --
	jmp addr_while_condition_63

addr_while_end_63:
	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 40 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 2], rbx
	;; -- pop parameters --
	add rsp, 16 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_279:
	;; -- function --
	jmp addr_func_end_280 
addr_func_280:
	mov rax, rsp
	add rax, 8 * 2

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 2]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 2], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_279__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_279 
	ret_func_279__0: ;; first number is function id, second number id call id

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_469 
	push rax

	;; -- number --
	mov rax, 3 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_217__14 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_217 
	ret_func_217__14: ;; first number is function id, second number id call id

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

addr_while_condition_64:
	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 48 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1448 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump --
	je addr_or_24

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 48 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1456 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- jump --
	jmp addr_end_or_24

addr_or_24:
	;; -- number --
	mov rax, 1  
	push rax

addr_end_or_24:
	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_while_end_64

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 32 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- not equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	mov rbx, 1
	sub rbx, rax
	push rbx

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_220

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_470 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_262__24 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_262 
	ret_func_262__24: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- number --
	mov rax, 0 
	push rax

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 24 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 2], rbx
	;; -- pop parameters --
	add rsp, 16 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
	;; -- pop --
	add rsp, 0

addr_if_220:
	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_261__20 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_261 
	ret_func_261__20: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_279__1 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_279 
	ret_func_279__1: ;; first number is function id, second number id call id

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 32 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- not equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	mov rbx, 1
	sub rbx, rax
	push rbx

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_221

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_471 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_262__25 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_262 
	ret_func_262__25: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- number --
	mov rax, 0 
	push rax

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 32 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 2], rbx
	;; -- pop parameters --
	add rsp, 16 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
	;; -- pop --
	add rsp, 0

addr_if_221:
	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 48 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1448 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_222

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_223

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 56 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- shift left --
	pop rcx
	pop rax
	shl rax, cl
	push rax
	;; -- assignment --
	mov rax, [basestack + 8 * 2]
	mov rbx, 32 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

	;; -- jump --
	jmp addr_else_35

addr_if_223:
	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_233__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_233 
	ret_func_233__0: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

addr_else_35:
	;; -- pop --
	add rsp, 0

	;; -- jump --
	jmp addr_else_36

addr_if_222:
	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 48 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1456 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_224

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_225

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 56 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- shift right --
	pop rcx
	pop rax
	shr rax, cl
	push rax
	;; -- assignment --
	mov rax, [basestack + 8 * 2]
	mov rbx, 32 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

	;; -- jump --
	jmp addr_else_37

addr_if_225:
	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_234__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_234 
	ret_func_234__0: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

addr_else_37:
	;; -- pop --
	add rsp, 0

addr_if_224:
addr_else_36:
	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- assignment --
	mov rax, [basestack + 8 * 2]
	mov rbx, 48 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 8

	;; -- jump --
	jmp addr_while_condition_64

addr_while_end_64:
	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 24 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 2], rbx
	;; -- pop parameters --
	add rsp, 16 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_280:
	;; -- function --
	jmp addr_func_end_281 
addr_func_281:
	mov rax, rsp
	add rax, 8 * 2

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 2]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 2], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_280__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_280 
	ret_func_280__0: ;; first number is function id, second number id call id

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 32 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 48 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1216 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump --
	je addr_or_25

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 48 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1232 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- jump --
	jmp addr_end_or_25

addr_or_25:
	;; -- number --
	mov rax, 1  
	push rax

addr_end_or_25:
	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump --
	je addr_or_26

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 48 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1184 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- jump --
	jmp addr_end_or_26

addr_or_26:
	;; -- number --
	mov rax, 1  
	push rax

addr_end_or_26:
	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump --
	je addr_or_27

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 48 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1200 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- jump --
	jmp addr_end_or_27

addr_or_27:
	;; -- number --
	mov rax, 1  
	push rax

addr_end_or_27:
	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump --
	je addr_or_28

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 48 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1192 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- jump --
	jmp addr_end_or_28

addr_or_28:
	;; -- number --
	mov rax, 1  
	push rax

addr_end_or_28:
	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump --
	je addr_or_29

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 48 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1208 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- jump --
	jmp addr_end_or_29

addr_or_29:
	;; -- number --
	mov rax, 1  
	push rax

addr_end_or_29:
	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_226

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_261__21 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_261 
	ret_func_261__21: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_280__1 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_280 
	ret_func_280__1: ;; first number is function id, second number id call id

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 32 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- not equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	mov rbx, 1
	sub rbx, rax
	push rbx

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_227

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_472 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_262__26 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_262 
	ret_func_262__26: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

addr_if_227:
	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 48 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1216 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_228

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_229

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 56 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- assignment --
	mov rax, [basestack + 8 * 2]
	mov rbx, 32 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

	;; -- jump --
	jmp addr_else_38

addr_if_229:
	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_239__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_239 
	ret_func_239__0: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

addr_else_38:
	;; -- pop --
	add rsp, 0

addr_if_228:
	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 48 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1232 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_230

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_231

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 56 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- not equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	mov rbx, 1
	sub rbx, rax
	push rbx

	;; -- assignment --
	mov rax, [basestack + 8 * 2]
	mov rbx, 32 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

	;; -- jump --
	jmp addr_else_39

addr_if_231:
	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_240__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_240 
	ret_func_240__0: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

addr_else_39:
	;; -- pop --
	add rsp, 0

addr_if_230:
	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 48 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1184 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_232

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_233

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 56 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- less --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 7
	and rax, 1
	pushf
	pop rbx
	shr rbx, 11
	and rbx, 1
	xor rax, rbx
	push rax

	;; -- assignment --
	mov rax, [basestack + 8 * 2]
	mov rbx, 32 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

	;; -- jump --
	jmp addr_else_40

addr_if_233:
	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_235__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_235 
	ret_func_235__0: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

addr_else_40:
	;; -- pop --
	add rsp, 0

addr_if_232:
	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 48 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1200 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_234

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_235

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 56 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- less --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pushf
	pushf
	pop rax
	shr rax, 7
	and rax, 1
	pop rbx
	shr rbx, 11
	and rbx, 1
	pop rcx
	shr rcx, 6
	and rcx, 1
	xor rax, rbx
	or rax, rcx
	push rax

	;; -- assignment --
	mov rax, [basestack + 8 * 2]
	mov rbx, 32 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

	;; -- jump --
	jmp addr_else_41

addr_if_235:
	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_236__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_236 
	ret_func_236__0: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

addr_else_41:
	;; -- pop --
	add rsp, 0

addr_if_234:
	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 48 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1192 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_236

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_237

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 56 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- greater --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	pushf
	pop rbx
	pushf
	pop rcx
	shr rax, 7
	and rax, 1
	shr rbx, 11
	and rbx, 1
	shr rcx, 6
	and rcx, 1
	xor rax, rbx
	or rax, rcx
	mov rbx, 1
	sub rbx, rax
	push rbx
	;; -- assignment --
	mov rax, [basestack + 8 * 2]
	mov rbx, 32 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

	;; -- jump --
	jmp addr_else_42

addr_if_237:
	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_237__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_237 
	ret_func_237__0: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

addr_else_42:
	;; -- pop --
	add rsp, 0

addr_if_236:
	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 48 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1208 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_238

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_239

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 56 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- greater --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	pushf
	pop rbx
	pushf
	pop rcx
	shr rax, 7
	and rax, 1
	shr rbx, 11
	and rbx, 1
	xor rax, rbx
	mov rbx, 1
	sub rbx, rax
	push rbx
	;; -- assignment --
	mov rax, [basestack + 8 * 2]
	mov rbx, 32 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

	;; -- jump --
	jmp addr_else_43

addr_if_239:
	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_238__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_238 
	ret_func_238__0: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

addr_else_43:
	;; -- pop --
	add rsp, 0

addr_if_238:
	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_473 
	push rax

	;; -- number --
	mov rax, 4 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_217__15 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_217 
	ret_func_217__15: ;; first number is function id, second number id call id

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 32 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 8

addr_if_226:
	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 24 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 2], rbx
	;; -- pop parameters --
	add rsp, 16 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_281:
	;; -- function --
	jmp addr_func_end_282 
addr_func_282:
	mov rax, rsp
	add rax, 8 * 2

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 2]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 2], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_281__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_281 
	ret_func_281__0: ;; first number is function id, second number id call id

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

addr_while_condition_65:
	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1160 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_while_end_65

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_261__22 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_261 
	ret_func_261__22: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 72 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 48 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- add --
	pop rbx
	pop rax
	add rax, rbx
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 72 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 32 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_474 
	push rax

	;; -- number --
	mov rax, 4 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_217__16 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_217 
	ret_func_217__16: ;; first number is function id, second number id call id

	;; -- not equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	mov rbx, 1
	sub rbx, rax
	push rbx

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_240

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_475 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_262__27 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_262 
	ret_func_262__27: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- number --
	mov rax, 0 
	push rax

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 24 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 2], rbx
	;; -- pop parameters --
	add rsp, 16 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
	;; -- pop --
	add rsp, 0

addr_if_240:
	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_241__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_241 
	ret_func_241__0: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_476 
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 48 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_244__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_244 
	ret_func_244__0: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_281__1 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_281 
	ret_func_281__1: ;; first number is function id, second number id call id

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_241

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 56 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- bit and --
	pop rbx
	pop rax
	and rax, rbx
	push rax
	;; -- assignment --
	mov rax, [basestack + 8 * 2]
	mov rbx, 32 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

addr_if_241:
	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 32 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_477 
	push rax

	;; -- number --
	mov rax, 4 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_217__17 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_217 
	ret_func_217__17: ;; first number is function id, second number id call id

	;; -- not equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	mov rbx, 1
	sub rbx, rax
	push rbx

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_242

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_478 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_262__28 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_262 
	ret_func_262__28: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- number --
	mov rax, 0 
	push rax

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 32 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 2], rbx
	;; -- pop parameters --
	add rsp, 16 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
	;; -- pop --
	add rsp, 0

addr_if_242:
	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_479 
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 48 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_242__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_242 
	ret_func_242__0: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_480 
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 48 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_224__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_224 
	ret_func_224__0: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_481 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_245__3 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_245 
	ret_func_245__3: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 8 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- subtract --
	pop rbx
	pop rax
	sub rax, rbx
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 8 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_482 
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 48 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_224__1 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_224 
	ret_func_224__1: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- assignment --
	mov rax, [basestack + 8 * 2]
	mov rbx, 40 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 16

	;; -- jump --
	jmp addr_while_condition_65

addr_while_end_65:
	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 16 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 2], rbx
	;; -- pop parameters --
	add rsp, 16 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_282:
	;; -- function --
	jmp addr_func_end_283 
addr_func_283:
	mov rax, rsp
	add rax, 8 * 2

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 2]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 2], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_282__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_282 
	ret_func_282__0: ;; first number is function id, second number id call id

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

addr_while_condition_66:
	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1176 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_while_end_66

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_261__23 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_261 
	ret_func_261__23: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 80 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 48 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- add --
	pop rbx
	pop rax
	add rax, rbx
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 80 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 32 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_483 
	push rax

	;; -- number --
	mov rax, 4 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_217__18 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_217 
	ret_func_217__18: ;; first number is function id, second number id call id

	;; -- not equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	mov rbx, 1
	sub rbx, rax
	push rbx

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_243

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_484 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_262__29 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_262 
	ret_func_262__29: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- number --
	mov rax, 0 
	push rax

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 24 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 2], rbx
	;; -- pop parameters --
	add rsp, 16 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
	;; -- pop --
	add rsp, 0

addr_if_243:
	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_241__1 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_241 
	ret_func_241__1: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_485 
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 48 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_243__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_243 
	ret_func_243__0: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_282__1 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_282 
	ret_func_282__1: ;; first number is function id, second number id call id

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_244

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 56 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- bit or --
	pop rbx
	pop rax
	or rax, rbx
	push rax
	;; -- assignment --
	mov rax, [basestack + 8 * 2]
	mov rbx, 32 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

addr_if_244:
	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 32 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_486 
	push rax

	;; -- number --
	mov rax, 4 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_217__19 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_217 
	ret_func_217__19: ;; first number is function id, second number id call id

	;; -- not equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	mov rbx, 1
	sub rbx, rax
	push rbx

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_245

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_487 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_262__30 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_262 
	ret_func_262__30: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- number --
	mov rax, 0 
	push rax

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 32 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 2], rbx
	;; -- pop parameters --
	add rsp, 16 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
	;; -- pop --
	add rsp, 0

addr_if_245:
	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_488 
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 48 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_242__1 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_242 
	ret_func_242__1: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_489 
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 48 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_224__2 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_224 
	ret_func_224__2: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_490 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_245__4 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_245 
	ret_func_245__4: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 8 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- subtract --
	pop rbx
	pop rax
	sub rax, rbx
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 8 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_491 
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 48 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_224__3 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_224 
	ret_func_224__3: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- assignment --
	mov rax, [basestack + 8 * 2]
	mov rbx, 40 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 16

	;; -- jump --
	jmp addr_while_condition_66

addr_while_end_66:
	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 16 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 2], rbx
	;; -- pop parameters --
	add rsp, 16 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_283:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_283__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_283 
	ret_func_283__0: ;; first number is function id, second number id call id

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 16 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_265:
	;; -- function --
	jmp addr_func_end_284 
addr_func_284:
	mov rax, rsp
	add rax, 8 * 1

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_261__24 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_261 
	ret_func_261__24: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1304 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- not equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	mov rbx, 1
	sub rbx, rax
	push rbx

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_246

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_492 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_262__31 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_262 
	ret_func_262__31: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

addr_if_246:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 8 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_145__15 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_145 
	ret_func_145__15: ;; first number is function id, second number id call id

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_166__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_166 
	ret_func_166__0: ;; first number is function id, second number id call id

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_167__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_167 
	ret_func_167__0: ;; first number is function id, second number id call id

	;; -- number --
	mov rax, 0 
	push rax

addr_while_condition_67:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 56 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 24 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- less --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 7
	and rax, 1
	pushf
	pop rbx
	shr rbx, 11
	and rbx, 1
	xor rax, rbx
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_while_end_67

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 24 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 56 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read at index -- 
	pop rax ;; index
	mov rbx, 8 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov rbx, [rbx]
	;; create bit mask
	mov rcx, 0
	sub rcx, 1
	and rbx, rcx
	push rbx

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 48 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_141__2 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_141 
	ret_func_141__2: ;; first number is function id, second number id call id

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_247

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 48 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_137__43 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_137 
	ret_func_137__43: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_137__44 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_137 
	ret_func_137__44: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_261__25 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_261 
	ret_func_261__25: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- return --
	;; -- pop local variables --
	add rsp, 40 
	;; -- restore stackframe -- 
	pop rax
 mov [basestack + 8 * 1], rax
	;; -- pop parameters --
	add rsp, 8 
	;; -- return empty --
	push 0
	;; -- jump to return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
	;; -- pop --
	add rsp, 0

addr_if_247:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 56 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- add --
	pop rbx
	pop rax
	add rax, rbx
	push rax

	;; -- assignment --
	mov rax, [basestack + 8 * 1]
	mov rbx, 56 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

	;; -- jump --
	jmp addr_while_condition_67

addr_while_end_67:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 24 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 48 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_209__1 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_209 
	ret_func_209__1: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 48 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_146__3 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_146 
	ret_func_146__3: ;; first number is function id, second number id call id

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_169__1 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_169 
	ret_func_169__1: ;; first number is function id, second number id call id

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 0 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_261__26 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_261 
	ret_func_261__26: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_137__45 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_137 
	ret_func_137__45: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- return --
	;; -- pop local variables --
	add rsp, 40 
	;; -- restore stackframe -- 
	pop rax
 mov [basestack + 8 * 1], rax
	;; -- pop parameters --
	add rsp, 8 
	;; -- return empty --
	push 0
	;; -- jump to return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_284:
	;; -- function --
	jmp addr_func_end_285 
addr_func_285:
	mov rax, rsp
	add rax, 8 * 1

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_261__27 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_261 
	ret_func_261__27: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1408 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- string --
	mov rax, string_493 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_263__12 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_263 
	ret_func_263__12: ;; first number is function id, second number id call id

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 8 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1424 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_248

	;; -- return --
	;; -- pop local variables --
	add rsp, 24 
	;; -- restore stackframe -- 
	pop rax
 mov [basestack + 8 * 1], rax
	;; -- pop parameters --
	add rsp, 8 
	;; -- return empty --
	push 0
	;; -- jump to return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
	;; -- pop --
	add rsp, 0

addr_if_248:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 8 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_213__2 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_213 
	ret_func_213__2: ;; first number is function id, second number id call id

	;; -- number --
	mov rax, 0 
	push rax

	;; -- not equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	mov rbx, 1
	sub rbx, rax
	push rbx

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_249

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- string --
	mov rax, string_494 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_262__32 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_262 
	ret_func_262__32: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- return --
	;; -- pop local variables --
	add rsp, 24 
	;; -- restore stackframe -- 
	pop rax
 mov [basestack + 8 * 1], rax
	;; -- pop parameters --
	add rsp, 8 
	;; -- return empty --
	push 0
	;; -- jump to return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
	;; -- pop --
	add rsp, 0

addr_if_249:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 8 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_217__20 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_217 
	ret_func_217__20: ;; first number is function id, second number id call id

	;; -- number --
	mov rax, 0 
	push rax

	;; -- not equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	mov rbx, 1
	sub rbx, rax
	push rbx

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_250

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- string --
	mov rax, string_495 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_262__33 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_262 
	ret_func_262__33: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- return --
	;; -- pop local variables --
	add rsp, 24 
	;; -- restore stackframe -- 
	pop rax
 mov [basestack + 8 * 1], rax
	;; -- pop parameters --
	add rsp, 8 
	;; -- return empty --
	push 0
	;; -- jump to return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
	;; -- pop --
	add rsp, 0

addr_if_250:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 8 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_220__2 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_220 
	ret_func_220__2: ;; first number is function id, second number id call id

	;; -- number --
	mov rax, 0 
	push rax

	;; -- not equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	mov rbx, 1
	sub rbx, rax
	push rbx

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_251

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- string --
	mov rax, string_496 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_262__34 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_262 
	ret_func_262__34: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- return --
	;; -- pop local variables --
	add rsp, 24 
	;; -- restore stackframe -- 
	pop rax
 mov [basestack + 8 * 1], rax
	;; -- pop parameters --
	add rsp, 8 
	;; -- return empty --
	push 0
	;; -- jump to return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
	;; -- pop --
	add rsp, 0

addr_if_251:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1144 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- string --
	mov rax, string_497 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_263__13 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_263 
	ret_func_263__13: ;; first number is function id, second number id call id

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1424 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_252

	;; -- return --
	;; -- pop local variables --
	add rsp, 24 
	;; -- restore stackframe -- 
	pop rax
 mov [basestack + 8 * 1], rax
	;; -- pop parameters --
	add rsp, 8 
	;; -- return empty --
	push 0
	;; -- jump to return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
	;; -- pop --
	add rsp, 0

addr_if_252:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_265__7 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_265 
	ret_func_265__7: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 32 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_212__2 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_212 
	ret_func_212__2: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1312 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- string --
	mov rax, string_498 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_263__14 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_263 
	ret_func_263__14: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- return --
	;; -- pop local variables --
	add rsp, 24 
	;; -- restore stackframe -- 
	pop rax
 mov [basestack + 8 * 1], rax
	;; -- pop parameters --
	add rsp, 8 
	;; -- return empty --
	push 0
	;; -- jump to return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_285:
	;; -- function --
	jmp addr_func_end_286 
addr_func_286:
	mov rax, rsp
	add rax, 8 * 1

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_261__28 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_261 
	ret_func_261__28: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1408 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- string --
	mov rax, string_499 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_263__15 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_263 
	ret_func_263__15: ;; first number is function id, second number id call id

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 8 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1424 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_253

	;; -- return --
	;; -- pop local variables --
	add rsp, 24 
	;; -- restore stackframe -- 
	pop rax
 mov [basestack + 8 * 1], rax
	;; -- pop parameters --
	add rsp, 8 
	;; -- return empty --
	push 0
	;; -- jump to return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
	;; -- pop --
	add rsp, 0

addr_if_253:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 8 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_213__3 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_213 
	ret_func_213__3: ;; first number is function id, second number id call id

	;; -- number --
	mov rax, 0 
	push rax

	;; -- not equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	mov rbx, 1
	sub rbx, rax
	push rbx

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_254

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- string --
	mov rax, string_500 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_262__35 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_262 
	ret_func_262__35: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- return --
	;; -- pop local variables --
	add rsp, 24 
	;; -- restore stackframe -- 
	pop rax
 mov [basestack + 8 * 1], rax
	;; -- pop parameters --
	add rsp, 8 
	;; -- return empty --
	push 0
	;; -- jump to return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
	;; -- pop --
	add rsp, 0

addr_if_254:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 8 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_217__21 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_217 
	ret_func_217__21: ;; first number is function id, second number id call id

	;; -- number --
	mov rax, 0 
	push rax

	;; -- not equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	mov rbx, 1
	sub rbx, rax
	push rbx

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_255

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- string --
	mov rax, string_501 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_262__36 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_262 
	ret_func_262__36: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- return --
	;; -- pop local variables --
	add rsp, 24 
	;; -- restore stackframe -- 
	pop rax
 mov [basestack + 8 * 1], rax
	;; -- pop parameters --
	add rsp, 8 
	;; -- return empty --
	push 0
	;; -- jump to return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
	;; -- pop --
	add rsp, 0

addr_if_255:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 8 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_220__3 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_220 
	ret_func_220__3: ;; first number is function id, second number id call id

	;; -- number --
	mov rax, 0 
	push rax

	;; -- not equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	mov rbx, 1
	sub rbx, rax
	push rbx

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_256

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- string --
	mov rax, string_502 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_262__37 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_262 
	ret_func_262__37: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- return --
	;; -- pop local variables --
	add rsp, 24 
	;; -- restore stackframe -- 
	pop rax
 mov [basestack + 8 * 1], rax
	;; -- pop parameters --
	add rsp, 8 
	;; -- return empty --
	push 0
	;; -- jump to return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
	;; -- pop --
	add rsp, 0

addr_if_256:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1144 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- string --
	mov rax, string_503 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_263__16 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_263 
	ret_func_263__16: ;; first number is function id, second number id call id

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1424 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_257

	;; -- return --
	;; -- pop local variables --
	add rsp, 24 
	;; -- restore stackframe -- 
	pop rax
 mov [basestack + 8 * 1], rax
	;; -- pop parameters --
	add rsp, 8 
	;; -- return empty --
	push 0
	;; -- jump to return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
	;; -- pop --
	add rsp, 0

addr_if_257:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_265__8 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_265 
	ret_func_265__8: ;; first number is function id, second number id call id

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 48 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 32 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_214__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_214 
	ret_func_214__0: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1312 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- string --
	mov rax, string_504 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_263__17 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_263 
	ret_func_263__17: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- return --
	;; -- pop local variables --
	add rsp, 32 
	;; -- restore stackframe -- 
	pop rax
 mov [basestack + 8 * 1], rax
	;; -- pop parameters --
	add rsp, 8 
	;; -- return empty --
	push 0
	;; -- jump to return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_286:
	;; -- function --
	jmp addr_func_end_287 
addr_func_287:
	mov rax, rsp
	add rax, 8 * 1

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_261__29 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_261 
	ret_func_261__29: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1408 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- string --
	mov rax, string_505 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_263__18 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_263 
	ret_func_263__18: ;; first number is function id, second number id call id

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 8 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1424 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_258

	;; -- return --
	;; -- pop local variables --
	add rsp, 24 
	;; -- restore stackframe -- 
	pop rax
 mov [basestack + 8 * 1], rax
	;; -- pop parameters --
	add rsp, 8 
	;; -- return empty --
	push 0
	;; -- jump to return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
	;; -- pop --
	add rsp, 0

addr_if_258:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 8 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_213__4 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_213 
	ret_func_213__4: ;; first number is function id, second number id call id

	;; -- number --
	mov rax, 0 
	push rax

	;; -- not equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	mov rbx, 1
	sub rbx, rax
	push rbx

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_259

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- string --
	mov rax, string_506 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_262__38 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_262 
	ret_func_262__38: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- return --
	;; -- pop local variables --
	add rsp, 24 
	;; -- restore stackframe -- 
	pop rax
 mov [basestack + 8 * 1], rax
	;; -- pop parameters --
	add rsp, 8 
	;; -- return empty --
	push 0
	;; -- jump to return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
	;; -- pop --
	add rsp, 0

addr_if_259:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 8 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_217__22 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_217 
	ret_func_217__22: ;; first number is function id, second number id call id

	;; -- number --
	mov rax, 0 
	push rax

	;; -- not equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	mov rbx, 1
	sub rbx, rax
	push rbx

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_260

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- string --
	mov rax, string_507 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_262__39 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_262 
	ret_func_262__39: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- return --
	;; -- pop local variables --
	add rsp, 24 
	;; -- restore stackframe -- 
	pop rax
 mov [basestack + 8 * 1], rax
	;; -- pop parameters --
	add rsp, 8 
	;; -- return empty --
	push 0
	;; -- jump to return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
	;; -- pop --
	add rsp, 0

addr_if_260:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 8 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_220__4 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_220 
	ret_func_220__4: ;; first number is function id, second number id call id

	;; -- number --
	mov rax, 0 
	push rax

	;; -- not equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	mov rbx, 1
	sub rbx, rax
	push rbx

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_261

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- string --
	mov rax, string_508 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_262__40 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_262 
	ret_func_262__40: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- return --
	;; -- pop local variables --
	add rsp, 24 
	;; -- restore stackframe -- 
	pop rax
 mov [basestack + 8 * 1], rax
	;; -- pop parameters --
	add rsp, 8 
	;; -- return empty --
	push 0
	;; -- jump to return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
	;; -- pop --
	add rsp, 0

addr_if_261:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 8 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_216__7 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_216 
	ret_func_216__7: ;; first number is function id, second number id call id

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1280 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- string --
	mov rax, string_509 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_263__19 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_263 
	ret_func_263__19: ;; first number is function id, second number id call id

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1424 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_262

	;; -- return --
	;; -- pop local variables --
	add rsp, 32 
	;; -- restore stackframe -- 
	pop rax
 mov [basestack + 8 * 1], rax
	;; -- pop parameters --
	add rsp, 8 
	;; -- return empty --
	push 0
	;; -- jump to return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
	;; -- pop --
	add rsp, 0

addr_if_262:
	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_184__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_184 
	ret_func_184__0: ;; first number is function id, second number id call id

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_182__1 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_182 
	ret_func_182__1: ;; first number is function id, second number id call id

addr_while_condition_68:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1288 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- not equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	mov rbx, 1
	sub rbx, rax
	push rbx

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_and_31

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1416 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- not equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	mov rbx, 1
	sub rbx, rax
	push rbx

	;; -- jump --
	jmp addr_end_and_31

addr_and_31:
	;; -- number --
	mov rax, 0  
	push rax

addr_end_and_31:
	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_while_end_68

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- string --
	mov rax, string_510 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_264__2 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_264 
	ret_func_264__2: ;; first number is function id, second number id call id

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1408 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- string --
	mov rax, string_511 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_263__20 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_263 
	ret_func_263__20: ;; first number is function id, second number id call id

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 80 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump --
	je addr_or_30

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 88 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1424 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- jump --
	jmp addr_end_or_30

addr_or_30:
	;; -- number --
	mov rax, 1  
	push rax

addr_end_or_30:
	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_263

	;; -- return --
	;; -- pop local variables --
	add rsp, 72 
	;; -- restore stackframe -- 
	pop rax
 mov [basestack + 8 * 1], rax
	;; -- pop parameters --
	add rsp, 8 
	;; -- return empty --
	push 0
	;; -- jump to return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
	;; -- pop --
	add rsp, 0

addr_if_263:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 64 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 88 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 8 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 88 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_145__16 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_145 
	ret_func_145__16: ;; first number is function id, second number id call id

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 56 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 80 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 8 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_188__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_188 
	ret_func_188__0: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 72 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 80 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_183__2 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_183 
	ret_func_183__2: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 56 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- add --
	pop rbx
	pop rax
	add rax, rbx
	push rax

	;; -- assignment --
	mov rax, [basestack + 8 * 1]
	mov rbx, 56 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1312 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- string --
	mov rax, string_512 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_263__21 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_263 
	ret_func_263__21: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 16

	;; -- jump --
	jmp addr_while_condition_68

addr_while_end_68:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 48 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 64 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 16 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 48 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 72 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 24 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 72 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_137__46 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_137 
	ret_func_137__46: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1288 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- string --
	mov rax, string_513 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_263__22 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_263 
	ret_func_263__22: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- return --
	;; -- pop local variables --
	add rsp, 56 
	;; -- restore stackframe -- 
	pop rax
 mov [basestack + 8 * 1], rax
	;; -- pop parameters --
	add rsp, 8 
	;; -- return empty --
	push 0
	;; -- jump to return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_287:
	;; -- function --
	jmp addr_func_end_288 
addr_func_288:
	mov rax, rsp
	add rax, 8 * 1

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- function --
	jmp addr_func_end_289 
addr_func_289:
	mov rax, rsp
	add rax, 8 * 2

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 2]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 2], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 48 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_210__1 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_210 
	ret_func_210__1: ;; first number is function id, second number id call id

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 40 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- not equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	mov rbx, 1
	sub rbx, rax
	push rbx

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_264

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 48 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 57 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- add --
	pop rbx
	pop rax
	add rax, rbx
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 57 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- number --
	mov rax, 0 
	push rax

addr_while_condition_69:
	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- less --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 7
	and rax, 1
	pushf
	pop rbx
	shr rbx, 11
	and rbx, 1
	xor rax, rbx
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_while_end_69

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 8 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- add --
	pop rbx
	pop rax
	add rax, rbx
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 8 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read at index -- 
	pop rax ;; index
	mov rbx, 8 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov rbx, [rbx]
	;; create bit mask
	mov rcx, 0
	sub rcx, 1
	and rbx, rcx
	push rbx

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 48 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 48 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_139__25 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_139 
	ret_func_139__25: ;; first number is function id, second number id call id

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 48 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 24 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_212__3 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_212 
	ret_func_212__3: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- add --
	pop rbx
	pop rax
	add rax, rbx
	push rax

	;; -- assignment --
	mov rax, [basestack + 8 * 2]
	mov rbx, 40 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 8

	;; -- jump --
	jmp addr_while_condition_69

addr_while_end_69:
	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 8 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- add --
	pop rbx
	pop rax
	add rax, rbx
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 8 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 8

addr_if_264:
addr_while_condition_70:
	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1288 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- not equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	mov rbx, 1
	sub rbx, rax
	push rbx

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_and_32

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1416 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- not equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	mov rbx, 1
	sub rbx, rax
	push rbx

	;; -- jump --
	jmp addr_end_and_32

addr_and_32:
	;; -- number --
	mov rax, 0  
	push rax

addr_end_and_32:
	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_while_end_70

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_288__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_288 
	ret_func_288__0: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

	;; -- jump --
	jmp addr_while_condition_70

addr_while_end_70:
	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 48 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 65 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 48 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- not equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	mov rbx, 1
	sub rbx, rax
	push rbx

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_265

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 56 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 1
	shl rbx, 8 ;; size
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_266

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 48 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 8 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_514 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_141__3 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_141 
	ret_func_141__3: ;; first number is function id, second number id call id

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_267

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 8 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 48 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- subtract --
	pop rbx
	pop rax
	sub rax, rbx
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- subtract --
	pop rbx
	pop rax
	sub rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 48 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_227__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_227 
	ret_func_227__0: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 8

	;; -- jump --
	jmp addr_else_44

addr_if_267:
	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_515 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_262__41 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_262 
	ret_func_262__41: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

addr_else_44:
	;; -- pop --
	add rsp, 0

addr_if_266:
	;; -- pop --
	add rsp, 0

	;; -- jump --
	jmp addr_else_45

addr_if_265:
	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_223__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_223 
	ret_func_223__0: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 8

addr_else_45:
	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1288 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- string --
	mov rax, string_516 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_263__23 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_263 
	ret_func_263__23: ;; first number is function id, second number id call id

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1424 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_and_33

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- not equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	mov rbx, 1
	sub rbx, rax
	push rbx

	;; -- jump --
	jmp addr_end_and_33

addr_and_33:
	;; -- number --
	mov rax, 0  
	push rax

addr_end_and_33:
	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_268

	;; -- string --
	mov rax, string_517 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_158__35 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_158 
	ret_func_158__35: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_158__36 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_158 
	ret_func_158__36: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- string --
	mov rax, string_518 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_158__37 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_158 
	ret_func_158__37: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

addr_if_268:
	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 65 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 40 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_211__1 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_211 
	ret_func_211__1: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- return --
	;; -- pop local variables --
	add rsp, 8 
	;; -- restore stackframe -- 
	pop rax
 mov [basestack + 8 * 2], rax
	;; -- pop parameters --
	add rsp, 16 
	;; -- return empty --
	push 0
	;; -- jump to return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_289:
	;; -- function --
	jmp addr_func_end_290 
addr_func_290:
	mov rax, rsp
	add rax, 8 * 1

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 2]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 2], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 96 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- add --
	pop rbx
	pop rax
	add rax, rbx
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 96 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_261__30 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_261 
	ret_func_261__30: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1408 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- string --
	mov rax, string_519 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_263__24 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_263 
	ret_func_263__24: ;; first number is function id, second number id call id

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 8 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 8 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_213__5 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_213 
	ret_func_213__5: ;; first number is function id, second number id call id

	;; -- number --
	mov rax, 0 
	push rax

	;; -- not equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	mov rbx, 1
	sub rbx, rax
	push rbx

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_269

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- string --
	mov rax, string_520 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_262__42 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_262 
	ret_func_262__42: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

addr_if_269:
	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 8 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_217__23 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_217 
	ret_func_217__23: ;; first number is function id, second number id call id

	;; -- number --
	mov rax, 0 
	push rax

	;; -- not equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	mov rbx, 1
	sub rbx, rax
	push rbx

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_270

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- string --
	mov rax, string_521 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_262__43 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_262 
	ret_func_262__43: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

addr_if_270:
	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 8 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_220__5 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_220 
	ret_func_220__5: ;; first number is function id, second number id call id

	;; -- number --
	mov rax, 0 
	push rax

	;; -- not equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	mov rbx, 1
	sub rbx, rax
	push rbx

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_271

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- string --
	mov rax, string_522 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_262__44 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_262 
	ret_func_262__44: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

addr_if_271:
	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1248 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- string --
	mov rax, string_523 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_263__25 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_263 
	ret_func_263__25: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_194__2 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_194 
	ret_func_194__2: ;; first number is function id, second number id call id

	;; -- number --
	mov rax, 0 
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 57 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- add --
	pop rbx
	pop rax
	add rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1256 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- not equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	mov rbx, 1
	sub rbx, rax
	push rbx

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_272

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- string --
	mov rax, string_524 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_264__3 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_264 
	ret_func_264__3: ;; first number is function id, second number id call id

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1408 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- string --
	mov rax, string_525 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_263__26 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_263 
	ret_func_263__26: ;; first number is function id, second number id call id

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 56 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 88 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 8 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 88 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_145__17 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_145 
	ret_func_145__17: ;; first number is function id, second number id call id

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 64 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 72 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 80 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_196__2 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_196 
	ret_func_196__2: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 64 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- add --
	pop rbx
	pop rax
	add rax, rbx
	push rax

	;; -- assignment --
	mov rax, [basestack + 8 * 2]
	mov rbx, 64 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 16

addr_if_272:
addr_while_condition_71:
	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1392 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_while_end_71

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_261__31 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_261 
	ret_func_261__31: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- string --
	mov rax, string_526 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_264__4 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_264 
	ret_func_264__4: ;; first number is function id, second number id call id

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1408 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- string --
	mov rax, string_527 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_263__27 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_263 
	ret_func_263__27: ;; first number is function id, second number id call id

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 56 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 88 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 8 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 88 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_145__18 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_145 
	ret_func_145__18: ;; first number is function id, second number id call id

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 64 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 72 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 80 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_196__3 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_196 
	ret_func_196__3: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 64 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- add --
	pop rbx
	pop rax
	add rax, rbx
	push rax

	;; -- assignment --
	mov rax, [basestack + 8 * 2]
	mov rbx, 64 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 16

	;; -- jump --
	jmp addr_while_condition_71

addr_while_end_71:
	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1256 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- string --
	mov rax, string_528 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_263__28 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_263 
	ret_func_263__28: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_529 
	push rax

	;; -- number --
	mov rax, 4 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_217__24 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_217 
	ret_func_217__24: ;; first number is function id, second number id call id

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1240 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_273

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_261__32 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_261 
	ret_func_261__32: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- string --
	mov rax, string_530 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_264__5 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_264 
	ret_func_264__5: ;; first number is function id, second number id call id

	;; -- assignment --
	mov rax, [basestack + 8 * 2]
	mov rbx, 80 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

addr_if_273:
	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 48 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 80 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 56 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_219__1 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_219 
	ret_func_219__1: ;; first number is function id, second number id call id

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1280 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- string --
	mov rax, string_531 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_263__29 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_263 
	ret_func_263__29: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 56 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_225__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_225 
	ret_func_225__0: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 88 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_289__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_289 
	ret_func_289__0: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_532 
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_224__4 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_224 
	ret_func_224__4: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- return --
	;; -- pop local variables --
	add rsp, 72 
	;; -- restore stackframe -- 
	pop rax
 mov [basestack + 8 * 2], rax
	;; -- pop parameters --
	add rsp, 8 
	;; -- return empty --
	push 0
	;; -- jump to return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_290:
	;; -- function --
	jmp addr_func_end_291 
addr_func_291:
	mov rax, rsp
	add rax, 8 * 1

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 2]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 2], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 48 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_274

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_533 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_262__45 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_262 
	ret_func_262__45: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1312 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- string --
	mov rax, string_534 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_263__30 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_263 
	ret_func_263__30: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- return --
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rax
 mov [basestack + 8 * 2], rax
	;; -- pop parameters --
	add rsp, 8 
	;; -- return empty --
	push 0
	;; -- jump to return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
	;; -- pop --
	add rsp, 0

addr_if_274:
	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_261__33 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_261 
	ret_func_261__33: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 48 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 8 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- subtract --
	pop rbx
	pop rax
	sub rax, rbx
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- subtract --
	pop rbx
	pop rax
	sub rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 65 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

addr_while_condition_72:
	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 48 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_while_end_72

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 8 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- add --
	pop rbx
	pop rax
	add rax, rbx
	push rax

	;; -- assignment --
	mov rax, [basestack + 8 * 2]
	mov rbx, 32 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 65 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- assignment --
	mov rax, [basestack + 8 * 2]
	mov rbx, 40 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

	;; -- jump --
	jmp addr_while_condition_72

addr_while_end_72:
	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 8 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_535 
	push rax

	;; -- number --
	mov rax, 4 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_217__25 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_217 
	ret_func_217__25: ;; first number is function id, second number id call id

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_275

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1312 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- string --
	mov rax, string_536 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_263__31 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_263 
	ret_func_263__31: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_227__1 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_227 
	ret_func_227__1: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

	;; -- jump --
	jmp addr_else_46

addr_if_275:
	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_265__9 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_265 
	ret_func_265__9: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 32 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 8 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- not equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	mov rbx, 1
	sub rbx, rax
	push rbx

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_276

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_537 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_262__46 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_262 
	ret_func_262__46: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

addr_if_276:
	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1312 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- string --
	mov rax, string_538 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_263__32 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_263 
	ret_func_263__32: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 0 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_228__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_228 
	ret_func_228__0: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

addr_else_46:
	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 56 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 1
	shl r9, 8 ;; size
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- return --
	;; -- pop local variables --
	add rsp, 24 
	;; -- restore stackframe -- 
	pop rax
 mov [basestack + 8 * 2], rax
	;; -- pop parameters --
	add rsp, 8 
	;; -- return empty --
	push 0
	;; -- jump to return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_291:
	;; -- function --
	jmp addr_func_end_292 
addr_func_292:
	mov rax, rsp
	add rax, 8 * 1

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 2]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 2], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 56 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- add --
	pop rbx
	pop rax
	add rax, rbx
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 56 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_261__34 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_261 
	ret_func_261__34: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1248 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- string --
	mov rax, string_539 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_263__33 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_263 
	ret_func_263__33: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_265__10 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_265 
	ret_func_265__10: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 32 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_540 
	push rax

	;; -- number --
	mov rax, 4 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_217__26 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_217 
	ret_func_217__26: ;; first number is function id, second number id call id

	;; -- not equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	mov rbx, 1
	sub rbx, rax
	push rbx

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_277

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_541 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_262__47 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_262 
	ret_func_262__47: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

addr_if_277:
	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_241__2 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_241 
	ret_func_241__2: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1256 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- string --
	mov rax, string_542 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_263__34 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_263 
	ret_func_263__34: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_543 
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_244__1 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_244 
	ret_func_244__1: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1280 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- string --
	mov rax, string_544 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_263__35 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_263 
	ret_func_263__35: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_289__1 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_289 
	ret_func_289__1: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 64 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

addr_while_condition_73:
	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1336 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_and_34

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- jump --
	jmp addr_end_and_34

addr_and_34:
	;; -- number --
	mov rax, 0  
	push rax

addr_end_and_34:
	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_while_end_73

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_545 
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 48 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_242__2 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_242 
	ret_func_242__2: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_546 
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_224__5 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_224 
	ret_func_224__5: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_278

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 48 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- add --
	pop rbx
	pop rax
	add rax, rbx
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 64 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

addr_if_278:
	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_261__35 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_261 
	ret_func_261__35: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1328 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_279

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 56 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- assignment --
	mov rax, [basestack + 8 * 2]
	mov rbx, 24 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- add --
	pop rbx
	pop rax
	add rax, rbx
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 56 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_261__36 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_261 
	ret_func_261__36: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1248 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- string --
	mov rax, string_547 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_263__36 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_263 
	ret_func_263__36: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_265__11 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_265 
	ret_func_265__11: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 32 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_548 
	push rax

	;; -- number --
	mov rax, 4 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_217__27 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_217 
	ret_func_217__27: ;; first number is function id, second number id call id

	;; -- not equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	mov rbx, 1
	sub rbx, rax
	push rbx

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_280

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_549 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_262__48 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_262 
	ret_func_262__48: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

addr_if_280:
	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_241__3 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_241 
	ret_func_241__3: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1256 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- string --
	mov rax, string_550 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_263__37 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_263 
	ret_func_263__37: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_551 
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_244__2 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_244 
	ret_func_244__2: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1280 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- string --
	mov rax, string_552 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_263__38 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_263 
	ret_func_263__38: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_289__2 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_289 
	ret_func_289__2: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

	;; -- jump --
	jmp addr_else_47

addr_if_279:
	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1280 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- string --
	mov rax, string_553 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_263__39 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_263 
	ret_func_263__39: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_289__3 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_289 
	ret_func_289__3: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- number --
	mov rax, 1 
	push rax

	;; -- assignment --
	mov rax, [basestack + 8 * 2]
	mov rbx, 40 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

addr_else_47:
	;; -- number --
	mov rax, 1 
	push rax

	;; -- assignment --
	mov rax, [basestack + 8 * 2]
	mov rbx, 32 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

	;; -- jump --
	jmp addr_while_condition_73

addr_while_end_73:
	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_281

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_554 
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_224__6 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_224 
	ret_func_224__6: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

addr_if_281:
	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_282

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_555 
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 48 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_224__7 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_224 
	ret_func_224__7: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

addr_if_282:
	;; -- return --
	;; -- pop local variables --
	add rsp, 32 
	;; -- restore stackframe -- 
	pop rax
 mov [basestack + 8 * 2], rax
	;; -- pop parameters --
	add rsp, 8 
	;; -- return empty --
	push 0
	;; -- jump to return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_292:
	;; -- function --
	jmp addr_func_end_293 
addr_func_293:
	mov rax, rsp
	add rax, 8 * 1

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 2]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 2], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 88 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- add --
	pop rbx
	pop rax
	add rax, rbx
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 88 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_261__37 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_261 
	ret_func_261__37: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1248 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- string --
	mov rax, string_556 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_263__40 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_263 
	ret_func_263__40: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_557 
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_224__8 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_224 
	ret_func_224__8: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_265__12 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_265 
	ret_func_265__12: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 32 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_558 
	push rax

	;; -- number --
	mov rax, 4 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_217__28 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_217 
	ret_func_217__28: ;; first number is function id, second number id call id

	;; -- not equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	mov rbx, 1
	sub rbx, rax
	push rbx

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_283

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_559 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_262__49 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_262 
	ret_func_262__49: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

addr_if_283:
	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_241__4 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_241 
	ret_func_241__4: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1256 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- string --
	mov rax, string_560 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_263__41 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_263 
	ret_func_263__41: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_561 
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_244__3 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_244 
	ret_func_244__3: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1280 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- string --
	mov rax, string_562 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_263__42 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_263 
	ret_func_263__42: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_289__4 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_289 
	ret_func_289__4: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_563 
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_242__3 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_242 
	ret_func_242__3: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- string --
	mov rax, string_564 
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 2]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_224__9 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_224 
	ret_func_224__9: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- return --
	;; -- pop local variables --
	add rsp, 8 
	;; -- restore stackframe -- 
	pop rax
 mov [basestack + 8 * 2], rax
	;; -- pop parameters --
	add rsp, 8 
	;; -- return empty --
	push 0
	;; -- jump to return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_293:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1376 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_284

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_284__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_284 
	ret_func_284__0: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

	;; -- jump --
	jmp addr_else_48

addr_if_284:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1320 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_285

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_285__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_285 
	ret_func_285__0: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

	;; -- jump --
	jmp addr_else_48

addr_if_285:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1440 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_286

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_286__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_286 
	ret_func_286__0: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

	;; -- jump --
	jmp addr_else_48

addr_if_286:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1360 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_287

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_287__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_287 
	ret_func_287__0: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

	;; -- jump --
	jmp addr_else_48

addr_if_287:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1352 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_288

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_290__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_290 
	ret_func_290__0: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

	;; -- jump --
	jmp addr_else_48

addr_if_288:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1368 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_289

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_291__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_291 
	ret_func_291__0: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

	;; -- jump --
	jmp addr_else_48

addr_if_289:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1328 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_290

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_292__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_292 
	ret_func_292__0: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

	;; -- jump --
	jmp addr_else_48

addr_if_290:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1344 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_291

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_293__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_293 
	ret_func_293__0: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

	;; -- jump --
	jmp addr_else_48

addr_if_291:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_265__13 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_265 
	ret_func_265__13: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1312 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- string --
	mov rax, string_565 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_263__43 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_263 
	ret_func_263__43: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_223__1 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_223 
	ret_func_223__1: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

addr_else_48:
	;; -- return --
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rax
 mov [basestack + 8 * 1], rax
	;; -- pop parameters --
	add rsp, 8 
	;; -- return empty --
	push 0
	;; -- jump to return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_288:
	;; -- function --
	jmp addr_func_end_294 
addr_func_294:
	mov rax, rsp
	add rax, 8 * 1

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_222__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_222 
	ret_func_222__0: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

addr_while_condition_74:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 16 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 1416 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- not equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	mov rbx, 1
	sub rbx, rax
	push rbx

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_while_end_74

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_288__1 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_288 
	ret_func_288__1: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

	;; -- jump --
	jmp addr_while_condition_74

addr_while_end_74:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 40 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 104 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 0
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_258__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_258 
	ret_func_258__0: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- return --
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rax
 mov [basestack + 8 * 1], rax
	;; -- pop parameters --
	add rsp, 8 
	;; -- return empty --
	push 0
	;; -- jump to return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_294:
	;; -- function --
	jmp addr_func_end_295 
addr_func_295:
	mov rax, rsp
	add rax, 8 * 0

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- string --
	mov rax, string_566 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_158__38 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_158 
	ret_func_158__38: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- string --
	mov rax, string_567 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_158__39 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_158 
	ret_func_158__39: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- string --
	mov rax, string_568 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_158__40 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_158 
	ret_func_158__40: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- string --
	mov rax, string_569 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_158__41 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_158 
	ret_func_158__41: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- string --
	mov rax, string_570 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_158__42 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_158 
	ret_func_158__42: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- return --
	;; -- pop local variables --
	add rsp, 0 
	;; -- restore stackframe -- 
	pop rax
 mov [basestack + 8 * 1], rax
	;; -- pop parameters --
	add rsp, 0 
	;; -- return empty --
	push 0
	;; -- jump to return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_295:
	;; -- function --
	jmp addr_func_end_296 
addr_func_296:
	mov rax, rsp
	add rax, 8 * 2

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_57__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_57 
	ret_func_57__0: ;; first number is function id, second number id call id

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- less --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 7
	and rax, 1
	pushf
	pop rbx
	shr rbx, 11
	and rbx, 1
	xor rax, rbx
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_292

	;; -- string --
	mov rax, string_571 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_158__43 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_158 
	ret_func_158__43: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_158__44 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_158 
	ret_func_158__44: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- string --
	mov rax, string_572 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_158__45 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_158 
	ret_func_158__45: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- number --
	mov rax, 1 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_60__3 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_60 
	ret_func_60__3: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

addr_if_292:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- greater --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	pushf
	pop rbx
	pushf
	pop rcx
	shr rax, 7
	and rax, 1
	shr rbx, 11
	and rbx, 1
	shr rcx, 6
	and rcx, 1
	xor rax, rbx
	or rax, rcx
	mov rbx, 1
	sub rbx, rax
	push rbx
	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_293

	;; -- string --
	mov rax, string_573 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_158__46 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_158 
	ret_func_158__46: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- number --
	mov rax, 0 
	push rax

addr_while_condition_75:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read at index -- 
	pop rax ;; index
	mov rbx, 8 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov rbx, [rbx]
	;; create bit mask
	mov rcx, 0
	sub rcx, 1
	and rbx, rcx
	push rbx

	;; -- number --
	mov rax, 0 
	push rax

	;; -- not equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	mov rbx, 1
	sub rbx, rax
	push rbx

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_while_end_75

	;; -- string --
	mov rax, string_574 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_158__47 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_158 
	ret_func_158__47: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read at index -- 
	pop rax ;; index
	mov rbx, 8 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov rbx, [rbx]
	;; create bit mask
	mov rcx, 0
	sub rcx, 1
	and rbx, rcx
	push rbx

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_158__48 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_158 
	ret_func_158__48: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- add --
	pop rbx
	pop rax
	add rax, rbx
	push rax

	;; -- assignment --
	mov rax, [basestack + 8 * 1]
	mov rbx, 40 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

	;; -- jump --
	jmp addr_while_condition_75

addr_while_end_75:
	;; -- string --
	mov rax, string_575 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_158__49 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_158 
	ret_func_158__49: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 8

	;; -- jump --
	jmp addr_else_49

addr_if_293:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_161__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_161 
	ret_func_161__0: ;; first number is function id, second number id call id

	;; -- string --
	mov rax, string_576 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_158__50 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_158 
	ret_func_158__50: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_158__51 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_158 
	ret_func_158__51: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- string --
	mov rax, string_577 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_158__52 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_158 
	ret_func_158__52: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 40 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_160__7 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_160 
	ret_func_160__7: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- string --
	mov rax, string_578 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_158__53 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_158 
	ret_func_158__53: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- number --
	mov rax, 1 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_60__4 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_60 
	ret_func_60__4: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 8

addr_else_49:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- return --
	;; -- store return value --
	pop rax
	;; -- pop local variables --
	add rsp, 8 
	;; -- restore stackframe -- 
	pop rbx
 mov [basestack + 8 * 1], rbx
	;; -- pop parameters --
	add rsp, 16 
	;; -- push return value --
	push rax
	;; -- pop return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_296:
	;; -- function --
	jmp addr_func_end_297 
addr_func_297:
	mov rax, rsp
	add rax, 8 * 0

	;; -- save current stack frame --
	mov rbx, [basestack + 8 * 1]
	push rbx

	;; -- create new stack frame --
	mov [basestack + 8 * 1], rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- read at index -- 
	pop rax ;; index
	mov rbx, 8 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov rbx, [rbx]
	;; create bit mask
	mov rcx, 0
	sub rcx, 1
	and rbx, rcx
	push rbx

addr_while_condition_76:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 72 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- not equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	mov rbx, 1
	sub rbx, rax
	push rbx

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_while_end_76

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 72 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- string --
	mov rax, string_579 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_141__4 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_141 
	ret_func_141__4: ;; first number is function id, second number id call id

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_294

	;; -- number --
	mov rax, 1 
	push rax

	;; -- assignment --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

	;; -- jump --
	jmp addr_else_50

addr_if_294:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 72 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- string --
	mov rax, string_580 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_141__5 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_141 
	ret_func_141__5: ;; first number is function id, second number id call id

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_295

	;; -- number --
	mov rax, 1 
	push rax

	;; -- assignment --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

	;; -- jump --
	jmp addr_else_50

addr_if_295:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 72 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- string --
	mov rax, string_581 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_141__6 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_141 
	ret_func_141__6: ;; first number is function id, second number id call id

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_296

	;; -- number --
	mov rax, 1 
	push rax

	;; -- assignment --
	mov rax, [basestack + 8 * 1]
	mov rbx, 40 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

	;; -- jump --
	jmp addr_else_50

addr_if_296:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 72 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- string --
	mov rax, string_582 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_141__7 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_141 
	ret_func_141__7: ;; first number is function id, second number id call id

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_297

	;; -- number --
	mov rax, 1 
	push rax

	;; -- assignment --
	mov rax, [basestack + 8 * 1]
	mov rbx, 48 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

	;; -- jump --
	jmp addr_else_50

addr_if_297:
	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 64 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read at index -- 
	pop rax ;; index
	mov rbx, 8 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov rbx, [rbx]
	;; create bit mask
	mov rcx, 0
	sub rcx, 1
	and rbx, rcx
	push rbx

	;; -- assignment --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 8 
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 64 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- mult --
	pop rbx
	pop rax
	mul rbx
	push rax

	;; -- add --
	pop rbx
	pop rax
	add rax, rbx
	push rax

	;; -- assignment --
	mov rax, [basestack + 8 * 1]
	mov rbx, 56 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 8 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- subtract --
	pop rbx
	pop rax
	sub rax, rbx
	push rax

	;; -- assignment --
	mov rax, [basestack + 8 * 1]
	mov rbx, 64 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

addr_else_50:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 64 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- add --
	pop rbx
	pop rax
	add rax, rbx
	push rax

	;; -- assignment --
	mov rax, [basestack + 8 * 1]
	mov rbx, 64 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 0]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 64 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read at index -- 
	pop rax ;; index
	mov rbx, 8 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov rbx, [rbx]
	;; create bit mask
	mov rcx, 0
	sub rcx, 1
	and rbx, rcx
	push rbx

	;; -- assignment --
	mov rax, [basestack + 8 * 1]
	mov rbx, 72 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

	;; -- jump --
	jmp addr_while_condition_76

addr_while_end_76:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- equal --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 6
	and rax, 1
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_298

	;; -- string --
	mov rax, string_583 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_158__54 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_158 
	ret_func_158__54: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_295__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_295 
	ret_func_295__0: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- return --
	;; -- pop local variables --
	add rsp, 64 
	;; -- restore stackframe -- 
	pop rax
 mov [basestack + 8 * 1], rax
	;; -- pop parameters --
	add rsp, 0 
	;; -- return empty --
	push 0
	;; -- jump to return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
	;; -- pop --
	add rsp, 0

addr_if_298:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_165__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_165 
	ret_func_165__0: ;; first number is function id, second number id call id

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 80 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_167__1 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_167 
	ret_func_167__1: ;; first number is function id, second number id call id

	;; -- assignment --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- string --
	mov rax, string_584 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_158__55 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_158 
	ret_func_158__55: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_158__56 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_158 
	ret_func_158__56: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- string --
	mov rax, string_585 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_158__57 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_158 
	ret_func_158__57: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 80 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- string --
	mov rax, string_586 
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 16 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 80 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_167__2 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_167 
	ret_func_167__2: ;; first number is function id, second number id call id

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 88 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 48 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_259__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_259 
	ret_func_259__0: ;; first number is function id, second number id call id

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 96 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_294__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_294 
	ret_func_294__0: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 96 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- read property -- 
	pop rax ;; pointer
	add rax, 112 
	mov rax, [rax]
	;; create bit mask
	mov rbx, 1
	shl rbx, 8 ;; size
	sub rbx, 1
	and rax, rbx
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_299

	;; -- number --
	mov rax, 1 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_60__5 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_60 
	ret_func_60__5: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

addr_if_299:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 96 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_260__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_260 
	ret_func_260__0: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 48 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_300

	;; -- string --
	mov rax, string_587 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_158__58 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_158 
	ret_func_158__58: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 16 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_158__59 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_158 
	ret_func_158__59: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- string --
	mov rax, string_588 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_158__60 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_158 
	ret_func_158__60: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_60__6 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_60 
	ret_func_60__6: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

addr_if_300:
	;; -- number --
	mov rax, 8 
	push rax

	;; -- number --
	mov rax, 8 
	push rax

	;; -- mult --
	pop rbx
	pop rax
	mul rbx
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_136__41 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_136 
	ret_func_136__41: ;; first number is function id, second number id call id

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 104 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- string --
	mov rax, string_589 
	push rax

	;; -- write at index -- 
	pop rcx ;; value
	pop rax ;; index
	mov rbx, 8 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov r8, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rcx, r9
	not r9
	and r8, r9
	add r8, rcx
	mov [rbx], r8
	push rcx

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 104 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- string --
	mov rax, string_590 
	push rax

	;; -- write at index -- 
	pop rcx ;; value
	pop rax ;; index
	mov rbx, 8 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov r8, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rcx, r9
	not r9
	and r8, r9
	add r8, rcx
	mov [rbx], r8
	push rcx

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 104 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 2 
	push rax

	;; -- string --
	mov rax, string_591 
	push rax

	;; -- write at index -- 
	pop rcx ;; value
	pop rax ;; index
	mov rbx, 8 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov r8, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rcx, r9
	not r9
	and r8, r9
	add r8, rcx
	mov [rbx], r8
	push rcx

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 104 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 3 
	push rax

	;; -- string --
	mov rax, string_592 
	push rax

	;; -- write at index -- 
	pop rcx ;; value
	pop rax ;; index
	mov rbx, 8 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov r8, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rcx, r9
	not r9
	and r8, r9
	add r8, rcx
	mov [rbx], r8
	push rcx

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 104 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 4 
	push rax

	;; -- string --
	mov rax, string_593 
	push rax

	;; -- write at index -- 
	pop rcx ;; value
	pop rax ;; index
	mov rbx, 8 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov r8, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rcx, r9
	not r9
	and r8, r9
	add r8, rcx
	mov [rbx], r8
	push rcx

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 104 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 5 
	push rax

	;; -- string --
	mov rax, string_594 
	push rax

	;; -- write at index -- 
	pop rcx ;; value
	pop rax ;; index
	mov rbx, 8 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov r8, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rcx, r9
	not r9
	and r8, r9
	add r8, rcx
	mov [rbx], r8
	push rcx

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 104 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 6 
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 88 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- write at index -- 
	pop rcx ;; value
	pop rax ;; index
	mov rbx, 8 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov r8, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rcx, r9
	not r9
	and r8, r9
	add r8, rcx
	mov [rbx], r8
	push rcx

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 104 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 7 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- write at index -- 
	pop rcx ;; value
	pop rax ;; index
	mov rbx, 8 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov r8, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rcx, r9
	not r9
	and r8, r9
	add r8, rcx
	mov [rbx], r8
	push rcx

	;; -- pop --
	add rsp, 8

	;; -- number --
	mov rax, 8 
	push rax

	;; -- number --
	mov rax, 5 
	push rax

	;; -- mult --
	pop rbx
	pop rax
	mul rbx
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_136__42 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_136 
	ret_func_136__42: ;; first number is function id, second number id call id

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 112 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- string --
	mov rax, string_595 
	push rax

	;; -- write at index -- 
	pop rcx ;; value
	pop rax ;; index
	mov rbx, 8 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov r8, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rcx, r9
	not r9
	and r8, r9
	add r8, rcx
	mov [rbx], r8
	push rcx

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 112 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- string --
	mov rax, string_596 
	push rax

	;; -- write at index -- 
	pop rcx ;; value
	pop rax ;; index
	mov rbx, 8 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov r8, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rcx, r9
	not r9
	and r8, r9
	add r8, rcx
	mov [rbx], r8
	push rcx

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 112 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 2 
	push rax

	;; -- string --
	mov rax, string_597 
	push rax

	;; -- write at index -- 
	pop rcx ;; value
	pop rax ;; index
	mov rbx, 8 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov r8, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rcx, r9
	not r9
	and r8, r9
	add r8, rcx
	mov [rbx], r8
	push rcx

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 112 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 3 
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 88 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- write at index -- 
	pop rcx ;; value
	pop rax ;; index
	mov rbx, 8 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov r8, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rcx, r9
	not r9
	and r8, r9
	add r8, rcx
	mov [rbx], r8
	push rcx

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 112 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 4 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- write at index -- 
	pop rcx ;; value
	pop rax ;; index
	mov rbx, 8 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov r8, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rcx, r9
	not r9
	and r8, r9
	add r8, rcx
	mov [rbx], r8
	push rcx

	;; -- pop --
	add rsp, 8

	;; -- number --
	mov rax, 0 
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 32 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_301

	;; -- string --
	mov rax, string_598 
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 104 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_296__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_296 
	ret_func_296__0: ;; first number is function id, second number id call id

	;; -- assignment --
	mov rax, [basestack + 8 * 1]
	mov rbx, 120 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

	;; -- jump --
	jmp addr_else_51

addr_if_301:
	;; -- string --
	mov rax, string_599 
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 112 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_296__1 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_296 
	ret_func_296__1: ;; first number is function id, second number id call id

	;; -- assignment --
	mov rax, [basestack + 8 * 1]
	mov rbx, 120 
	sub rax, rbx
	mov rbx, [rsp]
	mov [rax], rbx

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

addr_else_51:
	;; -- number --
	mov rax, 8 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_136__43 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_136 
	ret_func_136__43: ;; first number is function id, second number id call id

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 120 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 128 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_61__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_61 
	ret_func_61__0: ;; first number is function id, second number id call id

	;; -- number --
	mov rax, 0 
	push rax

	;; -- less --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 7
	and rax, 1
	pushf
	pop rbx
	shr rbx, 11
	and rbx, 1
	xor rax, rbx
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_302

	;; -- string --
	mov rax, string_600 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_158__61 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_158 
	ret_func_158__61: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- number --
	mov rax, 1 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_60__7 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_60 
	ret_func_60__7: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

addr_if_302:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 128 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- read at index -- 
	pop rax ;; index
	mov rbx, 8 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov rbx, [rbx]
	;; create bit mask
	mov rcx, 0
	sub rcx, 1
	and rbx, rcx
	push rbx

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_162__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_162 
	ret_func_162__0: ;; first number is function id, second number id call id

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_303

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 128 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- read at index -- 
	pop rax ;; index
	mov rbx, 8 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov rbx, [rbx]
	;; create bit mask
	mov rcx, 0
	sub rcx, 1
	and rbx, rcx
	push rbx

	;; -- number --
	mov rax, 127 
	push rax

	;; -- bit and --
	pop rbx
	pop rax
	and rax, rbx
	push rax
	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_163__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_163 
	ret_func_163__0: ;; first number is function id, second number id call id

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 136 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- greater --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	pushf
	pop rbx
	pushf
	pop rcx
	shr rax, 7
	and rax, 1
	shr rbx, 11
	and rbx, 1
	shr rcx, 6
	and rcx, 1
	xor rax, rbx
	or rax, rcx
	mov rbx, 1
	sub rbx, rax
	push rbx
	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_304

	;; -- string --
	mov rax, string_601 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_158__62 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_158 
	ret_func_158__62: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 136 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_160__8 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_160 
	ret_func_160__8: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- string --
	mov rax, string_602 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_158__63 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_158 
	ret_func_158__63: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 136 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_60__8 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_60 
	ret_func_60__8: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

addr_if_304:
	;; -- pop --
	add rsp, 8

addr_if_303:
	;; -- number --
	mov rax, 2 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_136__44 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_136 
	ret_func_136__44: ;; first number is function id, second number id call id

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 136 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- character --
	mov rax, 0x6F 
	push rax

	;; -- write at index -- 
	pop rcx ;; value
	pop rax ;; index
	mov rbx, 1 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov r8, [rbx]
	;; create bit mask
	mov r9, 1
	shl r9, 8;; size
	sub r9, 1
	and rcx, r9
	not r9
	and r8, r9
	add r8, rcx
	mov [rbx], r8
	push rcx

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 136 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- character --
	mov rax, 0x00 
	push rax

	;; -- write at index -- 
	pop rcx ;; value
	pop rax ;; index
	mov rbx, 1 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov r8, [rbx]
	;; create bit mask
	mov r9, 1
	shl r9, 8;; size
	sub r9, 1
	and rcx, r9
	not r9
	and r8, r9
	add r8, rcx
	mov [rbx], r8
	push rcx

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 80 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 136 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 16 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 80 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_167__3 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_167 
	ret_func_167__3: ;; first number is function id, second number id call id

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 80 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- write property -- 
	pop rax ;; value
	pop rbx ;; pointer
	add rbx, 16 
	mov rcx, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rax, r9
	not r9
	and rcx, r9
	add rcx, rax
	mov [rbx], rcx
	push rax

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 80 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_167__4 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_167 
	ret_func_167__4: ;; first number is function id, second number id call id

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 136 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_137__47 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_137 
	ret_func_137__47: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- number --
	mov rax, 8 
	push rax

	;; -- number --
	mov rax, 5 
	push rax

	;; -- mult --
	pop rbx
	pop rax
	mul rbx
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_136__45 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_136 
	ret_func_136__45: ;; first number is function id, second number id call id

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 160 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- string --
	mov rax, string_603 
	push rax

	;; -- write at index -- 
	pop rcx ;; value
	pop rax ;; index
	mov rbx, 8 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov r8, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rcx, r9
	not r9
	and r8, r9
	add r8, rcx
	mov [rbx], r8
	push rcx

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 160 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 1 
	push rax

	;; -- string --
	mov rax, string_604 
	push rax

	;; -- write at index -- 
	pop rcx ;; value
	pop rax ;; index
	mov rbx, 8 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov r8, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rcx, r9
	not r9
	and r8, r9
	add r8, rcx
	mov [rbx], r8
	push rcx

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 160 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 2 
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 152 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- write at index -- 
	pop rcx ;; value
	pop rax ;; index
	mov rbx, 8 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov r8, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rcx, r9
	not r9
	and r8, r9
	add r8, rcx
	mov [rbx], r8
	push rcx

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 160 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 3 
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 144 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- write at index -- 
	pop rcx ;; value
	pop rax ;; index
	mov rbx, 8 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov r8, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rcx, r9
	not r9
	and r8, r9
	add r8, rcx
	mov [rbx], r8
	push rcx

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 160 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 4 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- write at index -- 
	pop rcx ;; value
	pop rax ;; index
	mov rbx, 8 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov r8, [rbx]
	;; create bit mask
	mov r9, 0
	sub r9, 1
	and rcx, r9
	not r9
	and r8, r9
	add r8, rcx
	mov [rbx], r8
	push rcx

	;; -- pop --
	add rsp, 8

	;; -- number --
	mov rax, 8 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_136__46 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_136 
	ret_func_136__46: ;; first number is function id, second number id call id

	;; -- string --
	mov rax, string_605 
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 160 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_296__2 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_296 
	ret_func_296__2: ;; first number is function id, second number id call id

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 176 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 168 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_61__1 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_61 
	ret_func_61__1: ;; first number is function id, second number id call id

	;; -- number --
	mov rax, 0 
	push rax

	;; -- less --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 7
	and rax, 1
	pushf
	pop rbx
	shr rbx, 11
	and rbx, 1
	xor rax, rbx
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_305

	;; -- string --
	mov rax, string_606 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_158__64 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_158 
	ret_func_158__64: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- number --
	mov rax, 1 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_60__9 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_60 
	ret_func_60__9: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

addr_if_305:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 168 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- read at index -- 
	pop rax ;; index
	mov rbx, 8 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov rbx, [rbx]
	;; create bit mask
	mov rcx, 0
	sub rcx, 1
	and rbx, rcx
	push rbx

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_162__1 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_162 
	ret_func_162__1: ;; first number is function id, second number id call id

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_306

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 168 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- read at index -- 
	pop rax ;; index
	mov rbx, 8 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov rbx, [rbx]
	;; create bit mask
	mov rcx, 0
	sub rcx, 1
	and rbx, rcx
	push rbx

	;; -- number --
	mov rax, 127 
	push rax

	;; -- bit and --
	pop rbx
	pop rax
	and rax, rbx
	push rax
	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_163__1 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_163 
	ret_func_163__1: ;; first number is function id, second number id call id

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 184 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- greater --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	pushf
	pop rbx
	pushf
	pop rcx
	shr rax, 7
	and rax, 1
	shr rbx, 11
	and rbx, 1
	shr rcx, 6
	and rcx, 1
	xor rax, rbx
	or rax, rcx
	mov rbx, 1
	sub rbx, rax
	push rbx
	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_307

	;; -- string --
	mov rax, string_607 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_158__65 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_158 
	ret_func_158__65: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 184 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_160__9 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_160 
	ret_func_160__9: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- string --
	mov rax, string_608 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_158__66 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_158 
	ret_func_158__66: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 184 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_60__10 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_60 
	ret_func_60__10: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

addr_if_307:
	;; -- pop --
	add rsp, 8

addr_if_306:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 24 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_308

	;; -- number --
	mov rax, 8 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_136__47 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_136 
	ret_func_136__47: ;; first number is function id, second number id call id

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 152 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 56 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_296__3 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_296 
	ret_func_296__3: ;; first number is function id, second number id call id

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 192 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 184 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_61__2 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_61 
	ret_func_61__2: ;; first number is function id, second number id call id

	;; -- number --
	mov rax, 0 
	push rax

	;; -- less --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	shr rax, 7
	and rax, 1
	pushf
	pop rbx
	shr rbx, 11
	and rbx, 1
	xor rax, rbx
	push rax

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_309

	;; -- string --
	mov rax, string_609 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_158__67 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_158 
	ret_func_158__67: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- number --
	mov rax, 1 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_60__11 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_60 
	ret_func_60__11: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

addr_if_309:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 184 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- read at index -- 
	pop rax ;; index
	mov rbx, 8 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov rbx, [rbx]
	;; create bit mask
	mov rcx, 0
	sub rcx, 1
	and rbx, rcx
	push rbx

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_162__2 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_162 
	ret_func_162__2: ;; first number is function id, second number id call id

	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_310

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 184 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- read at index -- 
	pop rax ;; index
	mov rbx, 8 
	mul rbx
	pop rbx ;; pointer
	add rbx, rax
	mov rbx, [rbx]
	;; create bit mask
	mov rcx, 0
	sub rcx, 1
	and rbx, rcx
	push rbx

	;; -- number --
	mov rax, 127 
	push rax

	;; -- bit and --
	pop rbx
	pop rax
	and rax, rbx
	push rax
	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_163__2 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_163 
	ret_func_163__2: ;; first number is function id, second number id call id

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 200 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- number --
	mov rax, 0 
	push rax

	;; -- greater --
	pop rbx
	pop rax
	cmp rax, rbx
	pushf
	pop rax
	pushf
	pop rbx
	pushf
	pop rcx
	shr rax, 7
	and rax, 1
	shr rbx, 11
	and rbx, 1
	shr rcx, 6
	and rcx, 1
	xor rax, rbx
	or rax, rcx
	mov rbx, 1
	sub rbx, rax
	push rbx
	;; -- condition --
	pop rax
	cmp rax, 1

	;; -- jump if not equal --
	jne addr_if_311

	;; -- string --
	mov rax, string_610 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_158__68 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_158 
	ret_func_158__68: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 200 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_160__10 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_160 
	ret_func_160__10: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- string --
	mov rax, string_611 
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_158__69 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_158 
	ret_func_158__69: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 200 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_60__12 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_60 
	ret_func_60__12: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- pop --
	add rsp, 0

addr_if_311:
	;; -- pop --
	add rsp, 8

addr_if_310:
	;; -- pop --
	add rsp, 16

addr_if_308:
	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 88 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_137__48 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_137 
	ret_func_137__48: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 144 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_137__49 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_137 
	ret_func_137__49: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- identifier --
	mov rax, [basestack + 8 * 1]
	mov rbx, 152 
	sub rax, rbx
	mov rax, [rax]
	push rax

	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_137__50 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_137 
	ret_func_137__50: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	;; -- return --
	;; -- pop local variables --
	add rsp, 168 
	;; -- restore stackframe -- 
	pop rax
 mov [basestack + 8 * 1], rax
	;; -- pop parameters --
	add rsp, 0 
	;; -- return empty --
	push 0
	;; -- jump to return address --
	mov rax, [callrsp]
	add rax, 8
	mov [callrsp], rax
	mov rax, [callrsp]
	jmp [rax]
addr_func_end_297:
	;; -- function call -- 
	;; -- push current address --
	mov rax, ret_func_297__0 
	mov rbx, [callrsp]
	mov [rbx], rax
	sub rbx, 8
	mov [callrsp], rbx
	;; -- jump --
	jmp addr_func_297 
	ret_func_297__0: ;; first number is function id, second number id call id

	;; -- pop --
	add rsp, 8

	mov rax, 60
	xor rdi, rdi
	syscall

section .bss
	basestack: resq 2048 
	callrsp: resq 1
	callStack: resq 2048 
section .data
	string_0: db 0x50, 0x41, 0x54, 0x48, 0x00
	string_1: db 0x5B, 0x45, 0x52, 0x52, 0x4F, 0x52, 0x5D, 0x20, 0x63, 0x61, 0x6E, 0x20, 0x6E, 0x6F, 0x74, 0x20, 0x67, 0x65, 0x74, 0x20, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6E, 0x74, 0x20, 0x77, 0x6F, 0x72, 0x6B, 0x69, 0x6E, 0x67, 0x20, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x79, 0x2C, 0x20, 0x63, 0x6F, 0x64, 0x65, 0x3A, 0x20, 0x00
	string_2: db 0x20, 0x0A, 0x00
	string_3: db 0x5B, 0x45, 0x52, 0x52, 0x4F, 0x52, 0x5D, 0x20, 0x63, 0x6F, 0x75, 0x6C, 0x64, 0x20, 0x6E, 0x6F, 0x74, 0x20, 0x6F, 0x70, 0x65, 0x6E, 0x20, 0x64, 0x69, 0x72, 0x20, 0x27, 0x00
	string_4: db 0x27, 0x2C, 0x20, 0x65, 0x72, 0x72, 0x6F, 0x72, 0x20, 0x63, 0x6F, 0x64, 0x65, 0x3A, 0x20, 0x00
	string_5: db 0x20, 0x0A, 0x00
	string_6: db 0x5B, 0x45, 0x52, 0x52, 0x4F, 0x52, 0x5D, 0x20, 0x63, 0x61, 0x6E, 0x20, 0x6E, 0x6F, 0x74, 0x20, 0x6F, 0x70, 0x65, 0x6E, 0x20, 0x66, 0x69, 0x6C, 0x65, 0x20, 0x27, 0x00
	string_7: db 0x27, 0x0A, 0x00
	string_8: db 0x5B, 0x45, 0x52, 0x52, 0x4F, 0x52, 0x5D, 0x20, 0x77, 0x68, 0x65, 0x6E, 0x20, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6E, 0x67, 0x20, 0x66, 0x69, 0x6C, 0x65, 0x20, 0x27, 0x00
	string_9: db 0x27, 0x0A, 0x00
	string_10: db 0x3A, 0x20, 0x00
	string_11: db 0x3A, 0x20, 0x00
	string_12: db 0x3A, 0x65, 0x72, 0x72, 0x6F, 0x72, 0x3A, 0x20, 0x61, 0x74, 0x20, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x3A, 0x20, 0x27, 0x00
	string_13: db 0x27, 0x20, 0x3A, 0x00
	string_14: db 0x09, 0x0A, 0x00
	string_15: db 0x76, 0x61, 0x72, 0x00
	string_16: db 0x66, 0x75, 0x6E, 0x63, 0x00
	string_17: db 0x69, 0x66, 0x00
	string_18: db 0x65, 0x6C, 0x73, 0x65, 0x00
	string_19: db 0x74, 0x79, 0x70, 0x65, 0x00
	string_20: db 0x77, 0x68, 0x69, 0x6C, 0x65, 0x00
	string_21: db 0x72, 0x65, 0x74, 0x75, 0x72, 0x6E, 0x00
	string_22: db 0x69, 0x6D, 0x70, 0x6F, 0x72, 0x74, 0x00
	string_23: db 0x73, 0x69, 0x7A, 0x65, 0x6F, 0x66, 0x00
	string_24: db 0x63, 0x6F, 0x6E, 0x73, 0x74, 0x00
	string_25: db 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x27, 0x27, 0x27, 0x20, 0x61, 0x66, 0x74, 0x65, 0x72, 0x20, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x00
	string_26: db 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x27, 0x22, 0x27, 0x20, 0x61, 0x66, 0x74, 0x65, 0x72, 0x20, 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x00
	string_27: db 0x63, 0x6F, 0x75, 0x6C, 0x64, 0x20, 0x6E, 0x6F, 0x74, 0x20, 0x72, 0x65, 0x63, 0x6F, 0x67, 0x6E, 0x69, 0x7A, 0x65, 0x20, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x00
	string_28: db 0x20, 0x20, 0x00
	string_29: db 0x73, 0x65, 0x63, 0x74, 0x69, 0x6F, 0x6E, 0x20, 0x2E, 0x74, 0x65, 0x78, 0x74, 0x0A, 0x00
	string_30: db 0x67, 0x6C, 0x6F, 0x62, 0x61, 0x6C, 0x20, 0x5F, 0x73, 0x74, 0x61, 0x72, 0x74, 0x0A, 0x00
	string_31: db 0x5F, 0x73, 0x74, 0x61, 0x72, 0x74, 0x3A, 0x0A, 0x00
	string_32: db 0x09, 0x3B, 0x3B, 0x20, 0x2D, 0x2D, 0x20, 0x69, 0x6E, 0x69, 0x74, 0x69, 0x61, 0x6C, 0x69, 0x7A, 0x69, 0x6E, 0x67, 0x20, 0x63, 0x61, 0x6C, 0x6C, 0x20, 0x73, 0x74, 0x61, 0x63, 0x6B, 0x20, 0x2D, 0x2D, 0x0A, 0x00
	string_33: db 0x09, 0x6C, 0x65, 0x61, 0x20, 0x72, 0x61, 0x78, 0x2C, 0x20, 0x5B, 0x63, 0x61, 0x6C, 0x6C, 0x53, 0x74, 0x61, 0x63, 0x6B, 0x20, 0x2B, 0x20, 0x00
	string_34: db 0x5D, 0x0A, 0x00
	string_35: db 0x09, 0x6D, 0x6F, 0x76, 0x20, 0x5B, 0x63, 0x61, 0x6C, 0x6C, 0x72, 0x73, 0x70, 0x5D, 0x2C, 0x20, 0x72, 0x61, 0x78, 0x0A, 0x00
	string_36: db 0x09, 0x6D, 0x6F, 0x76, 0x20, 0x72, 0x61, 0x78, 0x2C, 0x20, 0x72, 0x73, 0x70, 0x0A, 0x00
	string_37: db 0x09, 0x61, 0x64, 0x64, 0x20, 0x72, 0x61, 0x78, 0x2C, 0x20, 0x38, 0x0A, 0x00
	string_38: db 0x09, 0x70, 0x75, 0x73, 0x68, 0x20, 0x72, 0x61, 0x78, 0x0A, 0x00
	string_39: db 0x09, 0x6D, 0x6F, 0x76, 0x20, 0x5B, 0x62, 0x61, 0x73, 0x65, 0x73, 0x74, 0x61, 0x63, 0x6B, 0x5D, 0x2C, 0x20, 0x72, 0x61, 0x78, 0x0A, 0x00
	string_40: db 0x09, 0x3B, 0x3B, 0x20, 0x2D, 0x2D, 0x20, 0x73, 0x79, 0x73, 0x63, 0x61, 0x6C, 0x6C, 0x20, 0x62, 0x75, 0x69, 0x6C, 0x74, 0x69, 0x6E, 0x20, 0x2D, 0x2D, 0x0A, 0x00
	string_41: db 0x09, 0x6A, 0x6D, 0x70, 0x20, 0x61, 0x64, 0x64, 0x72, 0x5F, 0x66, 0x75, 0x6E, 0x63, 0x5F, 0x65, 0x6E, 0x64, 0x5F, 0x30, 0x0A, 0x00
	string_42: db 0x61, 0x64, 0x64, 0x72, 0x5F, 0x66, 0x75, 0x6E, 0x63, 0x5F, 0x30, 0x3A, 0x0A, 0x00
	string_43: db 0x09, 0x70, 0x6F, 0x70, 0x20, 0x72, 0x39, 0x0A, 0x00
	string_44: db 0x09, 0x70, 0x6F, 0x70, 0x20, 0x72, 0x38, 0x0A, 0x00
	string_45: db 0x09, 0x70, 0x6F, 0x70, 0x20, 0x72, 0x31, 0x30, 0x0A, 0x00
	string_46: db 0x09, 0x70, 0x6F, 0x70, 0x20, 0x72, 0x64, 0x78, 0x0A, 0x00
	string_47: db 0x09, 0x70, 0x6F, 0x70, 0x20, 0x72, 0x73, 0x69, 0x0A, 0x00
	string_48: db 0x09, 0x70, 0x6F, 0x70, 0x20, 0x72, 0x64, 0x69, 0x0A, 0x00
	string_49: db 0x09, 0x70, 0x6F, 0x70, 0x20, 0x72, 0x61, 0x78, 0x0A, 0x00
	string_50: db 0x09, 0x73, 0x79, 0x73, 0x63, 0x61, 0x6C, 0x6C, 0x0A, 0x00
	string_51: db 0x09, 0x3B, 0x3B, 0x20, 0x2D, 0x2D, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6E, 0x20, 0x2D, 0x2D, 0x0A, 0x00
	string_52: db 0x09, 0x3B, 0x3B, 0x20, 0x2D, 0x2D, 0x20, 0x70, 0x75, 0x73, 0x68, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6E, 0x20, 0x76, 0x61, 0x6C, 0x75, 0x65, 0x20, 0x2D, 0x2D, 0x0A, 0x00
	string_53: db 0x09, 0x70, 0x75, 0x73, 0x68, 0x20, 0x72, 0x61, 0x78, 0x0A, 0x00
	string_54: db 0x09, 0x3B, 0x3B, 0x20, 0x2D, 0x2D, 0x20, 0x70, 0x6F, 0x70, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6E, 0x20, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x20, 0x2D, 0x2D, 0x0A, 0x00
	string_55: db 0x09, 0x6D, 0x6F, 0x76, 0x20, 0x72, 0x61, 0x78, 0x2C, 0x20, 0x5B, 0x63, 0x61, 0x6C, 0x6C, 0x72, 0x73, 0x70, 0x5D, 0x0A, 0x00
	string_56: db 0x09, 0x61, 0x64, 0x64, 0x20, 0x72, 0x61, 0x78, 0x2C, 0x20, 0x38, 0x0A, 0x00
	string_57: db 0x09, 0x6D, 0x6F, 0x76, 0x20, 0x5B, 0x63, 0x61, 0x6C, 0x6C, 0x72, 0x73, 0x70, 0x5D, 0x2C, 0x20, 0x72, 0x61, 0x78, 0x0A, 0x00
	string_58: db 0x09, 0x6D, 0x6F, 0x76, 0x20, 0x72, 0x61, 0x78, 0x2C, 0x20, 0x5B, 0x63, 0x61, 0x6C, 0x6C, 0x72, 0x73, 0x70, 0x5D, 0x0A, 0x00
	string_59: db 0x09, 0x6A, 0x6D, 0x70, 0x20, 0x5B, 0x72, 0x61, 0x78, 0x5D, 0x0A, 0x00
	string_60: db 0x61, 0x64, 0x64, 0x72, 0x5F, 0x66, 0x75, 0x6E, 0x63, 0x5F, 0x65, 0x6E, 0x64, 0x5F, 0x30, 0x3A, 0x0A, 0x00
	string_61: db 0x09, 0x3B, 0x3B, 0x20, 0x2D, 0x2D, 0x20, 0x70, 0x6F, 0x70, 0x20, 0x2D, 0x2D, 0x0A, 0x00
	string_62: db 0x09, 0x61, 0x64, 0x64, 0x20, 0x72, 0x73, 0x70, 0x2C, 0x20, 0x00
	string_63: db 0x0A, 0x0A, 0x00
	string_64: db 0x3A, 0x0A, 0x00
	string_65: db 0x09, 0x3B, 0x3B, 0x20, 0x2D, 0x2D, 0x20, 0x66, 0x75, 0x6E, 0x63, 0x74, 0x69, 0x6F, 0x6E, 0x20, 0x2D, 0x2D, 0x0A, 0x00
	string_66: db 0x09, 0x6A, 0x6D, 0x70, 0x20, 0x61, 0x64, 0x64, 0x72, 0x5F, 0x66, 0x75, 0x6E, 0x63, 0x5F, 0x65, 0x6E, 0x64, 0x5F, 0x00
	string_67: db 0x20, 0x0A, 0x00
	string_68: db 0x61, 0x64, 0x64, 0x72, 0x5F, 0x66, 0x75, 0x6E, 0x63, 0x5F, 0x00
	string_69: db 0x3A, 0x0A, 0x00
	string_70: db 0x09, 0x6D, 0x6F, 0x76, 0x20, 0x72, 0x61, 0x78, 0x2C, 0x20, 0x72, 0x73, 0x70, 0x0A, 0x00
	string_71: db 0x09, 0x61, 0x64, 0x64, 0x20, 0x72, 0x61, 0x78, 0x2C, 0x20, 0x38, 0x20, 0x2A, 0x20, 0x00
	string_72: db 0x0A, 0x0A, 0x00
	string_73: db 0x09, 0x3B, 0x3B, 0x20, 0x2D, 0x2D, 0x20, 0x73, 0x61, 0x76, 0x65, 0x20, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6E, 0x74, 0x20, 0x73, 0x74, 0x61, 0x63, 0x6B, 0x20, 0x66, 0x72, 0x61, 0x6D, 0x65, 0x20, 0x2D, 0x2D, 0x0A, 0x00
	string_74: db 0x09, 0x6D, 0x6F, 0x76, 0x20, 0x72, 0x62, 0x78, 0x2C, 0x20, 0x5B, 0x62, 0x61, 0x73, 0x65, 0x73, 0x74, 0x61, 0x63, 0x6B, 0x20, 0x2B, 0x20, 0x38, 0x20, 0x2A, 0x20, 0x00
	string_75: db 0x5D, 0x0A, 0x00
	string_76: db 0x09, 0x70, 0x75, 0x73, 0x68, 0x20, 0x72, 0x62, 0x78, 0x0A, 0x0A, 0x00
	string_77: db 0x09, 0x3B, 0x3B, 0x20, 0x2D, 0x2D, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x6E, 0x65, 0x77, 0x20, 0x73, 0x74, 0x61, 0x63, 0x6B, 0x20, 0x66, 0x72, 0x61, 0x6D, 0x65, 0x20, 0x2D, 0x2D, 0x0A, 0x00
	string_78: db 0x09, 0x6D, 0x6F, 0x76, 0x20, 0x5B, 0x62, 0x61, 0x73, 0x65, 0x73, 0x74, 0x61, 0x63, 0x6B, 0x20, 0x2B, 0x20, 0x38, 0x20, 0x2A, 0x20, 0x00
	string_79: db 0x5D, 0x2C, 0x20, 0x72, 0x61, 0x78, 0x0A, 0x0A, 0x00
	string_80: db 0x09, 0x3B, 0x3B, 0x20, 0x2D, 0x2D, 0x20, 0x66, 0x75, 0x6E, 0x63, 0x74, 0x69, 0x6F, 0x6E, 0x20, 0x63, 0x61, 0x6C, 0x6C, 0x20, 0x2D, 0x2D, 0x20, 0x0A, 0x00
	string_81: db 0x09, 0x3B, 0x3B, 0x20, 0x2D, 0x2D, 0x20, 0x70, 0x75, 0x73, 0x68, 0x20, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6E, 0x74, 0x20, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x20, 0x2D, 0x2D, 0x0A, 0x00
	string_82: db 0x09, 0x6D, 0x6F, 0x76, 0x20, 0x72, 0x61, 0x78, 0x2C, 0x20, 0x72, 0x65, 0x74, 0x5F, 0x66, 0x75, 0x6E, 0x63, 0x5F, 0x00
	string_83: db 0x5F, 0x5F, 0x00
	string_84: db 0x20, 0x0A, 0x00
	string_85: db 0x09, 0x6D, 0x6F, 0x76, 0x20, 0x72, 0x62, 0x78, 0x2C, 0x20, 0x5B, 0x63, 0x61, 0x6C, 0x6C, 0x72, 0x73, 0x70, 0x5D, 0x0A, 0x00
	string_86: db 0x09, 0x6D, 0x6F, 0x76, 0x20, 0x5B, 0x72, 0x62, 0x78, 0x5D, 0x2C, 0x20, 0x72, 0x61, 0x78, 0x0A, 0x00
	string_87: db 0x09, 0x73, 0x75, 0x62, 0x20, 0x72, 0x62, 0x78, 0x2C, 0x20, 0x38, 0x0A, 0x00
	string_88: db 0x09, 0x6D, 0x6F, 0x76, 0x20, 0x5B, 0x63, 0x61, 0x6C, 0x6C, 0x72, 0x73, 0x70, 0x5D, 0x2C, 0x20, 0x72, 0x62, 0x78, 0x0A, 0x00
	string_89: db 0x09, 0x3B, 0x3B, 0x20, 0x2D, 0x2D, 0x20, 0x6A, 0x75, 0x6D, 0x70, 0x20, 0x2D, 0x2D, 0x0A, 0x00
	string_90: db 0x09, 0x6A, 0x6D, 0x70, 0x20, 0x61, 0x64, 0x64, 0x72, 0x5F, 0x66, 0x75, 0x6E, 0x63, 0x5F, 0x00
	string_91: db 0x20, 0x0A, 0x00
	string_92: db 0x09, 0x72, 0x65, 0x74, 0x5F, 0x66, 0x75, 0x6E, 0x63, 0x5F, 0x00
	string_93: db 0x5F, 0x5F, 0x00
	string_94: db 0x3A, 0x20, 0x3B, 0x3B, 0x20, 0x66, 0x69, 0x72, 0x73, 0x74, 0x20, 0x6E, 0x75, 0x6D, 0x62, 0x65, 0x72, 0x20, 0x69, 0x73, 0x20, 0x66, 0x75, 0x6E, 0x63, 0x74, 0x69, 0x6F, 0x6E, 0x20, 0x69, 0x64, 0x2C, 0x20, 0x73, 0x65, 0x63, 0x6F, 0x6E, 0x64, 0x20, 0x6E, 0x75, 0x6D, 0x62, 0x65, 0x72, 0x20, 0x69, 0x64, 0x20, 0x63, 0x61, 0x6C, 0x6C, 0x20, 0x69, 0x64, 0x0A, 0x0A, 0x00
	string_95: db 0x09, 0x3B, 0x3B, 0x20, 0x2D, 0x2D, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6E, 0x20, 0x2D, 0x2D, 0x0A, 0x00
	string_96: db 0x09, 0x3B, 0x3B, 0x20, 0x2D, 0x2D, 0x20, 0x70, 0x6F, 0x70, 0x20, 0x6C, 0x6F, 0x63, 0x61, 0x6C, 0x20, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6C, 0x65, 0x73, 0x20, 0x2D, 0x2D, 0x0A, 0x00
	string_97: db 0x09, 0x61, 0x64, 0x64, 0x20, 0x72, 0x73, 0x70, 0x2C, 0x20, 0x00
	string_98: db 0x20, 0x0A, 0x00
	string_99: db 0x09, 0x3B, 0x3B, 0x20, 0x2D, 0x2D, 0x20, 0x72, 0x65, 0x73, 0x74, 0x6F, 0x72, 0x65, 0x20, 0x73, 0x74, 0x61, 0x63, 0x6B, 0x66, 0x72, 0x61, 0x6D, 0x65, 0x20, 0x2D, 0x2D, 0x20, 0x0A, 0x00
	string_100: db 0x09, 0x70, 0x6F, 0x70, 0x20, 0x72, 0x61, 0x78, 0x0A, 0x00
	string_101: db 0x20, 0x6D, 0x6F, 0x76, 0x20, 0x5B, 0x62, 0x61, 0x73, 0x65, 0x73, 0x74, 0x61, 0x63, 0x6B, 0x20, 0x2B, 0x20, 0x38, 0x20, 0x2A, 0x20, 0x00
	string_102: db 0x5D, 0x2C, 0x20, 0x72, 0x61, 0x78, 0x0A, 0x00
	string_103: db 0x09, 0x3B, 0x3B, 0x20, 0x2D, 0x2D, 0x20, 0x70, 0x6F, 0x70, 0x20, 0x70, 0x61, 0x72, 0x61, 0x6D, 0x65, 0x74, 0x65, 0x72, 0x73, 0x20, 0x2D, 0x2D, 0x0A, 0x00
	string_104: db 0x09, 0x61, 0x64, 0x64, 0x20, 0x72, 0x73, 0x70, 0x2C, 0x20, 0x00
	string_105: db 0x20, 0x0A, 0x00
	string_106: db 0x09, 0x3B, 0x3B, 0x20, 0x2D, 0x2D, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6E, 0x20, 0x65, 0x6D, 0x70, 0x74, 0x79, 0x20, 0x2D, 0x2D, 0x0A, 0x00
	string_107: db 0x09, 0x70, 0x75, 0x73, 0x68, 0x20, 0x30, 0x0A, 0x00
	string_108: db 0x09, 0x3B, 0x3B, 0x20, 0x2D, 0x2D, 0x20, 0x6A, 0x75, 0x6D, 0x70, 0x20, 0x74, 0x6F, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6E, 0x20, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x20, 0x2D, 0x2D, 0x0A, 0x00
	string_109: db 0x09, 0x6D, 0x6F, 0x76, 0x20, 0x72, 0x61, 0x78, 0x2C, 0x20, 0x5B, 0x63, 0x61, 0x6C, 0x6C, 0x72, 0x73, 0x70, 0x5D, 0x0A, 0x00
	string_110: db 0x09, 0x61, 0x64, 0x64, 0x20, 0x72, 0x61, 0x78, 0x2C, 0x20, 0x38, 0x0A, 0x00
	string_111: db 0x09, 0x6D, 0x6F, 0x76, 0x20, 0x5B, 0x63, 0x61, 0x6C, 0x6C, 0x72, 0x73, 0x70, 0x5D, 0x2C, 0x20, 0x72, 0x61, 0x78, 0x0A, 0x00
	string_112: db 0x09, 0x6D, 0x6F, 0x76, 0x20, 0x72, 0x61, 0x78, 0x2C, 0x20, 0x5B, 0x63, 0x61, 0x6C, 0x6C, 0x72, 0x73, 0x70, 0x5D, 0x0A, 0x00
	string_113: db 0x09, 0x6A, 0x6D, 0x70, 0x20, 0x5B, 0x72, 0x61, 0x78, 0x5D, 0x0A, 0x00
	string_114: db 0x09, 0x3B, 0x3B, 0x20, 0x2D, 0x2D, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6E, 0x20, 0x2D, 0x2D, 0x0A, 0x00
	string_115: db 0x09, 0x3B, 0x3B, 0x20, 0x2D, 0x2D, 0x20, 0x73, 0x74, 0x6F, 0x72, 0x65, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6E, 0x20, 0x76, 0x61, 0x6C, 0x75, 0x65, 0x20, 0x2D, 0x2D, 0x0A, 0x00
	string_116: db 0x09, 0x70, 0x6F, 0x70, 0x20, 0x72, 0x61, 0x78, 0x0A, 0x00
	string_117: db 0x09, 0x3B, 0x3B, 0x20, 0x2D, 0x2D, 0x20, 0x70, 0x6F, 0x70, 0x20, 0x6C, 0x6F, 0x63, 0x61, 0x6C, 0x20, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6C, 0x65, 0x73, 0x20, 0x2D, 0x2D, 0x0A, 0x00
	string_118: db 0x09, 0x61, 0x64, 0x64, 0x20, 0x72, 0x73, 0x70, 0x2C, 0x20, 0x00
	string_119: db 0x20, 0x0A, 0x00
	string_120: db 0x09, 0x3B, 0x3B, 0x20, 0x2D, 0x2D, 0x20, 0x72, 0x65, 0x73, 0x74, 0x6F, 0x72, 0x65, 0x20, 0x73, 0x74, 0x61, 0x63, 0x6B, 0x66, 0x72, 0x61, 0x6D, 0x65, 0x20, 0x2D, 0x2D, 0x20, 0x0A, 0x00
	string_121: db 0x09, 0x70, 0x6F, 0x70, 0x20, 0x72, 0x62, 0x78, 0x0A, 0x00
	string_122: db 0x20, 0x6D, 0x6F, 0x76, 0x20, 0x5B, 0x62, 0x61, 0x73, 0x65, 0x73, 0x74, 0x61, 0x63, 0x6B, 0x20, 0x2B, 0x20, 0x38, 0x20, 0x2A, 0x20, 0x00
	string_123: db 0x5D, 0x2C, 0x20, 0x72, 0x62, 0x78, 0x0A, 0x00
	string_124: db 0x09, 0x3B, 0x3B, 0x20, 0x2D, 0x2D, 0x20, 0x70, 0x6F, 0x70, 0x20, 0x70, 0x61, 0x72, 0x61, 0x6D, 0x65, 0x74, 0x65, 0x72, 0x73, 0x20, 0x2D, 0x2D, 0x0A, 0x00
	string_125: db 0x09, 0x61, 0x64, 0x64, 0x20, 0x72, 0x73, 0x70, 0x2C, 0x20, 0x00
	string_126: db 0x20, 0x0A, 0x00
	string_127: db 0x09, 0x3B, 0x3B, 0x20, 0x2D, 0x2D, 0x20, 0x70, 0x75, 0x73, 0x68, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6E, 0x20, 0x76, 0x61, 0x6C, 0x75, 0x65, 0x20, 0x2D, 0x2D, 0x0A, 0x00
	string_128: db 0x09, 0x70, 0x75, 0x73, 0x68, 0x20, 0x72, 0x61, 0x78, 0x0A, 0x00
	string_129: db 0x09, 0x3B, 0x3B, 0x20, 0x2D, 0x2D, 0x20, 0x70, 0x6F, 0x70, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6E, 0x20, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x20, 0x2D, 0x2D, 0x0A, 0x00
	string_130: db 0x09, 0x6D, 0x6F, 0x76, 0x20, 0x72, 0x61, 0x78, 0x2C, 0x20, 0x5B, 0x63, 0x61, 0x6C, 0x6C, 0x72, 0x73, 0x70, 0x5D, 0x0A, 0x00
	string_131: db 0x09, 0x61, 0x64, 0x64, 0x20, 0x72, 0x61, 0x78, 0x2C, 0x20, 0x38, 0x0A, 0x00
	string_132: db 0x09, 0x6D, 0x6F, 0x76, 0x20, 0x5B, 0x63, 0x61, 0x6C, 0x6C, 0x72, 0x73, 0x70, 0x5D, 0x2C, 0x20, 0x72, 0x61, 0x78, 0x0A, 0x00
	string_133: db 0x09, 0x6D, 0x6F, 0x76, 0x20, 0x72, 0x61, 0x78, 0x2C, 0x20, 0x5B, 0x63, 0x61, 0x6C, 0x6C, 0x72, 0x73, 0x70, 0x5D, 0x0A, 0x00
	string_134: db 0x09, 0x6A, 0x6D, 0x70, 0x20, 0x5B, 0x72, 0x61, 0x78, 0x5D, 0x0A, 0x00
	string_135: db 0x09, 0x3B, 0x3B, 0x20, 0x2D, 0x2D, 0x20, 0x63, 0x6F, 0x6D, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6F, 0x6E, 0x20, 0x2D, 0x2D, 0x0A, 0x00
	string_136: db 0x09, 0x70, 0x6F, 0x70, 0x20, 0x72, 0x62, 0x78, 0x0A, 0x00
	string_137: db 0x09, 0x70, 0x6F, 0x70, 0x20, 0x72, 0x61, 0x78, 0x0A, 0x00
	string_138: db 0x09, 0x63, 0x6D, 0x70, 0x20, 0x72, 0x61, 0x78, 0x2C, 0x20, 0x72, 0x62, 0x78, 0x0A, 0x0A, 0x00
	string_139: db 0x09, 0x3B, 0x3B, 0x20, 0x2D, 0x2D, 0x20, 0x62, 0x69, 0x74, 0x20, 0x61, 0x6E, 0x64, 0x20, 0x2D, 0x2D, 0x0A, 0x00
	string_140: db 0x09, 0x70, 0x6F, 0x70, 0x20, 0x72, 0x62, 0x78, 0x0A, 0x00
	string_141: db 0x09, 0x70, 0x6F, 0x70, 0x20, 0x72, 0x61, 0x78, 0x0A, 0x00
	string_142: db 0x09, 0x61, 0x6E, 0x64, 0x20, 0x72, 0x61, 0x78, 0x2C, 0x20, 0x72, 0x62, 0x78, 0x0A, 0x00
	string_143: db 0x09, 0x70, 0x75, 0x73, 0x68, 0x20, 0x72, 0x61, 0x78, 0x0A, 0x00
	string_144: db 0x09, 0x3B, 0x3B, 0x20, 0x2D, 0x2D, 0x20, 0x62, 0x69, 0x74, 0x20, 0x6F, 0x72, 0x20, 0x2D, 0x2D, 0x0A, 0x00
	string_145: db 0x09, 0x70, 0x6F, 0x70, 0x20, 0x72, 0x62, 0x78, 0x0A, 0x00
	string_146: db 0x09, 0x70, 0x6F, 0x70, 0x20, 0x72, 0x61, 0x78, 0x0A, 0x00
	string_147: db 0x09, 0x6F, 0x72, 0x20, 0x72, 0x61, 0x78, 0x2C, 0x20, 0x72, 0x62, 0x78, 0x0A, 0x00
	string_148: db 0x09, 0x70, 0x75, 0x73, 0x68, 0x20, 0x72, 0x61, 0x78, 0x0A, 0x00
	string_149: db 0x09, 0x3B, 0x3B, 0x20, 0x2D, 0x2D, 0x20, 0x62, 0x69, 0x74, 0x20, 0x6E, 0x6F, 0x74, 0x20, 0x2D, 0x2D, 0x0A, 0x00
	string_150: db 0x09, 0x70, 0x6F, 0x70, 0x20, 0x72, 0x61, 0x78, 0x0A, 0x00
	string_151: db 0x09, 0x6E, 0x6F, 0x74, 0x20, 0x72, 0x61, 0x78, 0x0A, 0x00
	string_152: db 0x09, 0x70, 0x75, 0x73, 0x68, 0x20, 0x72, 0x61, 0x78, 0x0A, 0x0A, 0x00
	string_153: db 0x09, 0x3B, 0x3B, 0x20, 0x2D, 0x2D, 0x20, 0x73, 0x68, 0x69, 0x66, 0x74, 0x20, 0x6C, 0x65, 0x66, 0x74, 0x20, 0x2D, 0x2D, 0x0A, 0x00
	string_154: db 0x09, 0x70, 0x6F, 0x70, 0x20, 0x72, 0x63, 0x78, 0x0A, 0x00
	string_155: db 0x09, 0x70, 0x6F, 0x70, 0x20, 0x72, 0x61, 0x78, 0x0A, 0x00
	string_156: db 0x09, 0x73, 0x68, 0x6C, 0x20, 0x72, 0x61, 0x78, 0x2C, 0x20, 0x63, 0x6C, 0x0A, 0x00
	string_157: db 0x09, 0x70, 0x75, 0x73, 0x68, 0x20, 0x72, 0x61, 0x78, 0x0A, 0x00
	string_158: db 0x09, 0x3B, 0x3B, 0x20, 0x2D, 0x2D, 0x20, 0x73, 0x68, 0x69, 0x66, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x20, 0x2D, 0x2D, 0x0A, 0x00
	string_159: db 0x09, 0x70, 0x6F, 0x70, 0x20, 0x72, 0x63, 0x78, 0x0A, 0x00
	string_160: db 0x09, 0x70, 0x6F, 0x70, 0x20, 0x72, 0x61, 0x78, 0x0A, 0x00
	string_161: db 0x09, 0x73, 0x68, 0x72, 0x20, 0x72, 0x61, 0x78, 0x2C, 0x20, 0x63, 0x6C, 0x0A, 0x00
	string_162: db 0x09, 0x70, 0x75, 0x73, 0x68, 0x20, 0x72, 0x61, 0x78, 0x0A, 0x00
	string_163: db 0x09, 0x3B, 0x3B, 0x20, 0x2D, 0x2D, 0x20, 0x6C, 0x65, 0x73, 0x73, 0x20, 0x2D, 0x2D, 0x0A, 0x00
	string_164: db 0x09, 0x70, 0x6F, 0x70, 0x20, 0x72, 0x62, 0x78, 0x0A, 0x00
	string_165: db 0x09, 0x70, 0x6F, 0x70, 0x20, 0x72, 0x61, 0x78, 0x0A, 0x00
	string_166: db 0x09, 0x63, 0x6D, 0x70, 0x20, 0x72, 0x61, 0x78, 0x2C, 0x20, 0x72, 0x62, 0x78, 0x0A, 0x00
	string_167: db 0x09, 0x70, 0x75, 0x73, 0x68, 0x66, 0x0A, 0x00
	string_168: db 0x09, 0x70, 0x6F, 0x70, 0x20, 0x72, 0x61, 0x78, 0x0A, 0x00
	string_169: db 0x09, 0x73, 0x68, 0x72, 0x20, 0x72, 0x61, 0x78, 0x2C, 0x20, 0x37, 0x0A, 0x00
	string_170: db 0x09, 0x61, 0x6E, 0x64, 0x20, 0x72, 0x61, 0x78, 0x2C, 0x20, 0x31, 0x0A, 0x00
	string_171: db 0x09, 0x70, 0x75, 0x73, 0x68, 0x66, 0x0A, 0x00
	string_172: db 0x09, 0x70, 0x6F, 0x70, 0x20, 0x72, 0x62, 0x78, 0x0A, 0x00
	string_173: db 0x09, 0x73, 0x68, 0x72, 0x20, 0x72, 0x62, 0x78, 0x2C, 0x20, 0x31, 0x31, 0x0A, 0x00
	string_174: db 0x09, 0x61, 0x6E, 0x64, 0x20, 0x72, 0x62, 0x78, 0x2C, 0x20, 0x31, 0x0A, 0x00
	string_175: db 0x09, 0x78, 0x6F, 0x72, 0x20, 0x72, 0x61, 0x78, 0x2C, 0x20, 0x72, 0x62, 0x78, 0x0A, 0x00
	string_176: db 0x09, 0x70, 0x75, 0x73, 0x68, 0x20, 0x72, 0x61, 0x78, 0x0A, 0x0A, 0x00
	string_177: db 0x09, 0x3B, 0x3B, 0x20, 0x2D, 0x2D, 0x20, 0x6C, 0x65, 0x73, 0x73, 0x20, 0x2D, 0x2D, 0x0A, 0x00
	string_178: db 0x09, 0x70, 0x6F, 0x70, 0x20, 0x72, 0x62, 0x78, 0x0A, 0x00
	string_179: db 0x09, 0x70, 0x6F, 0x70, 0x20, 0x72, 0x61, 0x78, 0x0A, 0x00
	string_180: db 0x09, 0x63, 0x6D, 0x70, 0x20, 0x72, 0x61, 0x78, 0x2C, 0x20, 0x72, 0x62, 0x78, 0x0A, 0x00
	string_181: db 0x09, 0x70, 0x75, 0x73, 0x68, 0x66, 0x0A, 0x00
	string_182: db 0x09, 0x70, 0x75, 0x73, 0x68, 0x66, 0x0A, 0x00
	string_183: db 0x09, 0x70, 0x75, 0x73, 0x68, 0x66, 0x0A, 0x00
	string_184: db 0x09, 0x70, 0x6F, 0x70, 0x20, 0x72, 0x61, 0x78, 0x0A, 0x00
	string_185: db 0x09, 0x73, 0x68, 0x72, 0x20, 0x72, 0x61, 0x78, 0x2C, 0x20, 0x37, 0x0A, 0x00
	string_186: db 0x09, 0x61, 0x6E, 0x64, 0x20, 0x72, 0x61, 0x78, 0x2C, 0x20, 0x31, 0x0A, 0x00
	string_187: db 0x09, 0x70, 0x6F, 0x70, 0x20, 0x72, 0x62, 0x78, 0x0A, 0x00
	string_188: db 0x09, 0x73, 0x68, 0x72, 0x20, 0x72, 0x62, 0x78, 0x2C, 0x20, 0x31, 0x31, 0x0A, 0x00
	string_189: db 0x09, 0x61, 0x6E, 0x64, 0x20, 0x72, 0x62, 0x78, 0x2C, 0x20, 0x31, 0x0A, 0x00
	string_190: db 0x09, 0x70, 0x6F, 0x70, 0x20, 0x72, 0x63, 0x78, 0x0A, 0x00
	string_191: db 0x09, 0x73, 0x68, 0x72, 0x20, 0x72, 0x63, 0x78, 0x2C, 0x20, 0x36, 0x0A, 0x00
	string_192: db 0x09, 0x61, 0x6E, 0x64, 0x20, 0x72, 0x63, 0x78, 0x2C, 0x20, 0x31, 0x0A, 0x00
	string_193: db 0x09, 0x78, 0x6F, 0x72, 0x20, 0x72, 0x61, 0x78, 0x2C, 0x20, 0x72, 0x62, 0x78, 0x0A, 0x00
	string_194: db 0x09, 0x6F, 0x72, 0x20, 0x72, 0x61, 0x78, 0x2C, 0x20, 0x72, 0x63, 0x78, 0x0A, 0x00
	string_195: db 0x09, 0x70, 0x75, 0x73, 0x68, 0x20, 0x72, 0x61, 0x78, 0x0A, 0x0A, 0x00
	string_196: db 0x09, 0x3B, 0x3B, 0x20, 0x2D, 0x2D, 0x20, 0x67, 0x72, 0x65, 0x61, 0x74, 0x65, 0x72, 0x20, 0x2D, 0x2D, 0x0A, 0x00
	string_197: db 0x09, 0x70, 0x6F, 0x70, 0x20, 0x72, 0x62, 0x78, 0x0A, 0x00
	string_198: db 0x09, 0x70, 0x6F, 0x70, 0x20, 0x72, 0x61, 0x78, 0x0A, 0x00
	string_199: db 0x09, 0x63, 0x6D, 0x70, 0x20, 0x72, 0x61, 0x78, 0x2C, 0x20, 0x72, 0x62, 0x78, 0x0A, 0x00
	string_200: db 0x09, 0x70, 0x75, 0x73, 0x68, 0x66, 0x0A, 0x00
	string_201: db 0x09, 0x70, 0x6F, 0x70, 0x20, 0x72, 0x61, 0x78, 0x0A, 0x00
	string_202: db 0x09, 0x70, 0x75, 0x73, 0x68, 0x66, 0x0A, 0x00
	string_203: db 0x09, 0x70, 0x6F, 0x70, 0x20, 0x72, 0x62, 0x78, 0x0A, 0x00
	string_204: db 0x09, 0x70, 0x75, 0x73, 0x68, 0x66, 0x0A, 0x00
	string_205: db 0x09, 0x70, 0x6F, 0x70, 0x20, 0x72, 0x63, 0x78, 0x0A, 0x00
	string_206: db 0x09, 0x73, 0x68, 0x72, 0x20, 0x72, 0x61, 0x78, 0x2C, 0x20, 0x37, 0x0A, 0x00
	string_207: db 0x09, 0x61, 0x6E, 0x64, 0x20, 0x72, 0x61, 0x78, 0x2C, 0x20, 0x31, 0x0A, 0x00
	string_208: db 0x09, 0x73, 0x68, 0x72, 0x20, 0x72, 0x62, 0x78, 0x2C, 0x20, 0x31, 0x31, 0x0A, 0x00
	string_209: db 0x09, 0x61, 0x6E, 0x64, 0x20, 0x72, 0x62, 0x78, 0x2C, 0x20, 0x31, 0x0A, 0x00
	string_210: db 0x09, 0x73, 0x68, 0x72, 0x20, 0x72, 0x63, 0x78, 0x2C, 0x20, 0x36, 0x0A, 0x00
	string_211: db 0x09, 0x61, 0x6E, 0x64, 0x20, 0x72, 0x63, 0x78, 0x2C, 0x20, 0x31, 0x0A, 0x00
	string_212: db 0x09, 0x78, 0x6F, 0x72, 0x20, 0x72, 0x61, 0x78, 0x2C, 0x20, 0x72, 0x62, 0x78, 0x0A, 0x00
	string_213: db 0x09, 0x6F, 0x72, 0x20, 0x72, 0x61, 0x78, 0x2C, 0x20, 0x72, 0x63, 0x78, 0x0A, 0x00
	string_214: db 0x09, 0x6D, 0x6F, 0x76, 0x20, 0x72, 0x62, 0x78, 0x2C, 0x20, 0x31, 0x0A, 0x00
	string_215: db 0x09, 0x73, 0x75, 0x62, 0x20, 0x72, 0x62, 0x78, 0x2C, 0x20, 0x72, 0x61, 0x78, 0x0A, 0x00
	string_216: db 0x09, 0x70, 0x75, 0x73, 0x68, 0x20, 0x72, 0x62, 0x78, 0x0A, 0x00
	string_217: db 0x09, 0x3B, 0x3B, 0x20, 0x2D, 0x2D, 0x20, 0x67, 0x72, 0x65, 0x61, 0x74, 0x65, 0x72, 0x20, 0x2D, 0x2D, 0x0A, 0x00
	string_218: db 0x09, 0x70, 0x6F, 0x70, 0x20, 0x72, 0x62, 0x78, 0x0A, 0x00
	string_219: db 0x09, 0x70, 0x6F, 0x70, 0x20, 0x72, 0x61, 0x78, 0x0A, 0x00
	string_220: db 0x09, 0x63, 0x6D, 0x70, 0x20, 0x72, 0x61, 0x78, 0x2C, 0x20, 0x72, 0x62, 0x78, 0x0A, 0x00
	string_221: db 0x09, 0x70, 0x75, 0x73, 0x68, 0x66, 0x0A, 0x00
	string_222: db 0x09, 0x70, 0x6F, 0x70, 0x20, 0x72, 0x61, 0x78, 0x0A, 0x00
	string_223: db 0x09, 0x70, 0x75, 0x73, 0x68, 0x66, 0x0A, 0x00
	string_224: db 0x09, 0x70, 0x6F, 0x70, 0x20, 0x72, 0x62, 0x78, 0x0A, 0x00
	string_225: db 0x09, 0x70, 0x75, 0x73, 0x68, 0x66, 0x0A, 0x00
	string_226: db 0x09, 0x70, 0x6F, 0x70, 0x20, 0x72, 0x63, 0x78, 0x0A, 0x00
	string_227: db 0x09, 0x73, 0x68, 0x72, 0x20, 0x72, 0x61, 0x78, 0x2C, 0x20, 0x37, 0x0A, 0x00
	string_228: db 0x09, 0x61, 0x6E, 0x64, 0x20, 0x72, 0x61, 0x78, 0x2C, 0x20, 0x31, 0x0A, 0x00
	string_229: db 0x09, 0x73, 0x68, 0x72, 0x20, 0x72, 0x62, 0x78, 0x2C, 0x20, 0x31, 0x31, 0x0A, 0x00
	string_230: db 0x09, 0x61, 0x6E, 0x64, 0x20, 0x72, 0x62, 0x78, 0x2C, 0x20, 0x31, 0x0A, 0x00
	string_231: db 0x09, 0x78, 0x6F, 0x72, 0x20, 0x72, 0x61, 0x78, 0x2C, 0x20, 0x72, 0x62, 0x78, 0x0A, 0x00
	string_232: db 0x09, 0x6D, 0x6F, 0x76, 0x20, 0x72, 0x62, 0x78, 0x2C, 0x20, 0x31, 0x0A, 0x00
	string_233: db 0x09, 0x73, 0x75, 0x62, 0x20, 0x72, 0x62, 0x78, 0x2C, 0x20, 0x72, 0x61, 0x78, 0x0A, 0x00
	string_234: db 0x09, 0x70, 0x75, 0x73, 0x68, 0x20, 0x72, 0x62, 0x78, 0x0A, 0x00
	string_235: db 0x09, 0x3B, 0x3B, 0x20, 0x2D, 0x2D, 0x20, 0x65, 0x71, 0x75, 0x61, 0x6C, 0x20, 0x2D, 0x2D, 0x0A, 0x00
	string_236: db 0x09, 0x70, 0x6F, 0x70, 0x20, 0x72, 0x62, 0x78, 0x0A, 0x00
	string_237: db 0x09, 0x70, 0x6F, 0x70, 0x20, 0x72, 0x61, 0x78, 0x0A, 0x00
	string_238: db 0x09, 0x63, 0x6D, 0x70, 0x20, 0x72, 0x61, 0x78, 0x2C, 0x20, 0x72, 0x62, 0x78, 0x0A, 0x00
	string_239: db 0x09, 0x70, 0x75, 0x73, 0x68, 0x66, 0x0A, 0x00
	string_240: db 0x09, 0x70, 0x6F, 0x70, 0x20, 0x72, 0x61, 0x78, 0x0A, 0x00
	string_241: db 0x09, 0x73, 0x68, 0x72, 0x20, 0x72, 0x61, 0x78, 0x2C, 0x20, 0x36, 0x0A, 0x00
	string_242: db 0x09, 0x61, 0x6E, 0x64, 0x20, 0x72, 0x61, 0x78, 0x2C, 0x20, 0x31, 0x0A, 0x00
	string_243: db 0x09, 0x70, 0x75, 0x73, 0x68, 0x20, 0x72, 0x61, 0x78, 0x0A, 0x0A, 0x00
	string_244: db 0x09, 0x3B, 0x3B, 0x20, 0x2D, 0x2D, 0x20, 0x6E, 0x6F, 0x74, 0x20, 0x65, 0x71, 0x75, 0x61, 0x6C, 0x20, 0x2D, 0x2D, 0x0A, 0x00
	string_245: db 0x09, 0x70, 0x6F, 0x70, 0x20, 0x72, 0x62, 0x78, 0x0A, 0x00
	string_246: db 0x09, 0x70, 0x6F, 0x70, 0x20, 0x72, 0x61, 0x78, 0x0A, 0x00
	string_247: db 0x09, 0x63, 0x6D, 0x70, 0x20, 0x72, 0x61, 0x78, 0x2C, 0x20, 0x72, 0x62, 0x78, 0x0A, 0x00
	string_248: db 0x09, 0x70, 0x75, 0x73, 0x68, 0x66, 0x0A, 0x00
	string_249: db 0x09, 0x70, 0x6F, 0x70, 0x20, 0x72, 0x61, 0x78, 0x0A, 0x00
	string_250: db 0x09, 0x73, 0x68, 0x72, 0x20, 0x72, 0x61, 0x78, 0x2C, 0x20, 0x36, 0x0A, 0x00
	string_251: db 0x09, 0x61, 0x6E, 0x64, 0x20, 0x72, 0x61, 0x78, 0x2C, 0x20, 0x31, 0x0A, 0x00
	string_252: db 0x09, 0x6D, 0x6F, 0x76, 0x20, 0x72, 0x62, 0x78, 0x2C, 0x20, 0x31, 0x0A, 0x00
	string_253: db 0x09, 0x73, 0x75, 0x62, 0x20, 0x72, 0x62, 0x78, 0x2C, 0x20, 0x72, 0x61, 0x78, 0x0A, 0x00
	string_254: db 0x09, 0x70, 0x75, 0x73, 0x68, 0x20, 0x72, 0x62, 0x78, 0x0A, 0x0A, 0x00
	string_255: db 0x09, 0x3B, 0x3B, 0x20, 0x2D, 0x2D, 0x20, 0x63, 0x6F, 0x6E, 0x64, 0x69, 0x74, 0x69, 0x6F, 0x6E, 0x20, 0x2D, 0x2D, 0x0A, 0x00
	string_256: db 0x09, 0x70, 0x6F, 0x70, 0x20, 0x72, 0x61, 0x78, 0x0A, 0x00
	string_257: db 0x09, 0x63, 0x6D, 0x70, 0x20, 0x72, 0x61, 0x78, 0x2C, 0x20, 0x31, 0x0A, 0x0A, 0x00
	string_258: db 0x09, 0x3B, 0x3B, 0x20, 0x2D, 0x2D, 0x20, 0x6A, 0x75, 0x6D, 0x70, 0x20, 0x2D, 0x2D, 0x0A, 0x00
	string_259: db 0x09, 0x6A, 0x6D, 0x70, 0x20, 0x00
	string_260: db 0x0A, 0x0A, 0x00
	string_261: db 0x09, 0x3B, 0x3B, 0x20, 0x2D, 0x2D, 0x20, 0x6A, 0x75, 0x6D, 0x70, 0x20, 0x2D, 0x2D, 0x0A, 0x00
	string_262: db 0x09, 0x6A, 0x65, 0x20, 0x00
	string_263: db 0x0A, 0x0A, 0x00
	string_264: db 0x09, 0x3B, 0x3B, 0x20, 0x2D, 0x2D, 0x20, 0x6A, 0x75, 0x6D, 0x70, 0x20, 0x69, 0x66, 0x20, 0x6E, 0x6F, 0x74, 0x20, 0x65, 0x71, 0x75, 0x61, 0x6C, 0x20, 0x2D, 0x2D, 0x0A, 0x00
	string_265: db 0x09, 0x6A, 0x6E, 0x65, 0x20, 0x00
	string_266: db 0x0A, 0x0A, 0x00
	string_267: db 0x09, 0x3B, 0x3B, 0x20, 0x2D, 0x2D, 0x20, 0x6E, 0x75, 0x6D, 0x62, 0x65, 0x72, 0x20, 0x2D, 0x2D, 0x0A, 0x00
	string_268: db 0x09, 0x6D, 0x6F, 0x76, 0x20, 0x72, 0x61, 0x78, 0x2C, 0x20, 0x00
	string_269: db 0x20, 0x0A, 0x00
	string_270: db 0x09, 0x70, 0x75, 0x73, 0x68, 0x20, 0x72, 0x61, 0x78, 0x0A, 0x0A, 0x00
	string_271: db 0x09, 0x3B, 0x3B, 0x20, 0x2D, 0x2D, 0x20, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x20, 0x2D, 0x2D, 0x0A, 0x00
	string_272: db 0x09, 0x6D, 0x6F, 0x76, 0x20, 0x72, 0x61, 0x78, 0x2C, 0x20, 0x00
	string_273: db 0x20, 0x0A, 0x00
	string_274: db 0x09, 0x70, 0x75, 0x73, 0x68, 0x20, 0x72, 0x61, 0x78, 0x0A, 0x0A, 0x00
	string_275: db 0x09, 0x3B, 0x3B, 0x20, 0x2D, 0x2D, 0x20, 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x20, 0x2D, 0x2D, 0x0A, 0x00
	string_276: db 0x09, 0x6D, 0x6F, 0x76, 0x20, 0x72, 0x61, 0x78, 0x2C, 0x20, 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x5F, 0x00
	string_277: db 0x20, 0x0A, 0x00
	string_278: db 0x09, 0x70, 0x75, 0x73, 0x68, 0x20, 0x72, 0x61, 0x78, 0x0A, 0x0A, 0x00
	string_279: db 0x09, 0x3B, 0x3B, 0x20, 0x2D, 0x2D, 0x20, 0x72, 0x65, 0x61, 0x64, 0x20, 0x61, 0x74, 0x20, 0x69, 0x6E, 0x64, 0x65, 0x78, 0x20, 0x2D, 0x2D, 0x20, 0x0A, 0x00
	string_280: db 0x09, 0x70, 0x6F, 0x70, 0x20, 0x72, 0x61, 0x78, 0x20, 0x3B, 0x3B, 0x20, 0x69, 0x6E, 0x64, 0x65, 0x78, 0x0A, 0x00
	string_281: db 0x09, 0x6D, 0x6F, 0x76, 0x20, 0x72, 0x62, 0x78, 0x2C, 0x20, 0x00
	string_282: db 0x20, 0x0A, 0x00
	string_283: db 0x09, 0x6D, 0x75, 0x6C, 0x20, 0x72, 0x62, 0x78, 0x0A, 0x00
	string_284: db 0x09, 0x70, 0x6F, 0x70, 0x20, 0x72, 0x62, 0x78, 0x20, 0x3B, 0x3B, 0x20, 0x70, 0x6F, 0x69, 0x6E, 0x74, 0x65, 0x72, 0x0A, 0x00
	string_285: db 0x09, 0x61, 0x64, 0x64, 0x20, 0x72, 0x62, 0x78, 0x2C, 0x20, 0x72, 0x61, 0x78, 0x0A, 0x00
	string_286: db 0x09, 0x6D, 0x6F, 0x76, 0x20, 0x72, 0x62, 0x78, 0x2C, 0x20, 0x5B, 0x72, 0x62, 0x78, 0x5D, 0x0A, 0x00
	string_287: db 0x09, 0x3B, 0x3B, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x62, 0x69, 0x74, 0x20, 0x6D, 0x61, 0x73, 0x6B, 0x0A, 0x00
	string_288: db 0x09, 0x6D, 0x6F, 0x76, 0x20, 0x72, 0x63, 0x78, 0x2C, 0x20, 0x31, 0x0A, 0x00
	string_289: db 0x09, 0x73, 0x68, 0x6C, 0x20, 0x72, 0x63, 0x78, 0x2C, 0x20, 0x00
	string_290: db 0x20, 0x3B, 0x3B, 0x20, 0x73, 0x69, 0x7A, 0x65, 0x0A, 0x00
	string_291: db 0x09, 0x6D, 0x6F, 0x76, 0x20, 0x72, 0x63, 0x78, 0x2C, 0x20, 0x30, 0x0A, 0x00
	string_292: db 0x09, 0x73, 0x75, 0x62, 0x20, 0x72, 0x63, 0x78, 0x2C, 0x20, 0x31, 0x0A, 0x00
	string_293: db 0x09, 0x61, 0x6E, 0x64, 0x20, 0x72, 0x62, 0x78, 0x2C, 0x20, 0x72, 0x63, 0x78, 0x0A, 0x00
	string_294: db 0x09, 0x70, 0x75, 0x73, 0x68, 0x20, 0x72, 0x62, 0x78, 0x0A, 0x0A, 0x00
	string_295: db 0x09, 0x3B, 0x3B, 0x20, 0x2D, 0x2D, 0x20, 0x77, 0x72, 0x69, 0x74, 0x65, 0x20, 0x61, 0x74, 0x20, 0x69, 0x6E, 0x64, 0x65, 0x78, 0x20, 0x2D, 0x2D, 0x20, 0x0A, 0x00
	string_296: db 0x09, 0x70, 0x6F, 0x70, 0x20, 0x72, 0x63, 0x78, 0x20, 0x3B, 0x3B, 0x20, 0x76, 0x61, 0x6C, 0x75, 0x65, 0x0A, 0x00
	string_297: db 0x09, 0x70, 0x6F, 0x70, 0x20, 0x72, 0x61, 0x78, 0x20, 0x3B, 0x3B, 0x20, 0x69, 0x6E, 0x64, 0x65, 0x78, 0x0A, 0x00
	string_298: db 0x09, 0x6D, 0x6F, 0x76, 0x20, 0x72, 0x62, 0x78, 0x2C, 0x20, 0x00
	string_299: db 0x20, 0x0A, 0x00
	string_300: db 0x09, 0x6D, 0x75, 0x6C, 0x20, 0x72, 0x62, 0x78, 0x0A, 0x00
	string_301: db 0x09, 0x70, 0x6F, 0x70, 0x20, 0x72, 0x62, 0x78, 0x20, 0x3B, 0x3B, 0x20, 0x70, 0x6F, 0x69, 0x6E, 0x74, 0x65, 0x72, 0x0A, 0x00
	string_302: db 0x09, 0x61, 0x64, 0x64, 0x20, 0x72, 0x62, 0x78, 0x2C, 0x20, 0x72, 0x61, 0x78, 0x0A, 0x00
	string_303: db 0x09, 0x6D, 0x6F, 0x76, 0x20, 0x72, 0x38, 0x2C, 0x20, 0x5B, 0x72, 0x62, 0x78, 0x5D, 0x0A, 0x00
	string_304: db 0x09, 0x3B, 0x3B, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x62, 0x69, 0x74, 0x20, 0x6D, 0x61, 0x73, 0x6B, 0x0A, 0x00
	string_305: db 0x09, 0x6D, 0x6F, 0x76, 0x20, 0x72, 0x39, 0x2C, 0x20, 0x31, 0x0A, 0x00
	string_306: db 0x09, 0x73, 0x68, 0x6C, 0x20, 0x72, 0x39, 0x2C, 0x20, 0x00
	string_307: db 0x3B, 0x3B, 0x20, 0x73, 0x69, 0x7A, 0x65, 0x0A, 0x00
	string_308: db 0x09, 0x6D, 0x6F, 0x76, 0x20, 0x72, 0x39, 0x2C, 0x20, 0x30, 0x0A, 0x00
	string_309: db 0x09, 0x73, 0x75, 0x62, 0x20, 0x72, 0x39, 0x2C, 0x20, 0x31, 0x0A, 0x00
	string_310: db 0x09, 0x61, 0x6E, 0x64, 0x20, 0x72, 0x63, 0x78, 0x2C, 0x20, 0x72, 0x39, 0x0A, 0x00
	string_311: db 0x09, 0x6E, 0x6F, 0x74, 0x20, 0x72, 0x39, 0x0A, 0x00
	string_312: db 0x09, 0x61, 0x6E, 0x64, 0x20, 0x72, 0x38, 0x2C, 0x20, 0x72, 0x39, 0x0A, 0x00
	string_313: db 0x09, 0x61, 0x64, 0x64, 0x20, 0x72, 0x38, 0x2C, 0x20, 0x72, 0x63, 0x78, 0x0A, 0x00
	string_314: db 0x09, 0x6D, 0x6F, 0x76, 0x20, 0x5B, 0x72, 0x62, 0x78, 0x5D, 0x2C, 0x20, 0x72, 0x38, 0x0A, 0x00
	string_315: db 0x09, 0x70, 0x75, 0x73, 0x68, 0x20, 0x72, 0x63, 0x78, 0x0A, 0x0A, 0x00
	string_316: db 0x09, 0x3B, 0x3B, 0x20, 0x2D, 0x2D, 0x20, 0x72, 0x65, 0x61, 0x64, 0x20, 0x70, 0x72, 0x6F, 0x70, 0x65, 0x72, 0x74, 0x79, 0x20, 0x2D, 0x2D, 0x20, 0x0A, 0x00
	string_317: db 0x09, 0x70, 0x6F, 0x70, 0x20, 0x72, 0x61, 0x78, 0x20, 0x3B, 0x3B, 0x20, 0x70, 0x6F, 0x69, 0x6E, 0x74, 0x65, 0x72, 0x0A, 0x00
	string_318: db 0x09, 0x61, 0x64, 0x64, 0x20, 0x72, 0x61, 0x78, 0x2C, 0x20, 0x00
	string_319: db 0x20, 0x0A, 0x00
	string_320: db 0x09, 0x6D, 0x6F, 0x76, 0x20, 0x72, 0x61, 0x78, 0x2C, 0x20, 0x5B, 0x72, 0x61, 0x78, 0x5D, 0x0A, 0x00
	string_321: db 0x09, 0x3B, 0x3B, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x62, 0x69, 0x74, 0x20, 0x6D, 0x61, 0x73, 0x6B, 0x0A, 0x00
	string_322: db 0x09, 0x6D, 0x6F, 0x76, 0x20, 0x72, 0x62, 0x78, 0x2C, 0x20, 0x31, 0x0A, 0x00
	string_323: db 0x09, 0x73, 0x68, 0x6C, 0x20, 0x72, 0x62, 0x78, 0x2C, 0x20, 0x00
	string_324: db 0x20, 0x3B, 0x3B, 0x20, 0x73, 0x69, 0x7A, 0x65, 0x0A, 0x00
	string_325: db 0x09, 0x6D, 0x6F, 0x76, 0x20, 0x72, 0x62, 0x78, 0x2C, 0x20, 0x30, 0x0A, 0x00
	string_326: db 0x09, 0x73, 0x75, 0x62, 0x20, 0x72, 0x62, 0x78, 0x2C, 0x20, 0x31, 0x0A, 0x00
	string_327: db 0x09, 0x61, 0x6E, 0x64, 0x20, 0x72, 0x61, 0x78, 0x2C, 0x20, 0x72, 0x62, 0x78, 0x0A, 0x00
	string_328: db 0x09, 0x70, 0x75, 0x73, 0x68, 0x20, 0x72, 0x61, 0x78, 0x0A, 0x0A, 0x00
	string_329: db 0x09, 0x3B, 0x3B, 0x20, 0x2D, 0x2D, 0x20, 0x77, 0x72, 0x69, 0x74, 0x65, 0x20, 0x70, 0x72, 0x6F, 0x70, 0x65, 0x72, 0x74, 0x79, 0x20, 0x2D, 0x2D, 0x20, 0x0A, 0x00
	string_330: db 0x09, 0x70, 0x6F, 0x70, 0x20, 0x72, 0x61, 0x78, 0x20, 0x3B, 0x3B, 0x20, 0x76, 0x61, 0x6C, 0x75, 0x65, 0x0A, 0x00
	string_331: db 0x09, 0x70, 0x6F, 0x70, 0x20, 0x72, 0x62, 0x78, 0x20, 0x3B, 0x3B, 0x20, 0x70, 0x6F, 0x69, 0x6E, 0x74, 0x65, 0x72, 0x0A, 0x00
	string_332: db 0x09, 0x61, 0x64, 0x64, 0x20, 0x72, 0x62, 0x78, 0x2C, 0x20, 0x00
	string_333: db 0x20, 0x0A, 0x00
	string_334: db 0x09, 0x6D, 0x6F, 0x76, 0x20, 0x72, 0x63, 0x78, 0x2C, 0x20, 0x5B, 0x72, 0x62, 0x78, 0x5D, 0x0A, 0x00
	string_335: db 0x09, 0x3B, 0x3B, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x62, 0x69, 0x74, 0x20, 0x6D, 0x61, 0x73, 0x6B, 0x0A, 0x00
	string_336: db 0x09, 0x6D, 0x6F, 0x76, 0x20, 0x72, 0x39, 0x2C, 0x20, 0x31, 0x0A, 0x00
	string_337: db 0x09, 0x73, 0x68, 0x6C, 0x20, 0x72, 0x39, 0x2C, 0x20, 0x00
	string_338: db 0x20, 0x3B, 0x3B, 0x20, 0x73, 0x69, 0x7A, 0x65, 0x0A, 0x00
	string_339: db 0x09, 0x6D, 0x6F, 0x76, 0x20, 0x72, 0x39, 0x2C, 0x20, 0x30, 0x0A, 0x00
	string_340: db 0x09, 0x73, 0x75, 0x62, 0x20, 0x72, 0x39, 0x2C, 0x20, 0x31, 0x0A, 0x00
	string_341: db 0x09, 0x61, 0x6E, 0x64, 0x20, 0x72, 0x61, 0x78, 0x2C, 0x20, 0x72, 0x39, 0x0A, 0x00
	string_342: db 0x09, 0x6E, 0x6F, 0x74, 0x20, 0x72, 0x39, 0x0A, 0x00
	string_343: db 0x09, 0x61, 0x6E, 0x64, 0x20, 0x72, 0x63, 0x78, 0x2C, 0x20, 0x72, 0x39, 0x0A, 0x00
	string_344: db 0x09, 0x61, 0x64, 0x64, 0x20, 0x72, 0x63, 0x78, 0x2C, 0x20, 0x72, 0x61, 0x78, 0x0A, 0x00
	string_345: db 0x09, 0x6D, 0x6F, 0x76, 0x20, 0x5B, 0x72, 0x62, 0x78, 0x5D, 0x2C, 0x20, 0x72, 0x63, 0x78, 0x0A, 0x00
	string_346: db 0x09, 0x70, 0x75, 0x73, 0x68, 0x20, 0x72, 0x61, 0x78, 0x0A, 0x0A, 0x00
	string_347: db 0x09, 0x3B, 0x3B, 0x20, 0x2D, 0x2D, 0x20, 0x69, 0x64, 0x65, 0x6E, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x20, 0x2D, 0x2D, 0x0A, 0x00
	string_348: db 0x09, 0x6D, 0x6F, 0x76, 0x20, 0x72, 0x61, 0x78, 0x2C, 0x20, 0x5B, 0x62, 0x61, 0x73, 0x65, 0x73, 0x74, 0x61, 0x63, 0x6B, 0x20, 0x2B, 0x20, 0x38, 0x20, 0x2A, 0x20, 0x00
	string_349: db 0x5D, 0x0A, 0x00
	string_350: db 0x09, 0x6D, 0x6F, 0x76, 0x20, 0x72, 0x62, 0x78, 0x2C, 0x20, 0x00
	string_351: db 0x20, 0x0A, 0x00
	string_352: db 0x09, 0x73, 0x75, 0x62, 0x20, 0x72, 0x61, 0x78, 0x2C, 0x20, 0x72, 0x62, 0x78, 0x0A, 0x00
	string_353: db 0x09, 0x6D, 0x6F, 0x76, 0x20, 0x72, 0x61, 0x78, 0x2C, 0x20, 0x5B, 0x72, 0x61, 0x78, 0x5D, 0x0A, 0x00
	string_354: db 0x09, 0x70, 0x75, 0x73, 0x68, 0x20, 0x72, 0x61, 0x78, 0x0A, 0x0A, 0x00
	string_355: db 0x09, 0x3B, 0x3B, 0x20, 0x2D, 0x2D, 0x20, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6E, 0x6D, 0x65, 0x6E, 0x74, 0x20, 0x2D, 0x2D, 0x0A, 0x00
	string_356: db 0x09, 0x6D, 0x6F, 0x76, 0x20, 0x72, 0x61, 0x78, 0x2C, 0x20, 0x5B, 0x62, 0x61, 0x73, 0x65, 0x73, 0x74, 0x61, 0x63, 0x6B, 0x20, 0x2B, 0x20, 0x38, 0x20, 0x2A, 0x20, 0x00
	string_357: db 0x5D, 0x0A, 0x00
	string_358: db 0x09, 0x6D, 0x6F, 0x76, 0x20, 0x72, 0x62, 0x78, 0x2C, 0x20, 0x00
	string_359: db 0x20, 0x0A, 0x00
	string_360: db 0x09, 0x73, 0x75, 0x62, 0x20, 0x72, 0x61, 0x78, 0x2C, 0x20, 0x72, 0x62, 0x78, 0x0A, 0x00
	string_361: db 0x09, 0x6D, 0x6F, 0x76, 0x20, 0x72, 0x62, 0x78, 0x2C, 0x20, 0x5B, 0x72, 0x73, 0x70, 0x5D, 0x0A, 0x00
	string_362: db 0x09, 0x6D, 0x6F, 0x76, 0x20, 0x5B, 0x72, 0x61, 0x78, 0x5D, 0x2C, 0x20, 0x72, 0x62, 0x78, 0x0A, 0x0A, 0x00
	string_363: db 0x09, 0x3B, 0x3B, 0x20, 0x2D, 0x2D, 0x20, 0x61, 0x64, 0x64, 0x20, 0x2D, 0x2D, 0x0A, 0x00
	string_364: db 0x09, 0x70, 0x6F, 0x70, 0x20, 0x72, 0x62, 0x78, 0x0A, 0x00
	string_365: db 0x09, 0x70, 0x6F, 0x70, 0x20, 0x72, 0x61, 0x78, 0x0A, 0x00
	string_366: db 0x09, 0x61, 0x64, 0x64, 0x20, 0x72, 0x61, 0x78, 0x2C, 0x20, 0x72, 0x62, 0x78, 0x0A, 0x00
	string_367: db 0x09, 0x70, 0x75, 0x73, 0x68, 0x20, 0x72, 0x61, 0x78, 0x0A, 0x0A, 0x00
	string_368: db 0x09, 0x3B, 0x3B, 0x20, 0x2D, 0x2D, 0x20, 0x73, 0x75, 0x62, 0x74, 0x72, 0x61, 0x63, 0x74, 0x20, 0x2D, 0x2D, 0x0A, 0x00
	string_369: db 0x09, 0x70, 0x6F, 0x70, 0x20, 0x72, 0x62, 0x78, 0x0A, 0x00
	string_370: db 0x09, 0x70, 0x6F, 0x70, 0x20, 0x72, 0x61, 0x78, 0x0A, 0x00
	string_371: db 0x09, 0x73, 0x75, 0x62, 0x20, 0x72, 0x61, 0x78, 0x2C, 0x20, 0x72, 0x62, 0x78, 0x0A, 0x00
	string_372: db 0x09, 0x70, 0x75, 0x73, 0x68, 0x20, 0x72, 0x61, 0x78, 0x0A, 0x0A, 0x00
	string_373: db 0x09, 0x3B, 0x3B, 0x20, 0x2D, 0x2D, 0x20, 0x6E, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x20, 0x2D, 0x2D, 0x0A, 0x00
	string_374: db 0x09, 0x70, 0x6F, 0x70, 0x20, 0x72, 0x61, 0x78, 0x0A, 0x00
	string_375: db 0x09, 0x6E, 0x65, 0x67, 0x20, 0x72, 0x61, 0x78, 0x0A, 0x00
	string_376: db 0x09, 0x70, 0x75, 0x73, 0x68, 0x20, 0x72, 0x61, 0x78, 0x0A, 0x0A, 0x00
	string_377: db 0x09, 0x3B, 0x3B, 0x20, 0x2D, 0x2D, 0x20, 0x6D, 0x75, 0x6C, 0x74, 0x20, 0x2D, 0x2D, 0x0A, 0x00
	string_378: db 0x09, 0x70, 0x6F, 0x70, 0x20, 0x72, 0x62, 0x78, 0x0A, 0x00
	string_379: db 0x09, 0x70, 0x6F, 0x70, 0x20, 0x72, 0x61, 0x78, 0x0A, 0x00
	string_380: db 0x09, 0x6D, 0x75, 0x6C, 0x20, 0x72, 0x62, 0x78, 0x0A, 0x00
	string_381: db 0x09, 0x70, 0x75, 0x73, 0x68, 0x20, 0x72, 0x61, 0x78, 0x0A, 0x0A, 0x00
	string_382: db 0x09, 0x6D, 0x6F, 0x76, 0x20, 0x72, 0x61, 0x78, 0x2C, 0x20, 0x36, 0x30, 0x0A, 0x00
	string_383: db 0x09, 0x78, 0x6F, 0x72, 0x20, 0x72, 0x64, 0x69, 0x2C, 0x20, 0x72, 0x64, 0x69, 0x0A, 0x00
	string_384: db 0x09, 0x73, 0x79, 0x73, 0x63, 0x61, 0x6C, 0x6C, 0x0A, 0x0A, 0x00
	string_385: db 0x73, 0x65, 0x63, 0x74, 0x69, 0x6F, 0x6E, 0x20, 0x2E, 0x62, 0x73, 0x73, 0x0A, 0x00
	string_386: db 0x09, 0x62, 0x61, 0x73, 0x65, 0x73, 0x74, 0x61, 0x63, 0x6B, 0x3A, 0x20, 0x72, 0x65, 0x73, 0x71, 0x20, 0x00
	string_387: db 0x20, 0x0A, 0x00
	string_388: db 0x09, 0x63, 0x61, 0x6C, 0x6C, 0x72, 0x73, 0x70, 0x3A, 0x20, 0x72, 0x65, 0x73, 0x71, 0x20, 0x31, 0x0A, 0x00
	string_389: db 0x09, 0x63, 0x61, 0x6C, 0x6C, 0x53, 0x74, 0x61, 0x63, 0x6B, 0x3A, 0x20, 0x72, 0x65, 0x73, 0x71, 0x20, 0x00
	string_390: db 0x20, 0x0A, 0x00
	string_391: db 0x73, 0x65, 0x63, 0x74, 0x69, 0x6F, 0x6E, 0x20, 0x2E, 0x64, 0x61, 0x74, 0x61, 0x0A, 0x00
	string_392: db 0x09, 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x5F, 0x00
	string_393: db 0x3A, 0x20, 0x64, 0x62, 0x20, 0x00
	string_394: db 0x2C, 0x20, 0x00
	string_395: db 0x30, 0x78, 0x30, 0x30, 0x0A, 0x00
	string_396: db 0x2F, 0x64, 0x65, 0x76, 0x2F, 0x6E, 0x75, 0x6C, 0x6C, 0x00
	string_397: db 0x63, 0x6F, 0x75, 0x6C, 0x64, 0x20, 0x6E, 0x6F, 0x74, 0x20, 0x6F, 0x70, 0x65, 0x6E, 0x2F, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x66, 0x69, 0x6C, 0x65, 0x20, 0x27, 0x00
	string_398: db 0x27, 0x0A, 0x00
	string_399: db 0x65, 0x72, 0x72, 0x6F, 0x72, 0x20, 0x63, 0x6F, 0x64, 0x65, 0x3A, 0x20, 0x00
	string_400: db 0x20, 0x0A, 0x00
	string_401: db 0x61, 0x6E, 0x79, 0x00
	string_402: db 0x69, 0x6E, 0x74, 0x00
	string_403: db 0x70, 0x74, 0x72, 0x00
	string_404: db 0x63, 0x68, 0x61, 0x72, 0x00
	string_405: db 0x73, 0x74, 0x72, 0x00
	string_406: db 0x62, 0x6F, 0x6F, 0x6C, 0x00
	string_407: db 0x6E, 0x75, 0x6C, 0x6C, 0x00
	string_408: db 0x73, 0x79, 0x73, 0x63, 0x61, 0x6C, 0x6C, 0x00
	string_409: db 0x20, 0x20, 0x00
	string_410: db 0x61, 0x72, 0x67, 0x63, 0x00
	string_411: db 0x61, 0x72, 0x67, 0x76, 0x00
	string_412: db 0x20, 0x20, 0x00
	string_413: db 0x3A, 0x20, 0x00
	string_414: db 0x3A, 0x20, 0x00
	string_415: db 0x3A, 0x65, 0x72, 0x72, 0x6F, 0x72, 0x3A, 0x20, 0x61, 0x74, 0x20, 0x27, 0x00
	string_416: db 0x27, 0x2C, 0x20, 0x00
	string_417: db 0x20, 0x0A, 0x00
	string_418: db 0x63, 0x61, 0x6E, 0x20, 0x6E, 0x6F, 0x74, 0x20, 0x66, 0x69, 0x6E, 0x64, 0x20, 0x61, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x6E, 0x61, 0x6D, 0x65, 0x00
	string_419: db 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x27, 0x5D, 0x27, 0x20, 0x61, 0x66, 0x74, 0x65, 0x72, 0x20, 0x27, 0x5B, 0x27, 0x20, 0x74, 0x6F, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6E, 0x65, 0x20, 0x61, 0x6E, 0x20, 0x61, 0x72, 0x72, 0x61, 0x79, 0x00
	string_420: db 0x63, 0x61, 0x6E, 0x6E, 0x6F, 0x74, 0x20, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6E, 0x20, 0x61, 0x20, 0x76, 0x61, 0x6C, 0x75, 0x65, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x61, 0x20, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6E, 0x74, 0x20, 0x74, 0x79, 0x70, 0x65, 0x00
	string_421: db 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x27, 0x28, 0x27, 0x20, 0x61, 0x66, 0x74, 0x65, 0x72, 0x20, 0x66, 0x75, 0x6E, 0x63, 0x74, 0x69, 0x6F, 0x6E, 0x20, 0x6E, 0x61, 0x6D, 0x65, 0x00
	string_422: db 0x66, 0x75, 0x6E, 0x63, 0x74, 0x69, 0x6F, 0x6E, 0x20, 0x64, 0x6F, 0x65, 0x73, 0x20, 0x6E, 0x6F, 0x74, 0x20, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x20, 0x70, 0x61, 0x72, 0x61, 0x6D, 0x65, 0x74, 0x65, 0x72, 0x73, 0x00
	string_423: db 0x61, 0x6E, 0x79, 0x00
	string_424: db 0x70, 0x61, 0x72, 0x61, 0x6D, 0x65, 0x74, 0x65, 0x72, 0x20, 0x69, 0x73, 0x20, 0x6E, 0x6F, 0x74, 0x20, 0x6F, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x20, 0x74, 0x79, 0x70, 0x65, 0x00
	string_425: db 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x27, 0x2C, 0x27, 0x20, 0x62, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6E, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6D, 0x65, 0x6E, 0x74, 0x73, 0x00
	string_426: db 0x61, 0x6E, 0x79, 0x00
	string_427: db 0x70, 0x61, 0x72, 0x61, 0x6D, 0x65, 0x74, 0x65, 0x72, 0x20, 0x69, 0x73, 0x20, 0x6E, 0x6F, 0x74, 0x20, 0x6F, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x20, 0x74, 0x79, 0x70, 0x65, 0x00
	string_428: db 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x27, 0x29, 0x27, 0x20, 0x61, 0x66, 0x74, 0x65, 0x72, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6D, 0x65, 0x6E, 0x74, 0x73, 0x00
	string_429: db 0x69, 0x6E, 0x74, 0x00
	string_430: db 0x63, 0x68, 0x61, 0x72, 0x00
	string_431: db 0x73, 0x74, 0x72, 0x00
	string_432: db 0x4C, 0x75, 0x6D, 0x69, 0x6E, 0x61, 0x20, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6E, 0x74, 0x6C, 0x79, 0x20, 0x64, 0x6F, 0x65, 0x73, 0x20, 0x6E, 0x6F, 0x74, 0x20, 0x73, 0x75, 0x70, 0x70, 0x6F, 0x72, 0x74, 0x20, 0x63, 0x6F, 0x6E, 0x73, 0x74, 0x61, 0x6E, 0x74, 0x73, 0x20, 0x6F, 0x66, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x74, 0x79, 0x70, 0x65, 0x00
	string_433: db 0x5B, 0x4E, 0x4F, 0x54, 0x45, 0x5D, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x77, 0x68, 0x61, 0x73, 0x3A, 0x20, 0x27, 0x00
	string_434: db 0x27, 0x2C, 0x20, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x27, 0x69, 0x6E, 0x74, 0x27, 0x2C, 0x20, 0x27, 0x63, 0x68, 0x61, 0x72, 0x27, 0x2C, 0x20, 0x6F, 0x72, 0x20, 0x27, 0x73, 0x74, 0x72, 0x27, 0x0A, 0x00
	string_435: db 0x63, 0x61, 0x6E, 0x20, 0x6E, 0x6F, 0x74, 0x20, 0x66, 0x69, 0x6E, 0x64, 0x20, 0x61, 0x20, 0x76, 0x61, 0x6C, 0x75, 0x65, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x6E, 0x61, 0x6D, 0x65, 0x00
	string_436: db 0x69, 0x6E, 0x74, 0x00
	string_437: db 0x63, 0x68, 0x61, 0x72, 0x00
	string_438: db 0x73, 0x74, 0x72, 0x00
	string_439: db 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x27, 0x28, 0x27, 0x20, 0x61, 0x66, 0x74, 0x65, 0x72, 0x20, 0x27, 0x73, 0x69, 0x7A, 0x65, 0x6F, 0x66, 0x27, 0x00
	string_440: db 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x69, 0x6E, 0x20, 0x27, 0x73, 0x69, 0x7A, 0x65, 0x6F, 0x66, 0x27, 0x00
	string_441: db 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x27, 0x29, 0x27, 0x20, 0x61, 0x66, 0x74, 0x65, 0x72, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x69, 0x6E, 0x20, 0x73, 0x69, 0x7A, 0x65, 0x6F, 0x66, 0x00
	string_442: db 0x69, 0x6E, 0x74, 0x00
	string_443: db 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x69, 0x6E, 0x20, 0x74, 0x79, 0x70, 0x65, 0x63, 0x61, 0x73, 0x74, 0x00
	string_444: db 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x27, 0x29, 0x27, 0x20, 0x61, 0x66, 0x74, 0x65, 0x72, 0x20, 0x63, 0x61, 0x73, 0x74, 0x69, 0x6E, 0x67, 0x20, 0x74, 0x79, 0x70, 0x65, 0x00
	string_445: db 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x27, 0x29, 0x27, 0x20, 0x61, 0x66, 0x74, 0x65, 0x72, 0x20, 0x67, 0x72, 0x6F, 0x75, 0x70, 0x00
	string_446: db 0x74, 0x68, 0x69, 0x73, 0x20, 0x74, 0x6F, 0x6B, 0x65, 0x6E, 0x20, 0x69, 0x73, 0x20, 0x6E, 0x6F, 0x74, 0x20, 0x72, 0x65, 0x63, 0x6F, 0x67, 0x6E, 0x69, 0x73, 0x65, 0x64, 0x20, 0x61, 0x73, 0x20, 0x61, 0x20, 0x75, 0x6E, 0x61, 0x72, 0x79, 0x00
	string_447: db 0x63, 0x61, 0x6E, 0x20, 0x6E, 0x6F, 0x74, 0x20, 0x69, 0x6E, 0x64, 0x65, 0x78, 0x20, 0x66, 0x72, 0x6F, 0x6D, 0x20, 0x61, 0x20, 0x76, 0x61, 0x6C, 0x75, 0x65, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x69, 0x73, 0x20, 0x6E, 0x6F, 0x74, 0x20, 0x61, 0x6E, 0x20, 0x61, 0x72, 0x72, 0x61, 0x79, 0x00
	string_448: db 0x69, 0x6E, 0x74, 0x00
	string_449: db 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x61, 0x72, 0x72, 0x61, 0x79, 0x20, 0x69, 0x6E, 0x64, 0x65, 0x78, 0x20, 0x74, 0x6F, 0x20, 0x62, 0x65, 0x20, 0x6F, 0x66, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x27, 0x69, 0x6E, 0x74, 0x27, 0x00
	string_450: db 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x27, 0x5D, 0x27, 0x20, 0x61, 0x66, 0x74, 0x65, 0x72, 0x20, 0x61, 0x72, 0x72, 0x61, 0x79, 0x20, 0x69, 0x6E, 0x64, 0x65, 0x78, 0x00
	string_451: db 0x63, 0x61, 0x6E, 0x20, 0x6E, 0x6F, 0x74, 0x20, 0x73, 0x65, 0x74, 0x20, 0x61, 0x20, 0x76, 0x61, 0x6C, 0x75, 0x65, 0x20, 0x6F, 0x66, 0x20, 0x61, 0x6E, 0x20, 0x61, 0x72, 0x72, 0x61, 0x79, 0x20, 0x74, 0x6F, 0x20, 0x61, 0x20, 0x76, 0x61, 0x6C, 0x75, 0x65, 0x20, 0x6F, 0x66, 0x20, 0x61, 0x20, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6E, 0x74, 0x20, 0x74, 0x79, 0x70, 0x65, 0x00
	string_452: db 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x6E, 0x61, 0x6D, 0x65, 0x20, 0x6F, 0x66, 0x20, 0x70, 0x72, 0x6F, 0x70, 0x65, 0x72, 0x74, 0x79, 0x00
	string_453: db 0x70, 0x72, 0x6F, 0x62, 0x6C, 0x65, 0x6D, 0x20, 0x69, 0x6E, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x77, 0x68, 0x65, 0x6E, 0x20, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6E, 0x67, 0x20, 0x70, 0x72, 0x6F, 0x70, 0x65, 0x72, 0x74, 0x79, 0x00
	string_454: db 0x63, 0x61, 0x6E, 0x20, 0x6E, 0x6F, 0x74, 0x20, 0x66, 0x69, 0x6E, 0x64, 0x20, 0x70, 0x72, 0x6F, 0x70, 0x65, 0x72, 0x74, 0x79, 0x00
	string_455: db 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6E, 0x74, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x77, 0x68, 0x65, 0x6E, 0x20, 0x77, 0x72, 0x69, 0x74, 0x69, 0x6E, 0x67, 0x20, 0x70, 0x72, 0x6F, 0x70, 0x65, 0x72, 0x74, 0x79, 0x00
	string_456: db 0x6C, 0x69, 0x73, 0x74, 0x73, 0x20, 0x61, 0x6E, 0x64, 0x20, 0x70, 0x72, 0x6F, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x20, 0x61, 0x72, 0x65, 0x20, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6E, 0x74, 0x6C, 0x79, 0x20, 0x6E, 0x6F, 0x74, 0x20, 0x73, 0x75, 0x70, 0x70, 0x6F, 0x72, 0x74, 0x65, 0x64, 0x20, 0x69, 0x6E, 0x20, 0x63, 0x6F, 0x6E, 0x73, 0x74, 0x61, 0x6E, 0x74, 0x20, 0x65, 0x76, 0x61, 0x6C, 0x75, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x00
	string_457: db 0x69, 0x6E, 0x74, 0x00
	string_458: db 0x63, 0x61, 0x6E, 0x20, 0x6E, 0x6F, 0x74, 0x20, 0x75, 0x73, 0x65, 0x20, 0x27, 0x26, 0x27, 0x20, 0x6F, 0x72, 0x20, 0x27, 0x7C, 0x27, 0x20, 0x6F, 0x6E, 0x20, 0x76, 0x61, 0x6C, 0x75, 0x65, 0x73, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x61, 0x72, 0x65, 0x20, 0x6E, 0x6F, 0x74, 0x20, 0x6F, 0x66, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x27, 0x69, 0x6E, 0x74, 0x27, 0x00
	string_459: db 0x69, 0x6E, 0x74, 0x00
	string_460: db 0x63, 0x68, 0x61, 0x72, 0x00
	string_461: db 0x72, 0x69, 0x67, 0x68, 0x74, 0x20, 0x68, 0x61, 0x6E, 0x64, 0x20, 0x73, 0x69, 0x64, 0x65, 0x20, 0x6F, 0x66, 0x20, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6F, 0x6E, 0x20, 0x69, 0x73, 0x20, 0x6E, 0x6F, 0x74, 0x20, 0x6F, 0x66, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x27, 0x69, 0x6E, 0x74, 0x27, 0x20, 0x6F, 0x72, 0x20, 0x27, 0x63, 0x68, 0x61, 0x72, 0x27, 0x00
	string_462: db 0x63, 0x61, 0x6E, 0x20, 0x6E, 0x6F, 0x74, 0x20, 0x61, 0x64, 0x64, 0x20, 0x74, 0x77, 0x6F, 0x20, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x73, 0x00
	string_463: db 0x72, 0x69, 0x67, 0x68, 0x74, 0x20, 0x68, 0x61, 0x6E, 0x64, 0x20, 0x73, 0x69, 0x64, 0x65, 0x20, 0x6F, 0x66, 0x20, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6F, 0x6E, 0x20, 0x69, 0x73, 0x20, 0x6E, 0x6F, 0x74, 0x20, 0x6F, 0x66, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x27, 0x69, 0x6E, 0x74, 0x27, 0x20, 0x6F, 0x72, 0x20, 0x27, 0x63, 0x68, 0x61, 0x72, 0x27, 0x00
	string_464: db 0x6C, 0x65, 0x66, 0x74, 0x20, 0x68, 0x61, 0x6E, 0x64, 0x20, 0x73, 0x69, 0x64, 0x65, 0x20, 0x6F, 0x66, 0x20, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6F, 0x6E, 0x20, 0x69, 0x73, 0x20, 0x6E, 0x6F, 0x74, 0x20, 0x6F, 0x66, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x27, 0x69, 0x6E, 0x74, 0x27, 0x20, 0x6F, 0x72, 0x20, 0x27, 0x63, 0x68, 0x61, 0x72, 0x27, 0x00
	string_465: db 0x63, 0x61, 0x6E, 0x20, 0x6E, 0x6F, 0x74, 0x20, 0x73, 0x75, 0x62, 0x74, 0x72, 0x61, 0x63, 0x74, 0x20, 0x61, 0x20, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x20, 0x66, 0x72, 0x6F, 0x6D, 0x20, 0x61, 0x6E, 0x20, 0x69, 0x6E, 0x74, 0x65, 0x67, 0x65, 0x72, 0x00
	string_466: db 0x72, 0x69, 0x67, 0x68, 0x74, 0x20, 0x68, 0x61, 0x6E, 0x64, 0x20, 0x73, 0x69, 0x64, 0x65, 0x20, 0x6F, 0x66, 0x20, 0x73, 0x75, 0x62, 0x74, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6F, 0x6E, 0x20, 0x69, 0x73, 0x20, 0x6E, 0x6F, 0x74, 0x20, 0x6F, 0x66, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x27, 0x69, 0x6E, 0x74, 0x27, 0x20, 0x6F, 0x72, 0x20, 0x27, 0x63, 0x68, 0x61, 0x72, 0x27, 0x00
	string_467: db 0x72, 0x69, 0x67, 0x68, 0x74, 0x20, 0x68, 0x61, 0x6E, 0x64, 0x20, 0x73, 0x69, 0x64, 0x65, 0x20, 0x6F, 0x66, 0x20, 0x73, 0x75, 0x62, 0x74, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6F, 0x6E, 0x20, 0x69, 0x73, 0x20, 0x6E, 0x6F, 0x74, 0x20, 0x6F, 0x66, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x27, 0x69, 0x6E, 0x74, 0x27, 0x20, 0x6F, 0x72, 0x20, 0x27, 0x63, 0x68, 0x61, 0x72, 0x27, 0x00
	string_468: db 0x6C, 0x65, 0x66, 0x74, 0x20, 0x68, 0x61, 0x6E, 0x64, 0x20, 0x73, 0x69, 0x64, 0x65, 0x20, 0x6F, 0x66, 0x20, 0x73, 0x75, 0x62, 0x74, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6F, 0x6E, 0x20, 0x69, 0x73, 0x20, 0x6E, 0x6F, 0x74, 0x20, 0x6F, 0x66, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x27, 0x69, 0x6E, 0x74, 0x27, 0x20, 0x6F, 0x72, 0x20, 0x27, 0x63, 0x68, 0x61, 0x72, 0x27, 0x00
	string_469: db 0x69, 0x6E, 0x74, 0x00
	string_470: db 0x6C, 0x65, 0x66, 0x74, 0x20, 0x68, 0x61, 0x6E, 0x64, 0x20, 0x73, 0x69, 0x64, 0x65, 0x20, 0x6F, 0x66, 0x20, 0x61, 0x20, 0x62, 0x69, 0x74, 0x73, 0x68, 0x69, 0x66, 0x74, 0x20, 0x6F, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x20, 0x69, 0x73, 0x20, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x74, 0x6F, 0x20, 0x62, 0x65, 0x20, 0x6F, 0x66, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x60, 0x69, 0x6E, 0x74, 0x60, 0x00
	string_471: db 0x6C, 0x65, 0x66, 0x74, 0x20, 0x68, 0x61, 0x6E, 0x64, 0x20, 0x73, 0x69, 0x64, 0x65, 0x20, 0x6F, 0x66, 0x20, 0x61, 0x20, 0x62, 0x69, 0x74, 0x73, 0x68, 0x69, 0x66, 0x74, 0x20, 0x6F, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x20, 0x69, 0x73, 0x20, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x74, 0x6F, 0x20, 0x62, 0x65, 0x20, 0x6F, 0x66, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x60, 0x69, 0x6E, 0x74, 0x60, 0x00
	string_472: db 0x63, 0x61, 0x6E, 0x6E, 0x6F, 0x74, 0x20, 0x6D, 0x61, 0x6B, 0x65, 0x20, 0x61, 0x20, 0x63, 0x6F, 0x6D, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6F, 0x6E, 0x20, 0x62, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6E, 0x20, 0x76, 0x61, 0x6C, 0x75, 0x65, 0x73, 0x20, 0x6F, 0x66, 0x20, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6E, 0x74, 0x20, 0x74, 0x79, 0x70, 0x65, 0x73, 0x00
	string_473: db 0x62, 0x6F, 0x6F, 0x6C, 0x00
	string_474: db 0x62, 0x6F, 0x6F, 0x6C, 0x00
	string_475: db 0x6C, 0x65, 0x66, 0x74, 0x20, 0x68, 0x61, 0x6E, 0x64, 0x20, 0x73, 0x69, 0x64, 0x65, 0x20, 0x6F, 0x66, 0x20, 0x27, 0x26, 0x26, 0x27, 0x20, 0x6F, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x20, 0x69, 0x73, 0x20, 0x6E, 0x6F, 0x74, 0x20, 0x6F, 0x66, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x27, 0x62, 0x6F, 0x6F, 0x6C, 0x27, 0x00
	string_476: db 0x61, 0x64, 0x64, 0x72, 0x5F, 0x61, 0x6E, 0x64, 0x5F, 0x00
	string_477: db 0x62, 0x6F, 0x6F, 0x6C, 0x00
	string_478: db 0x72, 0x69, 0x67, 0x68, 0x74, 0x20, 0x68, 0x61, 0x6E, 0x64, 0x20, 0x73, 0x69, 0x64, 0x65, 0x20, 0x6F, 0x66, 0x20, 0x27, 0x26, 0x26, 0x27, 0x20, 0x6F, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x20, 0x69, 0x73, 0x20, 0x6E, 0x6F, 0x74, 0x20, 0x6F, 0x66, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x27, 0x62, 0x6F, 0x6F, 0x6C, 0x27, 0x00
	string_479: db 0x61, 0x64, 0x64, 0x72, 0x5F, 0x65, 0x6E, 0x64, 0x5F, 0x61, 0x6E, 0x64, 0x5F, 0x00
	string_480: db 0x61, 0x64, 0x64, 0x72, 0x5F, 0x61, 0x6E, 0x64, 0x5F, 0x00
	string_481: db 0x30, 0x20, 0x00
	string_482: db 0x61, 0x64, 0x64, 0x72, 0x5F, 0x65, 0x6E, 0x64, 0x5F, 0x61, 0x6E, 0x64, 0x5F, 0x00
	string_483: db 0x62, 0x6F, 0x6F, 0x6C, 0x00
	string_484: db 0x6C, 0x65, 0x66, 0x74, 0x20, 0x68, 0x61, 0x6E, 0x64, 0x20, 0x73, 0x69, 0x64, 0x65, 0x20, 0x6F, 0x66, 0x20, 0x27, 0x7C, 0x7C, 0x27, 0x20, 0x6F, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x20, 0x69, 0x73, 0x20, 0x6E, 0x6F, 0x74, 0x20, 0x6F, 0x66, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x27, 0x62, 0x6F, 0x6F, 0x6C, 0x27, 0x00
	string_485: db 0x61, 0x64, 0x64, 0x72, 0x5F, 0x6F, 0x72, 0x5F, 0x00
	string_486: db 0x62, 0x6F, 0x6F, 0x6C, 0x00
	string_487: db 0x72, 0x69, 0x67, 0x68, 0x74, 0x20, 0x68, 0x61, 0x6E, 0x64, 0x20, 0x73, 0x69, 0x64, 0x65, 0x20, 0x6F, 0x66, 0x20, 0x27, 0x7C, 0x7C, 0x27, 0x20, 0x6F, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x20, 0x69, 0x73, 0x20, 0x6E, 0x6F, 0x74, 0x20, 0x6F, 0x66, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x27, 0x62, 0x6F, 0x6F, 0x6C, 0x27, 0x00
	string_488: db 0x61, 0x64, 0x64, 0x72, 0x5F, 0x65, 0x6E, 0x64, 0x5F, 0x6F, 0x72, 0x5F, 0x00
	string_489: db 0x61, 0x64, 0x64, 0x72, 0x5F, 0x6F, 0x72, 0x5F, 0x00
	string_490: db 0x31, 0x20, 0x00
	string_491: db 0x61, 0x64, 0x64, 0x72, 0x5F, 0x65, 0x6E, 0x64, 0x5F, 0x6F, 0x72, 0x5F, 0x00
	string_492: db 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x6E, 0x61, 0x6D, 0x65, 0x20, 0x6F, 0x66, 0x20, 0x69, 0x6D, 0x70, 0x6F, 0x72, 0x74, 0x20, 0x66, 0x69, 0x6C, 0x65, 0x00
	string_493: db 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x6E, 0x61, 0x6D, 0x65, 0x20, 0x6F, 0x66, 0x20, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6C, 0x65, 0x00
	string_494: db 0x61, 0x20, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6C, 0x65, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x6E, 0x61, 0x6D, 0x65, 0x20, 0x61, 0x6C, 0x72, 0x65, 0x61, 0x64, 0x79, 0x20, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x20, 0x69, 0x6E, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x73, 0x63, 0x6F, 0x70, 0x65, 0x00
	string_495: db 0x61, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x6E, 0x61, 0x6D, 0x65, 0x20, 0x61, 0x6C, 0x72, 0x65, 0x61, 0x64, 0x79, 0x20, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x00
	string_496: db 0x61, 0x20, 0x66, 0x75, 0x6E, 0x63, 0x74, 0x69, 0x6F, 0x6E, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x6E, 0x61, 0x6D, 0x65, 0x20, 0x61, 0x6C, 0x72, 0x65, 0x61, 0x64, 0x79, 0x20, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x00
	string_497: db 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x27, 0x3D, 0x27, 0x20, 0x69, 0x6E, 0x20, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6C, 0x65, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6E, 0x69, 0x74, 0x69, 0x6F, 0x6E, 0x00
	string_498: db 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x27, 0x3B, 0x27, 0x20, 0x61, 0x66, 0x74, 0x65, 0x72, 0x20, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6C, 0x65, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6E, 0x69, 0x74, 0x69, 0x6F, 0x6E, 0x00
	string_499: db 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x6E, 0x61, 0x6D, 0x65, 0x20, 0x6F, 0x66, 0x20, 0x63, 0x6F, 0x6E, 0x73, 0x74, 0x61, 0x6E, 0x74, 0x00
	string_500: db 0x61, 0x20, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6C, 0x65, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x6E, 0x61, 0x6D, 0x65, 0x20, 0x61, 0x6C, 0x72, 0x65, 0x61, 0x64, 0x79, 0x20, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x00
	string_501: db 0x61, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x6E, 0x61, 0x6D, 0x65, 0x20, 0x61, 0x6C, 0x72, 0x65, 0x61, 0x64, 0x79, 0x20, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x00
	string_502: db 0x61, 0x20, 0x66, 0x75, 0x6E, 0x63, 0x74, 0x69, 0x6F, 0x6E, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x6E, 0x61, 0x6D, 0x65, 0x20, 0x61, 0x6C, 0x72, 0x65, 0x61, 0x64, 0x79, 0x20, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x00
	string_503: db 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x27, 0x3D, 0x27, 0x20, 0x69, 0x6E, 0x20, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6C, 0x65, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6E, 0x69, 0x74, 0x69, 0x6F, 0x6E, 0x00
	string_504: db 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x27, 0x3B, 0x27, 0x20, 0x61, 0x66, 0x74, 0x65, 0x72, 0x20, 0x63, 0x6F, 0x6E, 0x73, 0x74, 0x61, 0x6E, 0x74, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6E, 0x69, 0x74, 0x69, 0x6F, 0x6E, 0x00
	string_505: db 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x6E, 0x61, 0x6D, 0x65, 0x20, 0x6F, 0x66, 0x20, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6C, 0x65, 0x00
	string_506: db 0x61, 0x20, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6C, 0x65, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x6E, 0x61, 0x6D, 0x65, 0x20, 0x61, 0x6C, 0x72, 0x65, 0x61, 0x64, 0x79, 0x20, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x00
	string_507: db 0x61, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x6E, 0x61, 0x6D, 0x65, 0x20, 0x61, 0x6C, 0x72, 0x65, 0x61, 0x64, 0x79, 0x20, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x20, 0x69, 0x6E, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x73, 0x63, 0x6F, 0x70, 0x65, 0x00
	string_508: db 0x61, 0x20, 0x66, 0x75, 0x6E, 0x63, 0x74, 0x69, 0x6F, 0x6E, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x6E, 0x61, 0x6D, 0x65, 0x20, 0x61, 0x6C, 0x72, 0x65, 0x61, 0x64, 0x79, 0x20, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x00
	string_509: db 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x27, 0x7B, 0x27, 0x20, 0x69, 0x6E, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6E, 0x69, 0x74, 0x69, 0x6F, 0x6E, 0x00
	string_510: db 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x70, 0x72, 0x6F, 0x70, 0x65, 0x72, 0x74, 0x79, 0x20, 0x74, 0x6F, 0x20, 0x73, 0x74, 0x61, 0x72, 0x74, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x79, 0x70, 0x65, 0x00
	string_511: db 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x6E, 0x61, 0x6D, 0x65, 0x20, 0x6F, 0x66, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x70, 0x72, 0x6F, 0x70, 0x65, 0x72, 0x74, 0x79, 0x00
	string_512: db 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x70, 0x72, 0x6F, 0x70, 0x65, 0x72, 0x74, 0x79, 0x20, 0x74, 0x6F, 0x20, 0x65, 0x6E, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x27, 0x3B, 0x27, 0x00
	string_513: db 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x27, 0x7D, 0x27, 0x20, 0x61, 0x66, 0x74, 0x65, 0x72, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6E, 0x69, 0x74, 0x69, 0x6F, 0x6E, 0x00
	string_514: db 0x6E, 0x75, 0x6C, 0x6C, 0x00
	string_515: db 0x6E, 0x6F, 0x74, 0x20, 0x61, 0x6C, 0x6C, 0x20, 0x63, 0x6F, 0x64, 0x65, 0x20, 0x70, 0x61, 0x74, 0x68, 0x73, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6E, 0x20, 0x61, 0x20, 0x76, 0x61, 0x6C, 0x75, 0x65, 0x00
	string_516: db 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x27, 0x7D, 0x27, 0x20, 0x61, 0x66, 0x74, 0x65, 0x72, 0x20, 0x62, 0x6C, 0x6F, 0x63, 0x6B, 0x00
	string_517: db 0x5B, 0x4E, 0x4F, 0x54, 0x45, 0x5D, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x77, 0x61, 0x73, 0x20, 0x69, 0x6E, 0x20, 0x66, 0x75, 0x6E, 0x63, 0x74, 0x69, 0x6F, 0x6E, 0x3A, 0x20, 0x27, 0x00
	string_518: db 0x27, 0x0A, 0x00
	string_519: db 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x66, 0x75, 0x6E, 0x63, 0x74, 0x69, 0x6F, 0x6E, 0x20, 0x6E, 0x61, 0x6D, 0x65, 0x20, 0x69, 0x6E, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6E, 0x69, 0x74, 0x69, 0x6F, 0x6E, 0x00
	string_520: db 0x63, 0x61, 0x6E, 0x20, 0x6E, 0x6F, 0x74, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6E, 0x65, 0x20, 0x61, 0x20, 0x66, 0x75, 0x6E, 0x63, 0x74, 0x69, 0x6F, 0x6E, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x61, 0x6D, 0x65, 0x20, 0x6E, 0x61, 0x6D, 0x65, 0x20, 0x61, 0x73, 0x20, 0x61, 0x20, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6C, 0x65, 0x00
	string_521: db 0x63, 0x61, 0x6E, 0x20, 0x6E, 0x6F, 0x74, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6E, 0x65, 0x20, 0x61, 0x20, 0x66, 0x75, 0x6E, 0x63, 0x74, 0x69, 0x6F, 0x6E, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x61, 0x6D, 0x65, 0x20, 0x6E, 0x61, 0x6D, 0x65, 0x20, 0x61, 0x73, 0x20, 0x61, 0x20, 0x74, 0x79, 0x70, 0x65, 0x00
	string_522: db 0x74, 0x68, 0x65, 0x72, 0x65, 0x20, 0x61, 0x6C, 0x72, 0x65, 0x61, 0x64, 0x79, 0x20, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x20, 0x61, 0x20, 0x66, 0x75, 0x6E, 0x63, 0x74, 0x69, 0x6F, 0x6E, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x6E, 0x61, 0x6D, 0x65, 0x20, 0x69, 0x6E, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x73, 0x63, 0x6F, 0x70, 0x65, 0x00
	string_523: db 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x27, 0x28, 0x27, 0x20, 0x61, 0x66, 0x74, 0x65, 0x72, 0x20, 0x66, 0x75, 0x6E, 0x63, 0x74, 0x69, 0x6F, 0x6E, 0x20, 0x6E, 0x61, 0x6D, 0x65, 0x00
	string_524: db 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x6F, 0x66, 0x20, 0x66, 0x75, 0x6E, 0x63, 0x74, 0x69, 0x6F, 0x6E, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6D, 0x65, 0x6E, 0x74, 0x00
	string_525: db 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x6E, 0x61, 0x6D, 0x65, 0x20, 0x6F, 0x66, 0x20, 0x66, 0x75, 0x6E, 0x63, 0x74, 0x69, 0x6F, 0x6E, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6D, 0x65, 0x6E, 0x74, 0x00
	string_526: db 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x6F, 0x66, 0x20, 0x66, 0x75, 0x6E, 0x63, 0x74, 0x69, 0x6F, 0x6E, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6D, 0x65, 0x6E, 0x74, 0x00
	string_527: db 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x6E, 0x61, 0x6D, 0x65, 0x20, 0x6F, 0x66, 0x20, 0x66, 0x75, 0x6E, 0x63, 0x74, 0x69, 0x6F, 0x6E, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6D, 0x65, 0x6E, 0x74, 0x00
	string_528: db 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x27, 0x29, 0x27, 0x20, 0x61, 0x66, 0x74, 0x65, 0x72, 0x20, 0x66, 0x75, 0x6E, 0x63, 0x74, 0x69, 0x6F, 0x6E, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6D, 0x65, 0x6E, 0x74, 0x73, 0x00
	string_529: db 0x6E, 0x75, 0x6C, 0x6C, 0x00
	string_530: db 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6E, 0x20, 0x74, 0x79, 0x70, 0x65, 0x00
	string_531: db 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x27, 0x7B, 0x27, 0x20, 0x62, 0x65, 0x66, 0x6F, 0x72, 0x65, 0x20, 0x66, 0x75, 0x6E, 0x63, 0x74, 0x69, 0x6F, 0x6E, 0x20, 0x62, 0x6C, 0x6F, 0x63, 0x6B, 0x00
	string_532: db 0x61, 0x64, 0x64, 0x72, 0x5F, 0x66, 0x75, 0x6E, 0x63, 0x5F, 0x65, 0x6E, 0x64, 0x5F, 0x00
	string_533: db 0x63, 0x61, 0x6E, 0x20, 0x6E, 0x6F, 0x74, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6E, 0x20, 0x66, 0x72, 0x6F, 0x6D, 0x20, 0x6F, 0x75, 0x74, 0x73, 0x69, 0x64, 0x65, 0x20, 0x61, 0x20, 0x66, 0x75, 0x6E, 0x63, 0x74, 0x69, 0x6F, 0x6E, 0x00
	string_534: db 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x27, 0x3B, 0x27, 0x20, 0x61, 0x66, 0x74, 0x65, 0x72, 0x20, 0x61, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6E, 0x20, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x00
	string_535: db 0x6E, 0x75, 0x6C, 0x6C, 0x00
	string_536: db 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x61, 0x6E, 0x20, 0x65, 0x6D, 0x70, 0x74, 0x79, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6E, 0x20, 0x69, 0x6E, 0x20, 0x61, 0x20, 0x27, 0x6E, 0x75, 0x6C, 0x6C, 0x27, 0x20, 0x66, 0x75, 0x6E, 0x63, 0x74, 0x69, 0x6F, 0x6E, 0x00
	string_537: db 0x69, 0x6E, 0x63, 0x6F, 0x72, 0x72, 0x65, 0x63, 0x74, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6E, 0x20, 0x74, 0x79, 0x70, 0x65, 0x00
	string_538: db 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x27, 0x3B, 0x27, 0x20, 0x61, 0x66, 0x74, 0x65, 0x72, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6E, 0x20, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x00
	string_539: db 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x27, 0x28, 0x27, 0x20, 0x62, 0x65, 0x66, 0x6F, 0x72, 0x65, 0x20, 0x27, 0x69, 0x66, 0x27, 0x20, 0x63, 0x6F, 0x6E, 0x64, 0x69, 0x74, 0x69, 0x6F, 0x6E, 0x00
	string_540: db 0x62, 0x6F, 0x6F, 0x6C, 0x00
	string_541: db 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x27, 0x69, 0x66, 0x27, 0x20, 0x63, 0x6F, 0x6E, 0x64, 0x69, 0x74, 0x69, 0x6F, 0x6E, 0x20, 0x74, 0x6F, 0x20, 0x62, 0x65, 0x20, 0x6F, 0x66, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x27, 0x62, 0x6F, 0x6F, 0x6C, 0x27, 0x00
	string_542: db 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x27, 0x29, 0x27, 0x20, 0x61, 0x66, 0x74, 0x65, 0x72, 0x20, 0x27, 0x69, 0x66, 0x27, 0x20, 0x63, 0x6F, 0x6E, 0x64, 0x69, 0x74, 0x69, 0x6F, 0x6E, 0x00
	string_543: db 0x61, 0x64, 0x64, 0x72, 0x5F, 0x69, 0x66, 0x5F, 0x00
	string_544: db 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x27, 0x7B, 0x27, 0x20, 0x62, 0x65, 0x66, 0x6F, 0x72, 0x65, 0x20, 0x27, 0x69, 0x66, 0x27, 0x20, 0x62, 0x6C, 0x6F, 0x63, 0x6B, 0x00
	string_545: db 0x61, 0x64, 0x64, 0x72, 0x5F, 0x65, 0x6C, 0x73, 0x65, 0x5F, 0x00
	string_546: db 0x61, 0x64, 0x64, 0x72, 0x5F, 0x69, 0x66, 0x5F, 0x00
	string_547: db 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x27, 0x28, 0x27, 0x20, 0x62, 0x65, 0x66, 0x6F, 0x72, 0x65, 0x20, 0x27, 0x65, 0x6C, 0x73, 0x65, 0x20, 0x69, 0x66, 0x27, 0x20, 0x63, 0x6F, 0x6E, 0x64, 0x69, 0x74, 0x69, 0x6F, 0x6E, 0x00
	string_548: db 0x62, 0x6F, 0x6F, 0x6C, 0x00
	string_549: db 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x27, 0x65, 0x6C, 0x73, 0x65, 0x20, 0x69, 0x66, 0x27, 0x20, 0x63, 0x6F, 0x6E, 0x64, 0x69, 0x74, 0x69, 0x6F, 0x6E, 0x20, 0x74, 0x6F, 0x20, 0x62, 0x65, 0x20, 0x6F, 0x66, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x27, 0x62, 0x6F, 0x6F, 0x6C, 0x27, 0x00
	string_550: db 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x27, 0x29, 0x27, 0x20, 0x61, 0x66, 0x74, 0x65, 0x72, 0x20, 0x27, 0x65, 0x6C, 0x73, 0x65, 0x20, 0x69, 0x66, 0x27, 0x20, 0x63, 0x6F, 0x6E, 0x64, 0x69, 0x74, 0x69, 0x6F, 0x6E, 0x00
	string_551: db 0x61, 0x64, 0x64, 0x72, 0x5F, 0x69, 0x66, 0x5F, 0x00
	string_552: db 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x27, 0x7B, 0x27, 0x20, 0x62, 0x65, 0x66, 0x6F, 0x72, 0x65, 0x20, 0x27, 0x65, 0x6C, 0x73, 0x65, 0x20, 0x69, 0x66, 0x27, 0x20, 0x62, 0x6C, 0x6F, 0x63, 0x6B, 0x00
	string_553: db 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x27, 0x7B, 0x27, 0x20, 0x62, 0x65, 0x66, 0x6F, 0x72, 0x65, 0x20, 0x27, 0x65, 0x6C, 0x73, 0x65, 0x27, 0x20, 0x62, 0x6C, 0x6F, 0x63, 0x6B, 0x00
	string_554: db 0x61, 0x64, 0x64, 0x72, 0x5F, 0x69, 0x66, 0x5F, 0x00
	string_555: db 0x61, 0x64, 0x64, 0x72, 0x5F, 0x65, 0x6C, 0x73, 0x65, 0x5F, 0x00
	string_556: db 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x27, 0x28, 0x27, 0x20, 0x62, 0x65, 0x66, 0x6F, 0x72, 0x65, 0x20, 0x27, 0x77, 0x68, 0x69, 0x6C, 0x65, 0x27, 0x20, 0x63, 0x6F, 0x6E, 0x64, 0x69, 0x74, 0x69, 0x6F, 0x6E, 0x00
	string_557: db 0x61, 0x64, 0x64, 0x72, 0x5F, 0x77, 0x68, 0x69, 0x6C, 0x65, 0x5F, 0x63, 0x6F, 0x6E, 0x64, 0x69, 0x74, 0x69, 0x6F, 0x6E, 0x5F, 0x00
	string_558: db 0x62, 0x6F, 0x6F, 0x6C, 0x00
	string_559: db 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x27, 0x77, 0x68, 0x69, 0x6C, 0x65, 0x27, 0x20, 0x63, 0x6F, 0x6E, 0x64, 0x69, 0x74, 0x69, 0x6F, 0x6E, 0x20, 0x74, 0x6F, 0x20, 0x62, 0x65, 0x20, 0x6F, 0x66, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x27, 0x62, 0x6F, 0x6F, 0x6C, 0x27, 0x00
	string_560: db 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x27, 0x29, 0x27, 0x20, 0x61, 0x66, 0x74, 0x65, 0x72, 0x20, 0x27, 0x77, 0x68, 0x69, 0x6C, 0x65, 0x27, 0x20, 0x63, 0x6F, 0x6E, 0x64, 0x69, 0x74, 0x69, 0x6F, 0x6E, 0x00
	string_561: db 0x61, 0x64, 0x64, 0x72, 0x5F, 0x77, 0x68, 0x69, 0x6C, 0x65, 0x5F, 0x65, 0x6E, 0x64, 0x5F, 0x00
	string_562: db 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x27, 0x7B, 0x27, 0x20, 0x62, 0x65, 0x66, 0x6F, 0x72, 0x65, 0x20, 0x27, 0x69, 0x66, 0x27, 0x20, 0x62, 0x6C, 0x6F, 0x63, 0x6B, 0x00
	string_563: db 0x61, 0x64, 0x64, 0x72, 0x5F, 0x77, 0x68, 0x69, 0x6C, 0x65, 0x5F, 0x63, 0x6F, 0x6E, 0x64, 0x69, 0x74, 0x69, 0x6F, 0x6E, 0x5F, 0x00
	string_564: db 0x61, 0x64, 0x64, 0x72, 0x5F, 0x77, 0x68, 0x69, 0x6C, 0x65, 0x5F, 0x65, 0x6E, 0x64, 0x5F, 0x00
	string_565: db 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x27, 0x3B, 0x27, 0x20, 0x61, 0x66, 0x74, 0x65, 0x72, 0x20, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6F, 0x6E, 0x00
	string_566: db 0x75, 0x73, 0x61, 0x67, 0x65, 0x3A, 0x20, 0x6C, 0x75, 0x6D, 0x69, 0x6E, 0x61, 0x20, 0x5B, 0x2D, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5D, 0x20, 0x5B, 0x2D, 0x72, 0x5D, 0x20, 0x5B, 0x2D, 0x73, 0x5D, 0x20, 0x5B, 0x2D, 0x63, 0x68, 0x65, 0x63, 0x6B, 0x5D, 0x20, 0x3C, 0x69, 0x6E, 0x70, 0x75, 0x74, 0x46, 0x69, 0x6C, 0x65, 0x3E, 0x0A, 0x00
	string_567: db 0x09, 0x2D, 0x64, 0x65, 0x62, 0x75, 0x67, 0x3A, 0x20, 0x67, 0x65, 0x6E, 0x65, 0x72, 0x61, 0x74, 0x65, 0x20, 0x61, 0x20, 0x66, 0x69, 0x6C, 0x65, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x63, 0x61, 0x6E, 0x20, 0x62, 0x65, 0x20, 0x64, 0x65, 0x62, 0x75, 0x67, 0x67, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x67, 0x64, 0x62, 0x0A, 0x00
	string_568: db 0x09, 0x2D, 0x72, 0x3A, 0x20, 0x72, 0x75, 0x6E, 0x20, 0x74, 0x68, 0x65, 0x20, 0x67, 0x65, 0x6E, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x20, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6C, 0x65, 0x20, 0x61, 0x66, 0x74, 0x65, 0x72, 0x20, 0x63, 0x6F, 0x6D, 0x70, 0x69, 0x6C, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x20, 0x66, 0x69, 0x6E, 0x69, 0x73, 0x68, 0x65, 0x64, 0x0A, 0x00
	string_569: db 0x09, 0x2D, 0x73, 0x3A, 0x20, 0x73, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x20, 0x63, 0x6F, 0x6D, 0x70, 0x69, 0x6C, 0x65, 0x72, 0x20, 0x6F, 0x75, 0x74, 0x70, 0x75, 0x74, 0x20, 0x69, 0x6E, 0x20, 0x73, 0x74, 0x64, 0x6F, 0x75, 0x74, 0x0A, 0x00
	string_570: db 0x09, 0x2D, 0x63, 0x68, 0x65, 0x63, 0x6B, 0x3A, 0x20, 0x63, 0x68, 0x65, 0x63, 0x6B, 0x20, 0x69, 0x6E, 0x70, 0x75, 0x74, 0x20, 0x66, 0x69, 0x6C, 0x65, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x65, 0x72, 0x72, 0x6F, 0x72, 0x73, 0x2C, 0x20, 0x62, 0x75, 0x74, 0x20, 0x64, 0x6F, 0x65, 0x73, 0x6E, 0x27, 0x74, 0x20, 0x67, 0x65, 0x6E, 0x65, 0x72, 0x61, 0x74, 0x65, 0x20, 0x63, 0x6F, 0x64, 0x65, 0x0A, 0x00
	string_571: db 0x5B, 0x45, 0x52, 0x52, 0x4F, 0x52, 0x5D, 0x20, 0x63, 0x6F, 0x75, 0x6C, 0x64, 0x20, 0x6E, 0x6F, 0x74, 0x20, 0x67, 0x65, 0x6E, 0x65, 0x72, 0x61, 0x74, 0x65, 0x20, 0x63, 0x68, 0x69, 0x6C, 0x64, 0x20, 0x70, 0x72, 0x6F, 0x63, 0x65, 0x73, 0x73, 0x20, 0x74, 0x6F, 0x20, 0x63, 0x61, 0x6C, 0x6C, 0x20, 0x27, 0x00
	string_572: db 0x27, 0x0A, 0x00
	string_573: db 0x5B, 0x43, 0x4D, 0x44, 0x5D, 0x00
	string_574: db 0x20, 0x20, 0x00
	string_575: db 0x20, 0x0A, 0x00
	string_576: db 0x5B, 0x45, 0x52, 0x52, 0x4F, 0x52, 0x5D, 0x20, 0x70, 0x72, 0x6F, 0x62, 0x6C, 0x65, 0x6D, 0x20, 0x6F, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6E, 0x20, 0x74, 0x72, 0x79, 0x69, 0x6E, 0x67, 0x20, 0x74, 0x6F, 0x20, 0x63, 0x61, 0x6C, 0x6C, 0x20, 0x00
	string_577: db 0x3A, 0x20, 0x65, 0x72, 0x72, 0x6F, 0x72, 0x20, 0x63, 0x6F, 0x64, 0x65, 0x3A, 0x20, 0x00
	string_578: db 0x20, 0x0A, 0x00
	string_579: db 0x2D, 0x72, 0x00
	string_580: db 0x2D, 0x64, 0x65, 0x62, 0x75, 0x67, 0x00
	string_581: db 0x2D, 0x73, 0x00
	string_582: db 0x2D, 0x63, 0x68, 0x65, 0x63, 0x6B, 0x00
	string_583: db 0x5B, 0x45, 0x52, 0x52, 0x4F, 0x52, 0x5D, 0x20, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x66, 0x69, 0x6C, 0x65, 0x4E, 0x61, 0x6D, 0x65, 0x0A, 0x00
	string_584: db 0x5B, 0x46, 0x49, 0x4C, 0x45, 0x5D, 0x20, 0x6F, 0x70, 0x65, 0x6E, 0x69, 0x6E, 0x67, 0x20, 0x66, 0x69, 0x6C, 0x65, 0x20, 0x27, 0x00
	string_585: db 0x27, 0x0A, 0x00
	string_586: db 0x61, 0x73, 0x6D, 0x00
	string_587: db 0x5B, 0x43, 0x48, 0x45, 0x43, 0x4B, 0x5D, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6C, 0x6C, 0x79, 0x20, 0x63, 0x68, 0x65, 0x63, 0x6B, 0x65, 0x64, 0x20, 0x27, 0x00
	string_588: db 0x27, 0x0A, 0x00
	string_589: db 0x6E, 0x61, 0x73, 0x6D, 0x00
	string_590: db 0x2D, 0x66, 0x00
	string_591: db 0x65, 0x6C, 0x66, 0x36, 0x34, 0x00
	string_592: db 0x2D, 0x46, 0x00
	string_593: db 0x64, 0x77, 0x61, 0x72, 0x66, 0x00
	string_594: db 0x2D, 0x67, 0x00
	string_595: db 0x6E, 0x61, 0x73, 0x6D, 0x00
	string_596: db 0x2D, 0x66, 0x00
	string_597: db 0x65, 0x6C, 0x66, 0x36, 0x34, 0x00
	string_598: db 0x6E, 0x61, 0x73, 0x6D, 0x00
	string_599: db 0x6E, 0x61, 0x73, 0x6D, 0x00
	string_600: db 0x5B, 0x45, 0x52, 0x52, 0x4F, 0x52, 0x5D, 0x20, 0x77, 0x61, 0x69, 0x74, 0x34, 0x20, 0x66, 0x61, 0x69, 0x6C, 0x65, 0x64, 0x0A, 0x00
	string_601: db 0x5B, 0x45, 0x52, 0x52, 0x4F, 0x52, 0x5D, 0x20, 0x69, 0x6E, 0x20, 0x6E, 0x61, 0x73, 0x6D, 0x2C, 0x20, 0x65, 0x72, 0x72, 0x6F, 0x72, 0x20, 0x63, 0x6F, 0x64, 0x65, 0x3A, 0x20, 0x00
	string_602: db 0x20, 0x0A, 0x00
	string_603: db 0x6C, 0x64, 0x00
	string_604: db 0x2D, 0x6F, 0x00
	string_605: db 0x6C, 0x64, 0x00
	string_606: db 0x5B, 0x45, 0x52, 0x52, 0x4F, 0x52, 0x5D, 0x20, 0x77, 0x61, 0x69, 0x74, 0x34, 0x20, 0x66, 0x61, 0x69, 0x6C, 0x65, 0x64, 0x0A, 0x00
	string_607: db 0x5B, 0x45, 0x52, 0x52, 0x4F, 0x52, 0x5D, 0x20, 0x69, 0x6E, 0x20, 0x6C, 0x69, 0x6E, 0x6B, 0x65, 0x72, 0x2C, 0x20, 0x65, 0x72, 0x72, 0x6F, 0x72, 0x20, 0x63, 0x6F, 0x64, 0x65, 0x3A, 0x20, 0x00
	string_608: db 0x20, 0x0A, 0x00
	string_609: db 0x5B, 0x45, 0x52, 0x52, 0x4F, 0x52, 0x5D, 0x20, 0x77, 0x61, 0x69, 0x74, 0x34, 0x20, 0x66, 0x61, 0x69, 0x6C, 0x65, 0x64, 0x0A, 0x00
	string_610: db 0x5B, 0x45, 0x52, 0x52, 0x4F, 0x52, 0x5D, 0x20, 0x69, 0x6E, 0x20, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6C, 0x65, 0x2C, 0x20, 0x65, 0x72, 0x72, 0x6F, 0x72, 0x20, 0x63, 0x6F, 0x64, 0x65, 0x3A, 0x20, 0x00
	string_611: db 0x20, 0x0A, 0x00
