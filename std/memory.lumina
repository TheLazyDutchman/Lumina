import "syscalls.lumina"

var PAGESIZE = 4096;

type _heap_block {
	int size;
	bool free;
	_heap_block prev;
	_heap_block next;
}

var _heap_start = (_heap_block)brk((ptr)0);

brk((ptr)((int)_heap_start + PAGESIZE)); // allocate memory for the heap

_heap_start.size = PAGESIZE - sizeof(_heap_block); // initialize the first block
_heap_start.free = 0 == 0; // true keyword is not implemented yet
_heap_start.prev = 0;
_heap_start.next = 0;


func _expand_heap(int size) -> int {
	var val = PAGESIZE;

	while (size > val) {
		val = val + PAGESIZE;
	}

	var current = (int)brk((ptr)0);
	brk((ptr)(current + val));

	return val;
}

func _split_block(_heap_block block, int size) -> _heap_block {
	if (size + sizeof(_heap_block) < block.size) {
		return block;
	}

	var newBlock = (_heap_block)((int)block + size + sizeof(_heap_block));

	newBlock.free = 0 == 0;
	newBlock.size = block.size - size - sizeof(_heap_block);
	block.size = size;

	newBlock.prev = block;
	newBlock.next = block.next;
	
	if (newBlock.next > (_heap_block)0) {
		newBlock.next.prev = newBlock;
	}

	block.next = newBlock;

	return block;
}


func _combine(_heap_block block) {
	block.size = block.size + sizeof(_heap_block) + block.next.size;

	block.next = block.next.next;

	if (block.next > (_heap_block)0) {
		block.next.prev = block;
	}
}

func _block_to_ptr(_heap_block block) -> ptr {
	return (ptr)((int)block + sizeof(_heap_block));
}

func malloc(int size) -> ptr {
	var block = _heap_start;

	while (block.next > (_heap_block)0) {
		if (block.free) {
			if (block.size > size) {
				var newBlock = _split_block(block, size);
				newBlock.free = 1 == 0; // false keyword is not implemented yet

				return _block_to_ptr(newBlock);
			}
		}
		block = block.next;
	}

	var expandedSize = _expand_heap(size);

	var newBlock = (_heap_block)((int)block + sizeof(_heap_block) + block.size);
	newBlock.free = 0 == 0;
	newBlock.size = expandedSize - sizeof(_heap_block);
	newBlock.prev = block;
	block.next = newBlock;
	newBlock.next = 0;

	return malloc(size);
}

func free(ptr addr) {
	var block = (_heap_block)((int)addr - sizeof(_heap_block));
	block.free = 0 == 0; // true keyword not implemented

	if (block.next > (_heap_block)0) {
		if (block.next.free) {
			_combine(block);
		}
	}

	if (block.prev > (_heap_block)0) {
		if (block.prev.free) {
			_combine(block.prev);
		}
	}
}

func realloc(ptr addr, int newSize) -> ptr {
	var block = (_heap_block)((int)addr - sizeof(_heap_block));

	if (newSize < block.size - sizeof(_heap_block)) {
		_split_block(block, newSize);
		return _block_to_ptr(block);
	}

	if (newSize > block.size) {
		if (block.next > (_heap_block)0) {
			if (block.next.free) {
				_combine(block);
				return realloc(addr, newSize);
			}
		}

		var target = malloc(newSize);

		// copy data from addr to target

		free(addr);
		return target;
	}

	return addr;
}
