import "syscalls.lumina"

var PAGESIZE = 4096;

type _heap_block {
	int size;
	_heap_block prev;
	_heap_block next;
}

var _heap_start = <_heap_block>brk(<ptr>0);

brk(<ptr>(<int>_heap_start + PAGESIZE)); // allocate memory for the heap

_heap_start.size = PAGESIZE; // initialize the first block
_heap_start.prev = 0;
_heap_start.next = 0;


func malloc(int size) -> ptr {
	var block = _heap_start;

	while (block.next > <_heap_block>0) {
		if (block.size > size) {
			// split block
		}

		if (block.size == size) {
			// return block
		}

		block = block.next;
	}

	return <ptr>0;
}
