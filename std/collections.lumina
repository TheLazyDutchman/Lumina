import "../std/io.lumina"


type Array<T> {
	int size;
	int maxSize;
	T[] list;

	func push(Array<T> self, T item) -> Array<T> {
		if (self.maxSize == 0) {
			self.maxSize = 8;
			self.list = new T[](self.maxSize);
		}

		if (self.size + 1 == self.maxSize) {
			self.maxSize = self.maxSize * 2;
			
			var newList = new T[](self.maxSize);
			var i = 0;
			while (i < self.size) {
				newList[i] = self.get(i);
				i = i + 1;
			}

			self.list = newList;
		}

		self.set(self.size, item);
		self.size = self.size + 1;

		return self;
	}

	func pop(Array<T> self) -> T {
		self.size = self.size - 1;
		var item = self.get(self.size);
		self.set(self.size, (T)0);
		return item;
	}

	func extend(Array<T> self, Array<T> other) {
		var newSize = self.size + other.size;
		if (newSize + 1 > self.maxSize) {
			if (self.maxSize == 0) {
				self.maxSize = 8;
			}

			while(newSize + 1 > self.maxSize) {
				self.maxSize = self.maxSize * 2;
			}

			var newList = new T[](self.maxSize);

			var i = 0;
			while (i < self.size) {
				newList[i] = self.get(i);
				i = i + 1;
			}

			self.list = newList;
		}

		var i = 0;
		while (i < other.size) {
			self.set(self.size + i, other.get(i));
			i = i + 1;
		}

		self.size = newSize;
	}

	func get(Array<T> self, int index) -> T {
		return self.list[index];
	}

	func set(Array<T> self, int index, T item) {
		self.list[index] = item;
	}
}

func createArray<T>() -> Array<T> {
	var array = new Array<T>();

	array.size = 0;
	array.maxSize = 0;
	array.list = (T[])0;

	return array;
}
