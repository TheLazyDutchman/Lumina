type Array<T> {
	int size;
	int maxSize;
	T[] list;

	func push<T>(Array<T> array, T item) {
		addItem<T>(array, item);
	}
}

func createArray<T>() -> Array<T> {
	var array = new Array<T>();

	array.size = 0;
	array.maxSize = 0;
	array.list = (T[])0;

	return array;
}

func addItem<T>(Array<T> array, T item) {
	if (array.size == array.maxSize) {
		var newSize = array.maxSize * 2;
		if (newSize == 0) {
			newSize = 8;
		}

		var newList = new T[](newSize);
		var i = 0;
		while (i < array.maxSize) {
			newList[i] = array.list[i];
			i = i + 1;
		}

		array.list = newList;
		array.maxSize = newSize;
	}

	array.list[array.size] = item;
	array.size = array.size + 1;
}

func popItem<T>(Array<T> array) -> T {
	array.size = array.size - 1;

	return getItem<T>(array, array.size);
}

func extendArray<T>(Array<T> destination, Array<T> source) {
	if (source == (Array<T>)0) {
		return;
	}

	var i = 0;
	while (i < source.size) {
		addItem<T>(destination, getItem<T>(source, i));
		i = i + 1;
	}
}

func getItem<T>(Array<T> array, int index) -> T {
	return array.list[index];
}

func setItem<T>(Array<T> array, int index, T item) {
	array.list[index] = item;
}
