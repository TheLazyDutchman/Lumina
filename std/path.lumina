import "memory.lumina"
import "string.lumina"

type Path {
	str[] folders;
	str name;
	str extension;
}


func _is_outer(str s) -> bool {
	if (s[0] != '.') { return (bool)0; }
	if (s[1] != '.') { return (bool)0; }
	return (bool)1;
}

func getPathFromString(str file) -> Path {
	var path = (Path)malloc(sizeof(Path));

	var depth = countchr(file, '/');
	path.folders = (str[])malloc(depth * sizeof(str));

	var name = file;

	var index = strindex(file, '/');
	var currentDepth = 0;

	if (name[0] == '.' && _is_outer(name) == (bool)0) {
		depth = depth - 1;
		name = (str)((int)name + index);
		index = strindex(name, '/');
	}

	while (currentDepth < depth) {
		if (_is_outer(name) && 
			_is_outer(path.folders[currentDepth - 1]) == (bool)0 &&
			currentDepth > 0) {
			currentDepth = currentDepth - 1;
			depth = depth - 2;

			name = (str)((int)name + index);
			index = strindex(name, '/');
		}

		path.folders[currentDepth] = strndup(name, index - 1);
		name = (str)((int)name + index);
		index = strindex(name, '/');

		currentDepth = currentDepth + 1;
	}
	
	path.folders[depth] = (str)0;

	index = strindex(name, '.');

	if (index == -1) {
		path.name = name;
		path.extension = (str)0;
	} else {
		path.name = strndup(name, index - 1);
		name = (str)((int)name + index);
		path.extension = strndup(name, strlen(name));
	}

	return path;
}

func getFullPathString(Path path) -> str {
	return (str)0;
}
