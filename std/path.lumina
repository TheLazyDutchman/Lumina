import "string.lumina"
import "io.lumina"
import "collections.lumina"


type Path {
	Array<String> folders;
	String name;
	String extension;
}


func _is_outer(String s) -> bool {
	if (getItem<char>(s, 0) != '.') { return false; }
	if (getItem<char>(s, 1) != '.') { return false; }
	return true;
}

func setFileName(Path path, String filename) {
	var nameParts = split(filename, ".");
	if (nameParts.size == 1) {
		path.name = filename;
		path.extension = (String)0;
		return;
	}

	var nameStrings = createArray<String>();
	var i = 0;
	while (i < nameParts.size - 1) {
		addItem<String>(nameStrings, getItem<String>(nameParts, i));
		i = i + 1;
	}

	path.name = join(nameStrings, ".");
	path.extension = getItem<String>(nameParts, nameParts.size - 1);
}

func toPath(String value) -> Path {
	var parts = split(value, "/");
	var folders = createArray<String>();

	var i = 0;
	while (i < parts.size - 1) {
		var part = getItem<String>(parts, i);

		if (_is_outer(part) && folders.size != 0 && !_is_outer(getItem<String>(folders, folders.size - 1))) {
			popItem<String>(folders);
		} else if (!streq(part.list, ".")) {
			addItem<String>(folders, part);
		}

		i = i + 1;
	}

	var path = new Path();
	path.folders = folders;

	setFileName(path, getItem<String>(parts, parts.size - 1));

	return path;
}

func toLocalPath(String path, String file) -> Path {
	var outerPath = toPath(path);
	var parts = split(file, "/");

	var i = 0;
	while (i < parts.size - 1) {
		var part = getItem<String>(parts, i);

		if (_is_outer(part) && outerPath.folders.size != 0 && !_is_outer(getItem<String>(outerPath.folders, outerPath.folders.size - 1))) {
			popItem<String>(outerPath.folders);
		} else if (!streq(part.list, ".")) {
			addItem<String>(outerPath.folders, part);
		}

		i = i + 1;
	}

	setFileName(outerPath, getItem<String>(parts, parts.size - 1));

	return outerPath;
}

func pathToString(Path path) -> String {
	var string = join(path.folders, "/");

	if (path.folders.size == 0) {
		addItem<char>(string, '.');
	}

	addItem<char>(string, '/');

	extendArray<char>(string, path.name);

	if (path.extension != (String)0) {
		addItem<char>(string, '.');
		extendArray<char>(string, path.extension);
	}

	return string;
}
