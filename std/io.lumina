import "string.lumina"

func fprint(int fd, str string) -> int {
	var SYSWRITE = 1;
	var length = strlen(string);
	return (int)syscall(SYSWRITE, fd, string, length, 0, 0, 0);
}

var STDOUT = 1;

func print(str string) -> int {
	return fprint(STDOUT, string);
}

func fprinti(int file, int number) {
	var buffer = (str)malloc(22); //enough size for any number
	var isNegative = number < 0;
	if (isNegative) {
		number = (!number + 1); //two's complement
		buffer[0] = "-";
	}

	var index = (int)isNegative;
	var nextSize = 1;

	while (nextSize * 10 <= number) {
		nextSize = nextSize * 10;
	}

	while (nextSize > 1) {
		var size = 1;

		while (size * 10 < nextSize) {
			size = size * 10;
		}
		nextSize = size;
		size = size * 10;

		var counter = 0;
		
		while (size <= number) {
			number = number - size;
			counter = counter + 1;
		}

		buffer[index] = "0" + counter;

		index = index + 1;
	}

	buffer[index] = "0" + number; // the last loop leaves the last digit
	buffer[index + 1] = "\0";

	fprint(file, buffer);

	free((ptr)buffer);
}

func printi(int number) {
	fprinti(STDOUT, number);
}
