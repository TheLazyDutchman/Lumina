import "position.lumina"
import "whitespace.lumina"
import "value.lumina"


const NUMOPERATORS = 27;

var _operatorList = (str[])malloc(sizeof(str) * NUMOPERATORS);
_operatorList[0] = "<<";
_operatorList[1] = ">>";
_operatorList[2] = "||";
_operatorList[3] = "&&";
_operatorList[4] = "|";
_operatorList[5] = "&";
_operatorList[6] = "->";
_operatorList[7] = "!=";
_operatorList[8] = "<=";
_operatorList[9] = ">=";
_operatorList[10] = "==";
_operatorList[11] = "<";
_operatorList[12] = ">";
_operatorList[13] = "!";
_operatorList[14] = "=";
_operatorList[15] = "+";
_operatorList[16] = "-";
_operatorList[17] = "*";
_operatorList[18] = "(";
_operatorList[19] = ")";
_operatorList[20] = "{";
_operatorList[21] = "}";
_operatorList[22] = "[";
_operatorList[23] = "]";
_operatorList[24] = ".";
_operatorList[25] = ",";
_operatorList[26] = ";";

type Operator {
	WhiteSpace space;
	Position position;
	int operatorType;
	str name;
}

type Operation {
	Region region;
	Operation left;
	Operator operator;
	Operation right;
	Value value;
	Operator end;
}

type OperatorList {
	int size;
	int maxSize;
	Operator[] list;
}

func createOperator(Position position, WhiteSpace space) -> Operator {
	var operator = (Operator)malloc(sizeof(Operator));

	operator.position = position;
	operator.space = space;

	var stringStart = (str)((int)position.buffer + position.index);
	operator.operatorType = -1;
	operator.name = strndup(stringStart, 1);

	var i = 0;
	while (i < NUMOPERATORS) {
		var opString = _operatorList[i];
		if (strneq(opString, stringStart, strlen(opString))) {
			operator.operatorType = i;

			operator.name = opString;

			i = NUMOPERATORS;
		}
		i = i + 1;
	}

	return operator;
}

func createOperation(Operation left, Operator operator, Operation right, Operator end) -> Operation {
	var operation = (Operation)malloc(sizeof(Operation));

	if (end == (Operator)0) {
		operation.region = createRegion(left.region.start, right.region.end);
	} else {
		operation.region = createRegion(left.region.start, end.position);
	}

	operation.left = left;
	operation.operator = operator;
	operation.right = right;
	operation.value = (Value)0;
	operation.end = end;

	return operation;
}

func createUnaryOperation(Operator operator, Operation right) -> Operation {
	var operation = (Operation)malloc(sizeof(Operation));

	operation.region = createRegion(operator.position, right.region.end);
	operation.left = (Operation)0;
	operation.operator = operator;
	operation.right = right;
	operation.value = (Value)0;
	operation.end = (Operator)0;

	return operation;
}

func createOperationFromValue(Value value) -> Operation {
	var operation = (Operation)malloc(sizeof(Operation));

	operation.region = value.region;
	operation.left = (Operation)0;
	operation.operator = (Operator)0;
	operation.right = (Operation)0;
	operation.value = value;

	return operation;
}

func createOperatorList() -> OperatorList {
	var list = (OperatorList)malloc(sizeof(OperatorList));

	list.size = 0;
	list.maxSize = 8;
	list.list = (Operator[])malloc(8 * 8);

	return list;
}

func addOperator(OperatorList list, Operator operator) {
	list.list[list.size] = operator;
	list.size = list.size + 1;

	if (list.size == list.maxSize) {
		list.maxSize = list.maxSize * 2;

		list.list = (Operator[])realloc((ptr)list.list, list.maxSize);
	}
}

func isOperator(Operator operator, str name) -> bool {
	if (operator == (Operator)0) {
		return (bool)0;
	}

	if (streq(operator.name, name) != (bool)1) {
		return (bool)0;
	}

	return (bool)1;
}
