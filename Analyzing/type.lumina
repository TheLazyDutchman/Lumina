import "../std/string.lumina"
import "../std/io.lumina"
import "../std/collections.lumina"

import "name.lumina" 
import "operator.lumina"
import "operation.lumina"
import "position.lumina"
import "whitespace.lumina"


type Property {
	str name;
	int nameId;
	PropertyDefinition definition;
	str typeName;

	TypeObj propertyType;
	int offset;
}

type Generic {
	str name;
	TypeObj typeObj;

	GenericDefinition definition;
}

type TypeObj {
	str name;
	int nameId;
	TypeDefinition definition;
	int size;
	int objectSize;

	Array<Property> properties;
	Array<Generic> generics;

	TypeObj listOf;
	TypeObj listType;

	Array<TypeObj> variants;
	bool isGeneric;

	int depth;
	int position;
}

type PropertyDefinition {
	Region region;
	Operation propertyType;
	Name name;
	Operator semicolon;
}

type GenericDefinition {
	Region region;
	Name name;
	Operator comma;
}

type GenericsDefinition {
	Region region;

	Operator lesser;
	Array<GenericDefinition> generics;
	Operator greater;
}

type TypeDefinition {
	Region region;
	Name keyword;
	Name name;
	int size;

	Operator lbrace;

	Array<PropertyDefinition> properties;
	GenericsDefinition generics;

	Operator rbrace;

	TypeDefinition listOf;
	TypeDefinition arrayType;
}

func createPropertyDefinition(Operation propertyType, Name name, Operator semicolon) -> PropertyDefinition {
	if (isIdentifier(name) != (bool)1) {
		print("expected property name to be an identifier\n");
	}

	if (streq(semicolon.name, ";") == (bool)0) {
		print("expected ';' in property\n");
	}

	var property = new PropertyDefinition();

	property.propertyType = propertyType;
	property.name = name;
	property.semicolon = semicolon;

	property.region = createRegion(propertyType.region.start, semicolon.position);

	return property;
}

func findProperty(Array<Property> list, str name) -> Property {
	var i = 0;
	while (i < list.size) {
		if (streq(list.list[i].name, name)) {
			return list.list[i];
		}
		i = i + 1;
	}
	return (Property)0;
}

func createGenericFromString(str name, int depth, int position) -> Generic {
	var generic = new Generic();

	generic.name = name;
	generic.typeObj = createTypeFromString(name, 8);
	generic.typeObj.isGeneric = (bool)1;
	generic.typeObj.depth = depth;
	generic.typeObj.position = position;

	return generic;
}

func createGenericFromType(TypeObj typeObj) -> Generic {
	if (typeObj == (TypeObj)0) {
		return (Generic)0;
	}

	var generic = new Generic();

	generic.name = typeObj.name;
	generic.typeObj = typeObj;

	return generic;
}

func createGenericFromDefinition(GenericDefinition definition, int depth, int position) -> Generic {
	var generic = createGenericFromString(definition.name.name, depth, position);

	generic.definition = definition;

	return generic;
}

func findGeneric(Array<Generic> list, str name) -> Generic {
	var i = 0;
	while (i < list.size) {
		if (streq(list.list[i].name, name)) {
			return list.list[i];
		}
		i = i + 1;
	}
	return (Generic)0;
}

func createGenericDefinition(Operator comma, Name name) -> GenericDefinition {
	var generic = new GenericDefinition();

	generic.comma = comma;
	generic.name = name;

	if (comma != (Operator)0) {
		generic.region = createRegion(comma.position, name.region.end);
	} else {
		generic.region = name.region;
	}

	return generic;
}

func createGenericsDefinition(Operator lesser, Array<GenericDefinition> generics, Operator greater) -> GenericsDefinition {
	var definition = new GenericsDefinition();

	if (lesser != (Operator)0 && greater != (Operator)0) {
		definition.region = createRegion(lesser.position, greater.position);
	}

	definition.lesser = lesser;
	definition.generics = generics;
	definition.greater = greater;

	return definition;
}

func createTypeDefinition(Name keyword, Name name, Operator lbrace, GenericsDefinition generics, Array<PropertyDefinition> properties, Operator rbrace) -> TypeDefinition {
	var typeDef = new TypeDefinition();

	if (isIdentifier(name) != (bool)1) {
		print("expected type name to be an identifier\n");
	}

	if (isOperator(lbrace, "{") != (bool)1) {
		print("expected '{' after type name\n");
	}

	if (isOperator(rbrace, "}") != (bool)1) {
		print("expected '}' after type definition\n");
	}

	typeDef.keyword = keyword;
	typeDef.name = name;
	typeDef.size = 8;
	typeDef.generics = generics;
	typeDef.lbrace = lbrace;
	typeDef.properties = properties;
	typeDef.rbrace = rbrace;

	typeDef.region = createRegion(keyword.region.start, rbrace.position);

	return typeDef;
}

func createPropertyFromDefinition(PropertyDefinition definition) -> Property {
	var property = new Property();

	property.name = definition.name.name;
	property.definition = definition;

	property.offset = -1;

	return property;
}

func createPropertyFromString(str name, TypeObj propertyType, int offset) -> Property {
	var property = new Property();

	property.name = name;
	property.typeName = propertyType.name;

	property.offset = offset;
	property.propertyType = propertyType;

	return property;
}

func copyProperty(Property original) -> Property {
	var property = new Property();

	property.name = original.name;
	property.definition = original.definition;

	property.typeName = original.typeName;
	property.offset = original.offset;
	property.propertyType = original.propertyType;
	
	return property;
}

func copyPropertyArray(Array<Property> original) -> Array<Property> {
	var list = new Array<Property>();

	list.size = original.size;
	list.maxSize = original.maxSize;
	list.list = new Property[](list.maxSize);

	var i = 0;
	while (i < original.size) {
		list.list[i] = copyProperty(original.list[i]);
		i = i + 1;
	}

	return list;
}

func createTypeFromDefinition(TypeDefinition definition) -> TypeObj {
	var typeObj = new TypeObj();

	typeObj.name = definition.name.name;
	typeObj.definition = definition;
	typeObj.size = 8;

	typeObj.generics = createArray<Generic>();

	var i = 0;
	while (i < definition.generics.generics.size) {
		addItem<Generic>(typeObj.generics, createGenericFromDefinition(definition.generics.generics.list[i], 0, i));
		i = i + 1;
	}

	typeObj.properties = createArray<Property>();

	i = 0;
	while (i < definition.properties.size) {
		addItem<Property>(typeObj.properties, createPropertyFromDefinition(definition.properties.list[i]));
		i = i + 1;
	}
	
	typeObj.variants = createArray<TypeObj>();
	addItem<TypeObj>(typeObj.variants, typeObj);

	return typeObj;
}

func createTypeFromString(str name, int size) -> TypeObj {
	var typeObj = new TypeObj();

	typeObj.name = name;
	typeObj.size = size;
	typeObj.objectSize = size;

	typeObj.generics = createArray<Generic>();
	typeObj.properties = createArray<Property>();

	typeObj.variants = createArray<TypeObj>();
	addItem<TypeObj>(typeObj.variants, typeObj);

	return typeObj;
}

func createNewTypeVariant(Array<TypeObj> typeArray, TypeObj typeObj, Array<TypeObj> newGenerics) -> TypeObj {
	var newType = new TypeObj();

	newType.name = typeObj.name;
	newType.definition = typeObj.definition;
	newType.size = typeObj.size;
	newType.objectSize = typeObj.objectSize;

	newType.generics = createArray<Generic>();
	var i = 0;
	while (i < newGenerics.size) {
		addItem<Generic>(newType.generics, createGenericFromType(newGenerics.list[i]));
		i = i + 1;
	}

	newType.properties = copyPropertyArray(typeObj.properties);
	i = 0;
	while (i < newType.properties.size) {
		var j = 0;
		while (j < typeObj.generics.size) {
			newType.properties.list[i].propertyType = applyGeneric(typeArray, newType.properties.list[i].propertyType, typeObj.generics.list[j].typeObj, newGenerics.list[j]);
			j = j + 1;
		}
		i = i + 1;
	}


	newType.variants = typeObj.variants;
	addItem<TypeObj>(typeObj.variants, newType);

	return newType;
}

func createListType(Array<TypeObj> typeArray, str name, TypeObj typeObj) -> TypeObj {
	if (typeObj.listOf != (TypeObj)0) {
		return typeObj.listOf;
	}

	var listType = createTypeFromString(name, 8);
	listType.objectSize = typeObj.size;
	listType.listType = typeObj;
	listType.isGeneric = typeObj.isGeneric;

	typeObj.listOf = listType;

	if (typeArray != (Array<TypeObj>)0) {
		addItem<TypeObj>(typeArray, listType);
	}

	return listType;
}

func getVariantType(Array<TypeObj> typeArray, TypeObj typeObj, Array<TypeObj> generics) -> TypeObj {
	if (typeObj.generics.size != generics.size) {
		print("expected ");
		printi(typeObj.generics.size);
		print(" generics, got ");
		printi(generics.size);
		print(" instead\n");
		return (TypeObj)0;
	}

	var i = 0;
	while (i < typeObj.variants.size) {
		var variant = typeObj.variants.list[i];
		var j = 0;
		var isEqual = (bool)1;
		while (j < generics.size) {
			if (variant.generics.list[j] == (Generic)0 || variant.generics.list[j].typeObj != generics.list[j]) {
				isEqual = (bool)0;
			}
			j = j + 1;
		}

		if (isEqual) {
			return variant;
		}
		i = i + 1;
	}

	return createNewTypeVariant(typeArray, typeObj, generics);
}

func applyGeneric(Array<TypeObj> typeArray, TypeObj value, TypeObj old, TypeObj newType) -> TypeObj {
	if (value == old) { return newType; }
	if (value == (TypeObj)0) {
		return (TypeObj)0;
	}

	if (value.listOf == old) { return newType.listType; }
	if (value.listType == old) { 
		if (newType == (TypeObj)0) {
			return (TypeObj)0;
		}

		if (newType.listOf == (TypeObj)0) {
			createListType(typeArray, (str)0, newType);
		}

		return newType.listOf; 
	}

	if (value.generics.size != 0) {
		var generics = createArray<TypeObj>();
		var i = 0;
		while (i < value.generics.size) {
			var original = value.generics.list[i].typeObj;
			addItem<TypeObj>(generics, applyGeneric(typeArray, original, old, newType));
			i = i + 1;
		}

		return getVariantType(typeArray, value, generics);
	}

	return value;
}

func findType(Array<TypeObj> list, str name) -> TypeObj {
	var i = 0;
	while (i < list.size) {
		if (getItem<TypeObj>(list, i).name != (str)0 && streq(getItem<TypeObj>(list, i).name, name)) {
			return list.list[i];
		}
		i = i + 1;
	}
	return (TypeObj)0;
}

func printType(TypeObj typeObj) {
	if (typeObj == (TypeObj)0) {
		print("type is null");
		return;
	}

	if (typeObj.generics.size != 0) {
		print(typeObj.name);
		print("<");
		var i = 0;
		while (i < typeObj.generics.size) {
			if (i != 0) {
				print(",");
			}
			printType(typeObj.generics.list[i].typeObj);
			i = i + 1;
		}
		print(">");
		return;
	}

	if (typeObj.listType != (TypeObj)0 && typeObj.name == (str)0) {
		printType(typeObj.listType);
		print("[]");
		return;
	}

	if (typeObj.name == (str)0) {
		print("type name is null");
		return;
	}

	print(typeObj.name);
}

func printTypeArray(Array<TypeObj> list) {
	var i = 0;
	print("[");
	while (i < list.size) {
		if (i != 0) {
			print(",");
		}
		printType(list.list[i]);
		i = i + 1;
	}
	print("]");
}
