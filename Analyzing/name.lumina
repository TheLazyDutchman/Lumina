import "position.lumina"
import "whitespace.lumina"


const KEYWORD_var = 0;
const KEYWORD_const = 1;
const KEYWORD_func = 2;
const KEYWORD_if = 3;
const KEYWORD_else = 4;
const KEYWORD_while = 5;
const KEYWORD_type = 6;
const KEYWORD_import = 7;
const KEYWORD_return = 8;
const KEYWORD_sizeof = 9;
const NUMKEYWORDS = 10;

var _keyWordList = (str[])malloc(sizeof(str) * NUMKEYWORDS);
_keyWordList[0] = "var";
_keyWordList[1] = "const";
_keyWordList[2] = "func";
_keyWordList[3] = "if";
_keyWordList[4] = "else";
_keyWordList[5] = "while";
_keyWordList[6] = "type";
_keyWordList[7] = "import";
_keyWordList[8] = "return";
_keyWordList[9] = "sizeof";

type Name {
	WhiteSpace space;
	Region region;
	str name;
	int keyword;
}

func createName(Position start, Position end, WhiteSpace space) -> Name {
	var name = (Name)malloc(sizeof(Name));

	name.region = createRegion(start, end);
	name.space = space;
	name.keyword = -1;

	var length = end.index - start.index;

	var stringStart = (str)((int)start.buffer + start.index);
	name.name = strndup(stringStart, length);

	var i = 0;
	while (i < NUMKEYWORDS) {
		if (streq(name.name, _keyWordList[i])) {
			name.keyword = i;
			i = NUMKEYWORDS;
		}
		i = i + 1;
	}

	return name;
}

func isKeyWord(Name name, int keyWordId) -> bool {
	return name.keyword == keyWordId;
}

func isIdentifier(Name name) -> bool {
	return name.keyword == -1;
}
