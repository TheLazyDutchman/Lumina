import "../std/string.lumina"
import "../std/collections.lumina"

import "position.lumina"
import "name.lumina"
import "operation.lumina"
import "operator.lumina"
import "type.lumina"
import "whitespace.lumina"


type Variable {
	str name;
	VariableDefinition definition;

	int depth;
	int position;

	TypeObj variableType;
	
	bool isConstant;
	bool isEvaluated;
	int value;
}

type VariableDefinition {
	Region region;

	Name keyword;
	Name name;
	Operator equalSign;
	Operation value;
	Operator semicolon;

	TypeObj variableType;
}

func createVariableDefinition(Name keyword, Name name, Operator equalSign, Operation value, Operator semicolon) -> VariableDefinition {
	var variable = new VariableDefinition();

	variable.region = createRegion(keyword.region.start, semicolon.position);

	variable.keyword = keyword;
	variable.name = name;
	variable.equalSign = equalSign;
	variable.value = value;
	variable.semicolon = semicolon;

	return variable;
}

func createVariableFromString(str name, int depth, int position, TypeObj variableType) -> Variable {
	var variable = new Variable();

	variable.name = name;

	variable.depth = depth;
	variable.position = position;

	variable.variableType = variableType;

	variable.value = 0;

	return variable;
}

func createVariableFromDefinition(VariableDefinition definition, int depth, int position) -> Variable {
	var variable = createVariableFromString(definition.name.name, depth, position, definition.variableType);

	variable.definition = definition;

	return variable;
}

func createConstantFromDefinition(VariableDefinition definition) -> Variable {
	var constant = createVariableFromString(definition.name.name, 0, 0, definition.variableType);

	constant.isConstant = (bool)1;
	constant.definition = definition;

	return constant;
}

func findVariable(Array<Variable> list, str name) -> Variable {
	var i = 0;
	while (i < list.size) {
		if (streq(list.list[i].name, name)) {
			return list.list[i];
		}
		i = i + 1;
	}
	return (Variable)0;
}

func getNumVariables(Array<Variable> list) -> int {
	var sum = 0;
	var i = 0;
	while (i < list.size) {
		if (list.list[i].isConstant != (bool)1) {
			sum = sum + 1;
		}
		i = i + 1;
	}
	return sum;
}
