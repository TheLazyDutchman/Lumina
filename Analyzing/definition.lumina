import "../std/string.lumina"
import "../std/collections.lumina"

import "name.lumina"
import "position.lumina"
import "whitespace.lumina"
import "type.lumina"
import "variable.lumina"
import "function.lumina"


type Definition {
	str name;

	TypeObj typeObj;
	Variable variable;
	FunctionDefinition function;

	TypeObj valueType;
}

func createDefinition() -> Definition {
	var definition = new Definition();

	definition.name = (str)0;
	definition.typeObj = (TypeObj)0;
	definition.variable = (Variable)0;
	definition.function = (FunctionDefinition)0;

	definition.valueType = (TypeObj)0;

	return definition;
}

func createDefinitionFromType(TypeObj typeObj) -> Definition {
	var definition = createDefinition();

	definition.name = typeObj.name;
	definition.typeObj = typeObj;

	return definition;
}

func createDefinitionFromVariable(Variable variable) -> Definition {
	var definition = createDefinition();

	definition.name = variable.name;
	definition.variable = variable;

	return definition;
}

func createDefinitionFromFunction(FunctionDefinition function) -> Definition {
	var definition = createDefinition();

	definition.name = function.name.name;
	definition.function = function;

	return definition;
}

func findDefinition(Array<Definition> list, str name) -> Definition {
	var i = 0;
	while (i < list.size) {
		if (streq(list.list[i].name, name)) {
			return list.list[i];
		}
		i = i + 1;
	}
	return (Definition)0;
}
